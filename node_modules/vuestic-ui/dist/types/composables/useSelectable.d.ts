import { PropType, SetupContext, Ref } from 'vue';
import { StatefulProps } from './useStateful';
import { LoadingProps } from './useLoading';
import { ValidationProps } from './useValidation';
export interface SelectableProps extends StatefulProps<unknown>, LoadingProps, ValidationProps {
    arrayValue: unknown | null;
    label: string;
    leftLabel: boolean;
    trueValue: boolean;
    falseValue: boolean;
    indeterminate: boolean;
    indeterminateValue: unknown | null;
    disabled: boolean;
    readonly: boolean;
}
declare type Elements = {
    input: Ref<HTMLElement | null>;
    label: Ref<HTMLElement | null>;
    container: Ref<HTMLElement | null>;
};
export declare const useSelectableProps: {
    arrayValue: {
        type: PropType<unknown>;
        default: null;
    };
    label: {
        type: PropType<string>;
        default: string;
    };
    leftLabel: {
        type: PropType<boolean>;
        default: boolean;
    };
    trueValue: {
        type: PropType<unknown>;
        default: boolean;
    };
    falseValue: {
        type: PropType<unknown>;
        default: boolean;
    };
    indeterminate: {
        type: PropType<boolean>;
        default: boolean;
    };
    indeterminateValue: {
        type: PropType<unknown>;
        default: null;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    modelValue: {
        required: boolean;
    };
    error: {
        type: BooleanConstructor;
        default: undefined;
    };
    errorMessages: {
        type: PropType<string | string[]>;
        default: undefined;
    };
    errorCount: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    rules: {
        type: PropType<((v: unknown) => any)[]>;
        default: () => never[];
    };
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    messages: {
        type: PropType<string | string[]>;
        default: () => never[];
    };
    immediateValidation: {
        type: BooleanConstructor;
        default: boolean;
    };
    loading: {
        type: PropType<boolean>;
        default: boolean;
    };
    stateful: {
        type: PropType<boolean>;
        default: boolean;
    };
};
export declare const useSelectableEmits: string[];
export declare const useSelectable: (props: SelectableProps, emit: SetupContext['emit'], { input, label, container }: Elements) => {
    isChecked: import("vue").ComputedRef<boolean>;
    isIndeterminate: import("vue").ComputedRef<boolean>;
    onBlur: (event: FocusEvent) => void;
    onFocus: (event: FocusEvent) => void;
    toggleSelection: () => void;
    reset: () => void;
    focus: () => void | undefined;
    computedError: import("vue").WritableComputedRef<boolean>;
    computedErrorMessages: import("vue").WritableComputedRef<string | string[]>;
};
export {};
