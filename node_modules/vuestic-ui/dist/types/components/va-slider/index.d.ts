declare const _default: import("vue").DefineComponent<{
    range: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    modelValue: {
        type: import("vue").PropType<number | number[]>;
        default: () => never[];
    };
    trackLabel: {
        type: import("vue").PropType<string | ((val: any, order?: number | undefined) => string) | undefined>;
    };
    color: {
        type: import("vue").PropType<string>;
        default: string;
    };
    trackColor: {
        type: import("vue").PropType<string>;
        default: string;
    };
    labelColor: {
        type: import("vue").PropType<string>;
        default: string;
    };
    trackLabelVisible: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    min: {
        type: import("vue").PropType<number>;
        default: number;
    };
    max: {
        type: import("vue").PropType<number>;
        default: number;
    };
    step: {
        type: import("vue").PropType<number>;
        default: number;
    };
    label: {
        type: import("vue").PropType<string>;
        default: string;
    };
    invertLabel: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    disabled: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    readonly: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    pins: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    iconPrepend: {
        type: import("vue").PropType<string>;
        default: string;
    };
    iconAppend: {
        type: import("vue").PropType<string>;
        default: string;
    };
    vertical: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    showTrack: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
}, {
    getColor: (prop?: string | undefined, defaultColor?: string, preferVariables?: boolean | undefined) => string;
    dot: import("vue").Ref<HTMLElement | undefined>;
    dot0: import("vue").Ref<HTMLElement | undefined>;
    dot1: import("vue").Ref<HTMLElement | undefined>;
    orders: import("vue").ComputedRef<number[]>;
    sliderContainer: import("vue").Ref<HTMLElement | undefined>;
    val: import("vue").WritableComputedRef<number | number[]>;
    sliderClass: import("vue").ComputedRef<{
        'va-slider--active': boolean;
        'va-slider--disabled': boolean;
        'va-slider--readonly': boolean;
        'va-slider--horizontal': boolean;
        'va-slider--vertical': boolean;
    }>;
    dotClass: import("vue").ComputedRef<{
        'va-slider__handler--inactive': boolean;
    }[] | {
        'va-slider__handler--on-focus': true | import("vue").Ref<boolean>;
        'va-slider__handler--inactive': boolean;
    }>;
    labelStyles: import("vue").ComputedRef<{
        color: string;
    }>;
    processedStyles: import("vue").ComputedRef<import("vue").CSSProperties>;
    getPinStyles: (pin: number) => {
        [x: string]: string;
        backgroundColor: string;
        transition: string;
    };
    dottedStyles: import("vue").ComputedRef<{
        [x: string]: string;
        backgroundColor: string;
        borderColor: string;
    }[] | {
        [x: string]: string;
        backgroundColor: string;
        borderColor: string;
    }>;
    clickOnContainer: (e: MouseEvent | TouchEvent) => void;
    moveStart: (e: MouseEvent | TouchEvent, index?: number) => void;
    hasMouseDown: import("vue").Ref<boolean>;
    trackStyles: import("vue").ComputedRef<{
        backgroundColor: string;
    }>;
    pinsCol: import("vue").ComputedRef<number>;
    checkActivePin: (pin: number) => boolean;
    isFocused: import("vue").Ref<boolean>;
    isActiveDot: (index: number) => boolean;
    getTrackLabel: (val: number | number[], order?: number | undefined) => string | number | number[] | undefined;
    currentSliderDotIndex: import("vue").Ref<number>;
    isRange: boolean;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:modelValue" | "drag-start" | "drag-end")[], "change" | "update:modelValue" | "drag-start" | "drag-end", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    range?: unknown;
    modelValue?: unknown;
    trackLabel?: unknown;
    color?: unknown;
    trackColor?: unknown;
    labelColor?: unknown;
    trackLabelVisible?: unknown;
    min?: unknown;
    max?: unknown;
    step?: unknown;
    label?: unknown;
    invertLabel?: unknown;
    disabled?: unknown;
    readonly?: unknown;
    pins?: unknown;
    iconPrepend?: unknown;
    iconAppend?: unknown;
    vertical?: unknown;
    showTrack?: unknown;
} & {
    max: number;
    color: string;
    label: string;
    disabled: boolean;
    readonly: boolean;
    range: boolean;
    vertical: boolean;
    step: number;
    min: number;
    modelValue: number | number[];
    trackColor: string;
    labelColor: string;
    trackLabelVisible: boolean;
    invertLabel: boolean;
    pins: boolean;
    iconPrepend: string;
    iconAppend: string;
    showTrack: boolean;
} & {
    trackLabel?: string | ((val: any, order?: number | undefined) => string) | undefined;
}> & {
    onChange?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    "onDrag-start"?: ((...args: any[]) => any) | undefined;
    "onDrag-end"?: ((...args: any[]) => any) | undefined;
}, {
    max: number;
    color: string;
    label: string;
    disabled: boolean;
    readonly: boolean;
    range: boolean;
    vertical: boolean;
    step: number;
    min: number;
    modelValue: number | number[];
    trackColor: string;
    labelColor: string;
    trackLabelVisible: boolean;
    invertLabel: boolean;
    pins: boolean;
    iconPrepend: string;
    iconAppend: string;
    showTrack: boolean;
}>;
export default _default;
