export declare const VaTimeInput: import("vue").DefineComponent<{
    isOpen: {
        type: BooleanConstructor;
        default: undefined;
    };
    modelValue: {
        type: DateConstructor;
        default: undefined;
    };
    clearValue: {
        type: StringConstructor;
        default: undefined;
    };
    format: {
        type: import("vue").PropType<(date: Date) => string>;
    };
    parse: {
        type: import("vue").PropType<(input: string) => Date>;
    };
    manualInput: {
        type: BooleanConstructor;
        default: boolean;
    };
    leftIcon: {
        type: BooleanConstructor;
        default: boolean;
    };
    icon: {
        type: StringConstructor;
        default: string;
    };
    ampm: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    hidePeriodSwitch: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    periodUpdatesModelValue: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    view: {
        type: import("vue").PropType<"hours" | "minutes" | "seconds">;
        required: true;
        default: "hours" | "minutes" | "seconds";
    };
    hoursFilter: {
        type: import("vue").PropType<((h: number) => boolean) | undefined>;
        required: false;
        default: undefined;
    };
    minutesFilter: {
        type: import("vue").PropType<((h: number) => boolean) | undefined>;
        required: false;
        default: undefined;
    };
    secondsFilter: {
        type: import("vue").PropType<((h: number) => boolean) | undefined>;
        required: false;
        default: undefined;
    };
    disabled: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    readonly: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    stateful: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    placeholder: {
        type: import("vue").PropType<string>;
        required: true;
        default: string;
    };
    tabindex: {
        type: import("vue").PropType<number>;
        required: true;
        default: number;
    };
    label: {
        type: import("vue").PropType<string>;
        required: true;
        default: string;
    };
    type: {
        type: import("vue").PropType<"textarea" | "text">;
        required: true;
        default: "textarea" | "text";
    };
    loading: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    inputClass: {
        type: import("vue").PropType<string>;
        required: true;
        default: string;
    };
    pattern: {
        type: import("vue").PropType<string | undefined>;
        required: false;
        default: undefined;
    };
    inputmode: {
        type: import("vue").PropType<string>;
        required: true;
        default: string;
    };
    color: {
        type: import("vue").PropType<string>;
        required: true;
        default: string;
    };
    outline: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    bordered: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    requiredMark: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    autosize: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    minRows: {
        type: import("vue").PropType<number>;
        required: true;
        default: number;
    };
    maxRows: {
        type: import("vue").PropType<number | undefined>;
        required: false;
        default: undefined;
    };
    mask: {
        type: import("vue").PropType<string | Record<string, any>>;
        required: true;
        default: string | Record<string, any>;
    };
    returnRaw: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    clearable: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    clearableIcon: {
        type: import("vue").PropType<string>;
        required: true;
        default: string;
    };
    error: {
        type: import("vue").PropType<boolean | undefined>;
        required: false;
        default: undefined;
    };
    errorMessages: {
        type: import("vue").PropType<string | string[] | undefined>;
        required: false;
        default: undefined;
    };
    errorCount: {
        type: import("vue").PropType<string | number>;
        required: true;
        default: string | number;
    };
    rules: {
        type: import("vue").PropType<((v: unknown) => any)[]>;
        required: true;
        default: ((v: unknown) => any)[];
    };
    success: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    messages: {
        type: import("vue").PropType<string | string[]>;
        required: true;
        default: string | string[];
    };
    immediateValidation: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
}, {
    input: import("vue").Ref<import("vue").DefineComponent<{
        placeholder: {
            type: StringConstructor;
            default: string;
        };
        tabindex: {
            type: NumberConstructor;
            default: number;
        };
        modelValue: {
            type: (StringConstructor | NumberConstructor)[];
            default: string;
        };
        label: {
            type: StringConstructor;
            default: string;
        };
        type: {
            type: import("vue").PropType<"textarea" | "text">;
            default: string;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        inputClass: {
            type: StringConstructor;
            default: string;
        };
        pattern: {
            type: StringConstructor;
        };
        inputmode: {
            type: StringConstructor;
            default: string;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        outline: {
            type: BooleanConstructor;
            default: boolean;
        };
        bordered: {
            type: BooleanConstructor;
            default: boolean;
        };
        requiredMark: {
            type: BooleanConstructor;
            default: boolean;
        };
        autosize: {
            type: import("vue").PropType<boolean>;
            required: true;
            default: boolean;
        };
        minRows: {
            type: import("vue").PropType<number>;
            required: true;
            default: number;
        };
        maxRows: {
            type: import("vue").PropType<number | undefined>;
            required: false;
            default: undefined;
        };
        disabled: {
            type: import("vue").PropType<boolean>;
            required: true;
            default: boolean;
        };
        readonly: {
            type: import("vue").PropType<boolean>;
            required: true;
            default: boolean;
        };
        mask: {
            type: (ObjectConstructor | StringConstructor)[];
            default: string;
        };
        returnRaw: {
            type: BooleanConstructor;
            default: boolean;
        };
        clearable: {
            type: BooleanConstructor;
            default: boolean;
        };
        clearableIcon: {
            type: StringConstructor;
            default: string;
        };
        clearValue: {
            type: StringConstructor;
            default: string;
        };
        error: {
            type: BooleanConstructor;
            default: undefined;
        };
        errorMessages: {
            type: import("vue").PropType<string | string[]>;
            default: undefined;
        };
        errorCount: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        rules: {
            type: import("vue").PropType<((v: unknown) => any)[]>;
            default: () => never[];
        };
        success: {
            type: BooleanConstructor;
            default: boolean;
        };
        messages: {
            type: import("vue").PropType<string | string[]>;
            default: () => never[];
        };
        immediateValidation: {
            type: BooleanConstructor;
            default: boolean;
        };
    }, {
        input: import("vue").Ref<HTMLInputElement | import("vue").DefineComponent<{
            modelValue: {
                type: (StringConstructor | NumberConstructor)[];
                default: string;
            };
            placeholder: {
                type: StringConstructor;
            };
            autosize: {
                type: BooleanConstructor;
                default: boolean;
            };
            minRows: {
                type: NumberConstructor;
                default: number;
                validator: (val: number) => boolean;
            };
            maxRows: {
                type: NumberConstructor;
                validator: (val: number) => boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            readonly: {
                type: BooleanConstructor;
                default: boolean;
            };
        }, {
            textarea: import("vue").Ref<HTMLTextAreaElement | undefined>;
            computedStyle: import("vue").ComputedRef<import("vue").CSSProperties>;
            listeners: Record<string, any>;
            computedProps: import("vue").ComputedRef<{
                disabled: boolean;
                readonly: boolean;
                placeholder: string | undefined;
            }>;
        }, unknown, {}, {
            focus(): void;
            blur(): void;
        }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
            modelValue?: unknown;
            placeholder?: unknown;
            autosize?: unknown;
            minRows?: unknown;
            maxRows?: unknown;
            disabled?: unknown;
            readonly?: unknown;
        } & {
            disabled: boolean;
            readonly: boolean;
            autosize: boolean;
            modelValue: string | number;
            minRows: number;
        } & {
            placeholder?: string | undefined;
            maxRows?: number | undefined;
        }> & {
            [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
        }, {
            disabled: boolean;
            readonly: boolean;
            autosize: boolean;
            modelValue: string | number;
            minRows: number;
        }> | undefined>;
        inputEvents: {
            onFocus: (e: Event) => void;
            onBlur: (e: Event) => void;
            onInput: (event: Event) => void;
        };
        computedChildAttributes: import("vue").ComputedRef<import("vue").InputHTMLAttributes>;
        computedInputAttributes: import("vue").ComputedRef<import("vue").InputHTMLAttributes>;
        textareaProps: import("vue").ComputedRef<{
            [x: string & `on${string}`]: unknown;
            modelValue?: unknown;
            placeholder?: unknown;
            autosize?: unknown;
            minRows?: unknown;
            maxRows?: unknown;
            disabled?: unknown;
            readonly?: unknown;
        } & {
            disabled: boolean;
            readonly: boolean;
            autosize: boolean;
            modelValue: string | number;
            minRows: number;
        } & {
            [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
            placeholder?: string | undefined;
            maxRows?: number | undefined;
        }>;
        computedValue: import("vue").ComputedRef<string | number>;
        computedError: import("vue").WritableComputedRef<boolean>;
        computedErrorMessages: import("vue").WritableComputedRef<string | string[]>;
        isFocused: import("vue").Ref<boolean>;
        canBeCleared: import("vue").ComputedRef<boolean>;
        clearIconProps: import("vue").ComputedRef<{
            name: string;
            color: string;
            size: string;
        }>;
        fieldListeners: Record<string, any>;
        reset: () => void;
        filterSlots: import("vue").ComputedRef<string[]>;
    }, unknown, {}, {
        focus(): void;
        blur(): void;
    }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        placeholder?: unknown;
        tabindex?: unknown;
        modelValue?: unknown;
        label?: unknown;
        type?: unknown;
        loading?: unknown;
        inputClass?: unknown;
        pattern?: unknown;
        inputmode?: unknown;
        color?: unknown;
        outline?: unknown;
        bordered?: unknown;
        requiredMark?: unknown;
        autosize?: unknown;
        minRows?: unknown;
        maxRows?: unknown;
        disabled?: unknown;
        readonly?: unknown;
        mask?: unknown;
        returnRaw?: unknown;
        clearable?: unknown;
        clearableIcon?: unknown;
        clearValue?: unknown;
        error?: unknown;
        errorMessages?: unknown;
        errorCount?: unknown;
        rules?: unknown;
        success?: unknown;
        messages?: unknown;
        immediateValidation?: unknown;
    } & {
        type: "textarea" | "text";
        color: string;
        mask: string | Record<string, any>;
        outline: boolean;
        loading: boolean;
        label: string;
        disabled: boolean;
        readonly: boolean;
        success: boolean;
        placeholder: string;
        tabindex: number;
        inputmode: string;
        autosize: boolean;
        modelValue: string | number;
        rules: ((v: unknown) => any)[];
        bordered: boolean;
        messages: string | string[];
        requiredMark: boolean;
        errorCount: string | number;
        immediateValidation: boolean;
        minRows: number;
        inputClass: string;
        returnRaw: boolean;
        clearable: boolean;
        clearableIcon: string;
        clearValue: string;
    } & {
        error?: boolean | undefined;
        pattern?: string | undefined;
        errorMessages?: string | string[] | undefined;
        maxRows?: number | undefined;
    }> & {
        [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
    }, {
        type: "textarea" | "text";
        error: boolean;
        color: string;
        mask: string | Record<string, any>;
        outline: boolean;
        loading: boolean;
        label: string;
        disabled: boolean;
        readonly: boolean;
        success: boolean;
        placeholder: string;
        tabindex: number;
        inputmode: string;
        autosize: boolean;
        modelValue: string | number;
        rules: ((v: unknown) => any)[];
        bordered: boolean;
        errorMessages: string | string[];
        messages: string | string[];
        requiredMark: boolean;
        errorCount: string | number;
        immediateValidation: boolean;
        minRows: number;
        maxRows: number | undefined;
        inputClass: string;
        returnRaw: boolean;
        clearable: boolean;
        clearableIcon: string;
        clearValue: string;
    }> | undefined>;
    timePicker: import("vue").Ref<import("vue").DefineComponent<{
        modelValue: {
            type: DateConstructor;
            required: false;
        };
        ampm: {
            type: BooleanConstructor;
            default: boolean;
        };
        hidePeriodSwitch: {
            type: BooleanConstructor;
            default: boolean;
        };
        periodUpdatesModelValue: {
            type: BooleanConstructor;
            default: boolean;
        };
        view: {
            type: import("vue").PropType<"hours" | "minutes" | "seconds">;
            default: string;
        };
        hoursFilter: {
            type: import("vue").PropType<(h: number) => boolean>;
        };
        minutesFilter: {
            type: import("vue").PropType<(h: number) => boolean>;
        };
        secondsFilter: {
            type: import("vue").PropType<(h: number) => boolean>;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        stateful: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
    }, {
        columns: import("vue").ComputedRef<({
            items: number[];
            activeItem: import("vue").WritableComputedRef<number>;
        } | {
            items: string[];
            activeItem: import("vue").WritableComputedRef<number>;
        })[]>;
        computedClass: import("vue").ComputedRef<Record<"va-time-picker--disabled" | "va-time-picker--readonly", boolean>>;
        isPM: import("vue").Ref<boolean>;
        pickers: import("vue").Ref<HTMLElement[]>;
        setItemRef: (el: any) => void;
        focusNext: () => void;
        focusPrev: () => void;
        activeColumnIndex: import("vue").Ref<number | undefined>;
        focus: (idx?: number) => void;
        blur: (idx?: number | undefined) => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        modelValue?: unknown;
        ampm?: unknown;
        hidePeriodSwitch?: unknown;
        periodUpdatesModelValue?: unknown;
        view?: unknown;
        hoursFilter?: unknown;
        minutesFilter?: unknown;
        secondsFilter?: unknown;
        disabled?: unknown;
        readonly?: unknown;
        stateful?: unknown;
    } & {
        view: "hours" | "minutes" | "seconds";
        disabled: boolean;
        readonly: boolean;
        stateful: boolean;
        ampm: boolean;
        hidePeriodSwitch: boolean;
        periodUpdatesModelValue: boolean;
    } & {
        modelValue?: Date | undefined;
        hoursFilter?: ((h: number) => boolean) | undefined;
        minutesFilter?: ((h: number) => boolean) | undefined;
        secondsFilter?: ((h: number) => boolean) | undefined;
    }> & {
        [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
    }, {
        view: "hours" | "minutes" | "seconds";
        disabled: boolean;
        readonly: boolean;
        stateful: boolean;
        ampm: boolean;
        hidePeriodSwitch: boolean;
        periodUpdatesModelValue: boolean;
    }> | undefined>;
    clearIconId: string;
    componentIconId: string;
    timePickerProps: import("vue").ComputedRef<{
        [x: string & `on${string}`]: unknown;
        modelValue?: unknown;
        ampm?: unknown;
        hidePeriodSwitch?: unknown;
        periodUpdatesModelValue?: unknown;
        view?: unknown;
        hoursFilter?: unknown;
        minutesFilter?: unknown;
        secondsFilter?: unknown;
        disabled?: unknown;
        readonly?: unknown;
        stateful?: unknown;
    } & {
        view: "hours" | "minutes" | "seconds";
        disabled: boolean;
        readonly: boolean;
        stateful: boolean;
        ampm: boolean;
        hidePeriodSwitch: boolean;
        periodUpdatesModelValue: boolean;
    } & {
        [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
        modelValue?: Date | undefined;
        hoursFilter?: ((h: number) => boolean) | undefined;
        minutesFilter?: ((h: number) => boolean) | undefined;
        secondsFilter?: ((h: number) => boolean) | undefined;
    }>;
    computedInputProps: import("vue").ComputedRef<{
        clearable: boolean;
        rules: never[];
        error: boolean;
        errorMessages: string | string[];
        readonly: boolean;
        placeholder: string;
        tabindex: number;
        modelValue: string | number;
        label: string;
        type: "textarea" | "text";
        loading: boolean;
        inputClass: string;
        pattern?: string | undefined;
        inputmode: string;
        color: string;
        outline: boolean;
        bordered: boolean;
        requiredMark: boolean;
        autosize: boolean;
        minRows: number;
        maxRows?: number | undefined;
        disabled: boolean;
        mask: string | Record<string, any>;
        returnRaw: boolean;
        clearableIcon: string;
        clearValue: string;
        errorCount: string | number;
        success: boolean;
        messages: string | string[];
        immediateValidation: boolean;
    }>;
    computedInputAttrs: import("vue").ComputedRef<{
        ariaLabel: string;
    }>;
    computedInputListeners: import("vue").ComputedRef<{
        focus: () => void;
        blur: () => void;
    }>;
    isOpenSync: import("vue").WritableComputedRef<boolean>;
    modelValueSync: import("vue").WritableComputedRef<Date | undefined>;
    valueText: import("vue").ComputedRef<string | undefined>;
    onInputTextChanged: (val: string) => void;
    onValueInput: (val: string) => void;
    canBeCleared: import("vue").ComputedRef<boolean>;
    iconProps: import("vue").ComputedRef<{
        name: string;
        color: string;
        size: string;
    }>;
    clearIconProps: import("vue").ComputedRef<{
        name: string;
        color: string;
        size: string;
    }>;
    filterSlots: import("vue").ComputedRef<string[]>;
    hideDropdown: () => void;
    showDropdown: () => void;
    dropdownToggle: () => void;
    handleComponentClick: (e: Event & {
        target: {
            id: string | undefined;
        };
    }) => any;
    reset: () => void;
    focus: () => void;
    blur: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    isOpen?: unknown;
    modelValue?: unknown;
    clearValue?: unknown;
    format?: unknown;
    parse?: unknown;
    manualInput?: unknown;
    leftIcon?: unknown;
    icon?: unknown;
    ampm?: unknown;
    hidePeriodSwitch?: unknown;
    periodUpdatesModelValue?: unknown;
    view?: unknown;
    hoursFilter?: unknown;
    minutesFilter?: unknown;
    secondsFilter?: unknown;
    disabled?: unknown;
    readonly?: unknown;
    stateful?: unknown;
    placeholder?: unknown;
    tabindex?: unknown;
    label?: unknown;
    type?: unknown;
    loading?: unknown;
    inputClass?: unknown;
    pattern?: unknown;
    inputmode?: unknown;
    color?: unknown;
    outline?: unknown;
    bordered?: unknown;
    requiredMark?: unknown;
    autosize?: unknown;
    minRows?: unknown;
    maxRows?: unknown;
    mask?: unknown;
    returnRaw?: unknown;
    clearable?: unknown;
    clearableIcon?: unknown;
    error?: unknown;
    errorMessages?: unknown;
    errorCount?: unknown;
    rules?: unknown;
    success?: unknown;
    messages?: unknown;
    immediateValidation?: unknown;
} & {
    type: "textarea" | "text";
    view: "hours" | "minutes" | "seconds";
    color: string;
    mask: string | Record<string, any>;
    outline: boolean;
    loading: boolean;
    label: string;
    disabled: boolean;
    readonly: boolean;
    success: boolean;
    icon: string;
    placeholder: string;
    tabindex: number;
    inputmode: string;
    autosize: boolean;
    stateful: boolean;
    rules: ((v: unknown) => any)[];
    leftIcon: boolean;
    bordered: boolean;
    messages: string | string[];
    requiredMark: boolean;
    errorCount: string | number;
    immediateValidation: boolean;
    minRows: number;
    inputClass: string;
    returnRaw: boolean;
    clearable: boolean;
    clearableIcon: string;
    manualInput: boolean;
    ampm: boolean;
    hidePeriodSwitch: boolean;
    periodUpdatesModelValue: boolean;
} & {
    error?: boolean | undefined;
    pattern?: string | undefined;
    format?: ((date: Date) => string) | undefined;
    modelValue?: Date | undefined;
    errorMessages?: string | string[] | undefined;
    maxRows?: number | undefined;
    clearValue?: string | undefined;
    isOpen?: boolean | undefined;
    parse?: ((input: string) => Date) | undefined;
    hoursFilter?: ((h: number) => boolean) | undefined;
    minutesFilter?: ((h: number) => boolean) | undefined;
    secondsFilter?: ((h: number) => boolean) | undefined;
}> & {
    [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
}, {
    type: "textarea" | "text";
    error: boolean | undefined;
    view: "hours" | "minutes" | "seconds";
    color: string;
    mask: string | Record<string, any>;
    outline: boolean;
    loading: boolean;
    label: string;
    pattern: string | undefined;
    disabled: boolean;
    readonly: boolean;
    success: boolean;
    icon: string;
    placeholder: string;
    tabindex: number;
    inputmode: string;
    autosize: boolean;
    modelValue: Date;
    stateful: boolean;
    rules: ((v: unknown) => any)[];
    leftIcon: boolean;
    bordered: boolean;
    errorMessages: string | string[] | undefined;
    messages: string | string[];
    requiredMark: boolean;
    errorCount: string | number;
    immediateValidation: boolean;
    minRows: number;
    maxRows: number | undefined;
    inputClass: string;
    returnRaw: boolean;
    clearable: boolean;
    clearableIcon: string;
    clearValue: string;
    isOpen: boolean;
    manualInput: boolean;
    ampm: boolean;
    hidePeriodSwitch: boolean;
    periodUpdatesModelValue: boolean;
    hoursFilter: ((h: number) => boolean) | undefined;
    minutesFilter: ((h: number) => boolean) | undefined;
    secondsFilter: ((h: number) => boolean) | undefined;
}>;
