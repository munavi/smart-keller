import { PropType } from 'vue';
import { SelectableOption } from '../../composables/useSelectableList';
declare type OptionListValue = SelectableOption | SelectableOption[] | null;
declare const _default: import("vue").DefineComponent<{
    type: {
        type: PropType<"switch" | "checkbox" | "radio">;
        default: string;
        validator: (type: any) => boolean;
    };
    disabled: {
        type: PropType<boolean>;
        default: boolean;
    };
    readonly: {
        type: PropType<boolean>;
        default: boolean;
    };
    defaultValue: {
        type: PropType<OptionListValue>;
    };
    name: {
        type: PropType<string>;
        default: () => string;
    };
    color: {
        type: PropType<string>;
        default: string;
    };
    leftLabel: {
        type: BooleanConstructor;
        default: boolean;
    };
    modelValue: {
        type: PropType<OptionListValue>;
    };
    stateful: {
        type: PropType<boolean>;
        default: boolean;
    };
    error: {
        type: BooleanConstructor;
        default: undefined;
    };
    errorMessages: {
        type: PropType<string | string[]>;
        default: undefined;
    };
    errorCount: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    rules: {
        type: PropType<((v: unknown) => any)[]>;
        default: () => never[];
    };
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    messages: {
        type: PropType<string | string[]>;
        default: () => never[];
    };
    immediateValidation: {
        type: BooleanConstructor;
        default: boolean;
    };
    options: {
        type: PropType<SelectableOption[]>;
        default: () => never[];
    };
    textBy: {
        type: PropType<string | ((option: SelectableOption) => unknown)>;
        default: string;
    };
    valueBy: {
        type: PropType<string | ((option: SelectableOption) => unknown)>;
        default: string;
    };
    trackBy: {
        type: PropType<string | ((option: SelectableOption) => unknown)>;
        default: string;
    };
    disabledBy: {
        type: PropType<string | ((option: SelectableOption) => unknown)>;
        default: string;
    };
    groupBy: {
        type: PropType<string | ((option: SelectableOption) => unknown)>;
        default: string;
    };
}, {
    selectedValue: import("vue").WritableComputedRef<OptionListValue>;
    computedError: import("vue").WritableComputedRef<boolean>;
    computedErrorMessages: import("vue").WritableComputedRef<string | string[]>;
    getValue: (option: SelectableOption) => any;
    getText: (option: SelectableOption) => any;
    getKey: (option: SelectableOption) => any;
    isDisabled: (option: SelectableOption) => any;
    reset: () => void;
    focus: () => void;
    setItemRef: (el: any) => void;
    computedProps: import("vue").ComputedRef<Pick<Readonly<{
        [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
        type: "switch" | "checkbox" | "radio";
        error: boolean | undefined;
        name: string;
        color: string;
        disabled: boolean;
        options: SelectableOption[];
        readonly: boolean;
        success: boolean;
        modelValue: OptionListValue | undefined;
        stateful: boolean;
        rules: ((v: unknown) => any)[];
        errorMessages: string | string[] | undefined;
        messages: string | string[];
        errorCount: string | number;
        immediateValidation: boolean;
        leftLabel: boolean;
        textBy: string | ((option: SelectableOption) => unknown);
        valueBy: string | ((option: SelectableOption) => unknown);
        trackBy: string | ((option: SelectableOption) => unknown);
        disabledBy: string | ((option: SelectableOption) => unknown);
        groupBy: string | ((option: SelectableOption) => unknown);
        defaultValue: OptionListValue | undefined;
    }>, "name" | "color" | "readonly" | "leftLabel">>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    type?: unknown;
    disabled?: unknown;
    readonly?: unknown;
    defaultValue?: unknown;
    name?: unknown;
    color?: unknown;
    leftLabel?: unknown;
    modelValue?: unknown;
    stateful?: unknown;
    error?: unknown;
    errorMessages?: unknown;
    errorCount?: unknown;
    rules?: unknown;
    success?: unknown;
    messages?: unknown;
    immediateValidation?: unknown;
    options?: unknown;
    textBy?: unknown;
    valueBy?: unknown;
    trackBy?: unknown;
    disabledBy?: unknown;
    groupBy?: unknown;
} & {
    type: "switch" | "checkbox" | "radio";
    name: string;
    color: string;
    disabled: boolean;
    options: SelectableOption[];
    readonly: boolean;
    success: boolean;
    stateful: boolean;
    rules: ((v: unknown) => any)[];
    messages: string | string[];
    errorCount: string | number;
    immediateValidation: boolean;
    leftLabel: boolean;
    textBy: string | ((option: SelectableOption) => unknown);
    valueBy: string | ((option: SelectableOption) => unknown);
    trackBy: string | ((option: SelectableOption) => unknown);
    disabledBy: string | ((option: SelectableOption) => unknown);
    groupBy: string | ((option: SelectableOption) => unknown);
} & {
    error?: boolean | undefined;
    modelValue?: OptionListValue | undefined;
    errorMessages?: string | string[] | undefined;
    defaultValue?: OptionListValue | undefined;
}> & {
    [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
}, {
    type: "switch" | "checkbox" | "radio";
    error: boolean;
    name: string;
    color: string;
    disabled: boolean;
    options: SelectableOption[];
    readonly: boolean;
    success: boolean;
    stateful: boolean;
    rules: ((v: unknown) => any)[];
    errorMessages: string | string[];
    messages: string | string[];
    errorCount: string | number;
    immediateValidation: boolean;
    leftLabel: boolean;
    textBy: string | ((option: SelectableOption) => unknown);
    valueBy: string | ((option: SelectableOption) => unknown);
    trackBy: string | ((option: SelectableOption) => unknown);
    disabledBy: string | ((option: SelectableOption) => unknown);
    groupBy: string | ((option: SelectableOption) => unknown);
}>;
export default _default;
