import { PropType } from 'vue';
import { VaDatePickerModelValue } from '../va-date-picker/types';
declare const _default: import("vue").DefineComponent<{
    clearValue: {
        type: PropType<VaDatePickerModelValue>;
        default: undefined;
    };
    resetOnClose: {
        type: BooleanConstructor;
        default: boolean;
    };
    isOpen: {
        type: PropType<boolean | undefined>;
        default: undefined;
    };
    format: {
        type: PropType<(date: VaDatePickerModelValue | undefined) => string>;
    };
    formatDate: {
        type: PropType<(date: Date) => string>;
        default: (d: Date) => string;
    };
    parse: {
        type: PropType<(input: string) => VaDatePickerModelValue>;
    };
    parseDate: {
        type: PropType<(input: string) => Date>;
    };
    parseValue: {
        type: PropType<(date: import("./types").VaDateInputModelValue) => VaDatePickerModelValue>;
    };
    delimiter: {
        type: StringConstructor;
        default: string;
    };
    rangeDelimiter: {
        type: StringConstructor;
        default: string;
    };
    manualInput: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    leftIcon: {
        type: BooleanConstructor;
        default: boolean;
    };
    icon: {
        type: StringConstructor;
        default: string;
    };
    modelValue: {
        type: PropType<VaDatePickerModelValue>;
        required: false;
        default: undefined;
    };
    monthNames: {
        type: PropType<string[]>;
        required: true;
        default: string[];
    };
    weekdayNames: {
        type: PropType<string[]>;
        required: true;
        default: string[];
    };
    view: {
        type: PropType<import("../va-date-picker/types").VaDatePickerView | undefined>;
        required: false;
        default: undefined;
    };
    type: {
        type: PropType<import("../va-date-picker/types").VaDatePickerType>;
        required: true;
        default: import("../va-date-picker/types").VaDatePickerType;
    };
    readonly: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    disabled: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    weekendsColor: {
        type: PropType<string | undefined>;
        required: false;
        default: undefined;
    };
    allowedYears: {
        type: PropType<((date: Date) => boolean) | undefined>;
        required: false;
        default: undefined;
    };
    highlightToday: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    mode: {
        type: PropType<import("../va-date-picker/types").VaDatePickerMode>;
        required: true;
        default: import("../va-date-picker/types").VaDatePickerMode;
    };
    startYear: {
        type: PropType<number>;
        required: true;
        default: number;
    };
    endYear: {
        type: PropType<number>;
        required: true;
        default: number;
    };
    "onUpdate:modelValue": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    "onHover:year": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    "onClick:year": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    allowedMonths: {
        type: PropType<((date: Date) => boolean) | undefined>;
        required: false;
        default: undefined;
    };
    "onHover:month": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    "onClick:month": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    firstWeekday: {
        type: PropType<"Monday" | "Sunday">;
        required: true;
        default: "Monday" | "Sunday";
    };
    hideWeekDays: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    showOtherMonths: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    allowedDays: {
        type: PropType<((date: Date) => boolean) | undefined>;
        required: false;
        default: undefined;
    };
    weekends: {
        type: PropType<((d: Date) => boolean) | undefined>;
        required: false;
        default: undefined;
    };
    highlightWeekend: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    otherMonth: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    today: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    inRange: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    selected: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    weekend: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    hidden: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    focused: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    onClick: {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    "onHover:day": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    "onClick:day": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    "onUpdate:view": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    stateful: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    placeholder: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    tabindex: {
        type: PropType<number>;
        required: true;
        default: number;
    };
    label: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    loading: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    inputClass: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    pattern: {
        type: PropType<string | undefined>;
        required: false;
        default: undefined;
    };
    inputmode: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    outline: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    bordered: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    requiredMark: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    autosize: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    minRows: {
        type: PropType<number>;
        required: true;
        default: number;
    };
    maxRows: {
        type: PropType<number | undefined>;
        required: false;
        default: undefined;
    };
    mask: {
        type: PropType<string | Record<string, any>>;
        required: true;
        default: string | Record<string, any>;
    };
    returnRaw: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    clearable: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    clearableIcon: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    error: {
        type: PropType<boolean | undefined>;
        required: false;
        default: undefined;
    };
    errorMessages: {
        type: PropType<string | string[] | undefined>;
        required: false;
        default: undefined;
    };
    errorCount: {
        type: PropType<string | number>;
        required: true;
        default: string | number;
    };
    rules: {
        type: PropType<((v: unknown) => any)[]>;
        required: true;
        default: ((v: unknown) => any)[];
    };
    success: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    messages: {
        type: PropType<string | string[]>;
        required: true;
        default: string | string[];
    };
    immediateValidation: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
}, {
    valueText: import("vue").ComputedRef<string>;
    valueComputed: import("vue").WritableComputedRef<{
        toString: () => string;
        toDateString: () => string;
        toTimeString: () => string;
        toLocaleString: {
            (): string;
            (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
        };
        toLocaleDateString: {
            (): string;
            (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
        };
        toLocaleTimeString: {
            (): string;
            (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
        };
        valueOf: () => number;
        getTime: () => number;
        getFullYear: () => number;
        getUTCFullYear: () => number;
        getMonth: () => number;
        getUTCMonth: () => number;
        getDate: () => number;
        getUTCDate: () => number;
        getDay: () => number;
        getUTCDay: () => number;
        getHours: () => number;
        getUTCHours: () => number;
        getMinutes: () => number;
        getUTCMinutes: () => number;
        getSeconds: () => number;
        getUTCSeconds: () => number;
        getMilliseconds: () => number;
        getUTCMilliseconds: () => number;
        getTimezoneOffset: () => number;
        setTime: (time: number) => number;
        setMilliseconds: (ms: number) => number;
        setUTCMilliseconds: (ms: number) => number;
        setSeconds: (sec: number, ms?: number | undefined) => number;
        setUTCSeconds: (sec: number, ms?: number | undefined) => number;
        setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
        setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
        setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
        setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
        setDate: (date: number) => number;
        setUTCDate: (date: number) => number;
        setMonth: (month: number, date?: number | undefined) => number;
        setUTCMonth: (month: number, date?: number | undefined) => number;
        setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
        setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
        toUTCString: () => string;
        toISOString: () => string;
        toJSON: (key?: any) => string;
        getVarDate: () => VarDate;
        [Symbol.toPrimitive]: {
            (hint: "default"): string;
            (hint: "string"): string;
            (hint: "number"): number;
            (hint: string): string | number;
        };
    } | {
        start?: {
            toString: () => string;
            toDateString: () => string;
            toTimeString: () => string;
            toLocaleString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            toLocaleDateString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            toLocaleTimeString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            valueOf: () => number;
            getTime: () => number;
            getFullYear: () => number;
            getUTCFullYear: () => number;
            getMonth: () => number;
            getUTCMonth: () => number;
            getDate: () => number;
            getUTCDate: () => number;
            getDay: () => number;
            getUTCDay: () => number;
            getHours: () => number;
            getUTCHours: () => number;
            getMinutes: () => number;
            getUTCMinutes: () => number;
            getSeconds: () => number;
            getUTCSeconds: () => number;
            getMilliseconds: () => number;
            getUTCMilliseconds: () => number;
            getTimezoneOffset: () => number;
            setTime: (time: number) => number;
            setMilliseconds: (ms: number) => number;
            setUTCMilliseconds: (ms: number) => number;
            setSeconds: (sec: number, ms?: number | undefined) => number;
            setUTCSeconds: (sec: number, ms?: number | undefined) => number;
            setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
            setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
            setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
            setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
            setDate: (date: number) => number;
            setUTCDate: (date: number) => number;
            setMonth: (month: number, date?: number | undefined) => number;
            setUTCMonth: (month: number, date?: number | undefined) => number;
            setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
            setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
            toUTCString: () => string;
            toISOString: () => string;
            toJSON: (key?: any) => string;
            getVarDate: () => VarDate;
            [Symbol.toPrimitive]: {
                (hint: "default"): string;
                (hint: "string"): string;
                (hint: "number"): number;
                (hint: string): string | number;
            };
        } | null | undefined;
        end?: {
            toString: () => string;
            toDateString: () => string;
            toTimeString: () => string;
            toLocaleString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            toLocaleDateString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            toLocaleTimeString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            valueOf: () => number;
            getTime: () => number;
            getFullYear: () => number;
            getUTCFullYear: () => number;
            getMonth: () => number;
            getUTCMonth: () => number;
            getDate: () => number;
            getUTCDate: () => number;
            getDay: () => number;
            getUTCDay: () => number;
            getHours: () => number;
            getUTCHours: () => number;
            getMinutes: () => number;
            getUTCMinutes: () => number;
            getSeconds: () => number;
            getUTCSeconds: () => number;
            getMilliseconds: () => number;
            getUTCMilliseconds: () => number;
            getTimezoneOffset: () => number;
            setTime: (time: number) => number;
            setMilliseconds: (ms: number) => number;
            setUTCMilliseconds: (ms: number) => number;
            setSeconds: (sec: number, ms?: number | undefined) => number;
            setUTCSeconds: (sec: number, ms?: number | undefined) => number;
            setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
            setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
            setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
            setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
            setDate: (date: number) => number;
            setUTCDate: (date: number) => number;
            setMonth: (month: number, date?: number | undefined) => number;
            setUTCMonth: (month: number, date?: number | undefined) => number;
            setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
            setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
            toUTCString: () => string;
            toISOString: () => string;
            toJSON: (key?: any) => string;
            getVarDate: () => VarDate;
            [Symbol.toPrimitive]: {
                (hint: "default"): string;
                (hint: "string"): string;
                (hint: "number"): number;
                (hint: string): string | number;
            };
        } | null | undefined;
    } | {
        toString: () => string;
        toDateString: () => string;
        toTimeString: () => string;
        toLocaleString: {
            (): string;
            (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
        };
        toLocaleDateString: {
            (): string;
            (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
        };
        toLocaleTimeString: {
            (): string;
            (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
        };
        valueOf: () => number;
        getTime: () => number;
        getFullYear: () => number;
        getUTCFullYear: () => number;
        getMonth: () => number;
        getUTCMonth: () => number;
        getDate: () => number;
        getUTCDate: () => number;
        getDay: () => number;
        getUTCDay: () => number;
        getHours: () => number;
        getUTCHours: () => number;
        getMinutes: () => number;
        getUTCMinutes: () => number;
        getSeconds: () => number;
        getUTCSeconds: () => number;
        getMilliseconds: () => number;
        getUTCMilliseconds: () => number;
        getTimezoneOffset: () => number;
        setTime: (time: number) => number;
        setMilliseconds: (ms: number) => number;
        setUTCMilliseconds: (ms: number) => number;
        setSeconds: (sec: number, ms?: number | undefined) => number;
        setUTCSeconds: (sec: number, ms?: number | undefined) => number;
        setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
        setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
        setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
        setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
        setDate: (date: number) => number;
        setUTCDate: (date: number) => number;
        setMonth: (month: number, date?: number | undefined) => number;
        setUTCMonth: (month: number, date?: number | undefined) => number;
        setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
        setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
        toUTCString: () => string;
        toISOString: () => string;
        toJSON: (key?: any) => string;
        getVarDate: () => VarDate;
        [Symbol.toPrimitive]: {
            (hint: "default"): string;
            (hint: "string"): string;
            (hint: "number"): number;
            (hint: string): string | number;
        };
    }[] | undefined>;
    isOpenSync: import("vue").WritableComputedRef<boolean | undefined>;
    onInputTextChanged: ({ target }: Event) => void;
    input: import("vue").Ref<import("vue").DefineComponent<{
        placeholder: {
            type: StringConstructor;
            default: string;
        };
        tabindex: {
            type: NumberConstructor;
            default: number;
        };
        modelValue: {
            type: (StringConstructor | NumberConstructor)[];
            default: string;
        };
        label: {
            type: StringConstructor;
            default: string;
        };
        type: {
            type: PropType<"textarea" | "text">;
            default: string;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        inputClass: {
            type: StringConstructor;
            default: string;
        };
        pattern: {
            type: StringConstructor;
        };
        inputmode: {
            type: StringConstructor;
            default: string;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        outline: {
            type: BooleanConstructor;
            default: boolean;
        };
        bordered: {
            type: BooleanConstructor;
            default: boolean;
        };
        requiredMark: {
            type: BooleanConstructor;
            default: boolean;
        };
        autosize: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        minRows: {
            type: PropType<number>;
            required: true;
            default: number;
        };
        maxRows: {
            type: PropType<number | undefined>;
            required: false;
            default: undefined;
        };
        disabled: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        readonly: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        mask: {
            type: (ObjectConstructor | StringConstructor)[];
            default: string;
        };
        returnRaw: {
            type: BooleanConstructor;
            default: boolean;
        };
        clearable: {
            type: BooleanConstructor;
            default: boolean;
        };
        clearableIcon: {
            type: StringConstructor;
            default: string;
        };
        clearValue: {
            type: StringConstructor;
            default: string;
        };
        error: {
            type: BooleanConstructor;
            default: undefined;
        };
        errorMessages: {
            type: PropType<string | string[]>;
            default: undefined;
        };
        errorCount: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        rules: {
            type: PropType<((v: unknown) => any)[]>;
            default: () => never[];
        };
        success: {
            type: BooleanConstructor;
            default: boolean;
        };
        messages: {
            type: PropType<string | string[]>;
            default: () => never[];
        };
        immediateValidation: {
            type: BooleanConstructor;
            default: boolean;
        };
    }, {
        input: import("vue").Ref<HTMLInputElement | import("vue").DefineComponent<{
            modelValue: {
                type: (StringConstructor | NumberConstructor)[];
                default: string;
            };
            placeholder: {
                type: StringConstructor;
            };
            autosize: {
                type: BooleanConstructor;
                default: boolean;
            };
            minRows: {
                type: NumberConstructor;
                default: number;
                validator: (val: number) => boolean;
            };
            maxRows: {
                type: NumberConstructor;
                validator: (val: number) => boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            readonly: {
                type: BooleanConstructor;
                default: boolean;
            };
        }, {
            textarea: import("vue").Ref<HTMLTextAreaElement | undefined>;
            computedStyle: import("vue").ComputedRef<import("vue").CSSProperties>;
            listeners: Record<string, any>;
            computedProps: import("vue").ComputedRef<{
                disabled: boolean;
                readonly: boolean;
                placeholder: string | undefined;
            }>;
        }, unknown, {}, {
            focus(): void;
            blur(): void;
        }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
            modelValue?: unknown;
            placeholder?: unknown;
            autosize?: unknown;
            minRows?: unknown;
            maxRows?: unknown;
            disabled?: unknown;
            readonly?: unknown;
        } & {
            disabled: boolean;
            readonly: boolean;
            autosize: boolean;
            modelValue: string | number;
            minRows: number;
        } & {
            placeholder?: string | undefined;
            maxRows?: number | undefined;
        }> & {
            [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
        }, {
            disabled: boolean;
            readonly: boolean;
            autosize: boolean;
            modelValue: string | number;
            minRows: number;
        }> | undefined>;
        inputEvents: {
            onFocus: (e: Event) => void;
            onBlur: (e: Event) => void;
            onInput: (event: Event) => void;
        };
        computedChildAttributes: import("vue").ComputedRef<import("vue").InputHTMLAttributes>;
        computedInputAttributes: import("vue").ComputedRef<import("vue").InputHTMLAttributes>;
        textareaProps: import("vue").ComputedRef<{
            [x: string & `on${string}`]: unknown;
            modelValue?: unknown;
            placeholder?: unknown;
            autosize?: unknown;
            minRows?: unknown;
            maxRows?: unknown;
            disabled?: unknown;
            readonly?: unknown;
        } & {
            disabled: boolean;
            readonly: boolean;
            autosize: boolean;
            modelValue: string | number;
            minRows: number;
        } & {
            [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
            placeholder?: string | undefined;
            maxRows?: number | undefined;
        }>;
        computedValue: import("vue").ComputedRef<string | number>;
        computedError: import("vue").WritableComputedRef<boolean>;
        computedErrorMessages: import("vue").WritableComputedRef<string | string[]>;
        isFocused: import("vue").Ref<boolean>;
        canBeCleared: import("vue").ComputedRef<boolean>;
        clearIconProps: import("vue").ComputedRef<{
            name: string;
            color: string;
            size: string;
        }>;
        fieldListeners: Record<string, any>;
        reset: () => void;
        filterSlots: import("vue").ComputedRef<string[]>;
    }, unknown, {}, {
        focus(): void;
        blur(): void;
    }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        placeholder?: unknown;
        tabindex?: unknown;
        modelValue?: unknown;
        label?: unknown;
        type?: unknown;
        loading?: unknown;
        inputClass?: unknown;
        pattern?: unknown;
        inputmode?: unknown;
        color?: unknown;
        outline?: unknown;
        bordered?: unknown;
        requiredMark?: unknown;
        autosize?: unknown;
        minRows?: unknown;
        maxRows?: unknown;
        disabled?: unknown;
        readonly?: unknown;
        mask?: unknown;
        returnRaw?: unknown;
        clearable?: unknown;
        clearableIcon?: unknown;
        clearValue?: unknown;
        error?: unknown;
        errorMessages?: unknown;
        errorCount?: unknown;
        rules?: unknown;
        success?: unknown;
        messages?: unknown;
        immediateValidation?: unknown;
    } & {
        type: "textarea" | "text";
        color: string;
        mask: string | Record<string, any>;
        outline: boolean;
        loading: boolean;
        label: string;
        disabled: boolean;
        readonly: boolean;
        success: boolean;
        placeholder: string;
        tabindex: number;
        inputmode: string;
        autosize: boolean;
        modelValue: string | number;
        rules: ((v: unknown) => any)[];
        bordered: boolean;
        messages: string | string[];
        requiredMark: boolean;
        errorCount: string | number;
        immediateValidation: boolean;
        minRows: number;
        inputClass: string;
        returnRaw: boolean;
        clearable: boolean;
        clearableIcon: string;
        clearValue: string;
    } & {
        error?: boolean | undefined;
        pattern?: string | undefined;
        errorMessages?: string | string[] | undefined;
        maxRows?: number | undefined;
    }> & {
        [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
    }, {
        type: "textarea" | "text";
        error: boolean;
        color: string;
        mask: string | Record<string, any>;
        outline: boolean;
        loading: boolean;
        label: string;
        disabled: boolean;
        readonly: boolean;
        success: boolean;
        placeholder: string;
        tabindex: number;
        inputmode: string;
        autosize: boolean;
        modelValue: string | number;
        rules: ((v: unknown) => any)[];
        bordered: boolean;
        errorMessages: string | string[];
        messages: string | string[];
        requiredMark: boolean;
        errorCount: string | number;
        immediateValidation: boolean;
        minRows: number;
        maxRows: number | undefined;
        inputClass: string;
        returnRaw: boolean;
        clearable: boolean;
        clearableIcon: string;
        clearValue: string;
    }> | undefined>;
    inputProps: import("vue").ComputedRef<{
        clearable: boolean;
        rules: never[];
        error: boolean;
        errorMessages: string | string[];
        readonly: boolean;
        placeholder: string;
        tabindex: number;
        modelValue: string | number;
        label: string;
        type: "textarea" | "text";
        loading: boolean;
        inputClass: string;
        pattern?: string | undefined;
        inputmode: string;
        color: string;
        outline: boolean;
        bordered: boolean;
        requiredMark: boolean;
        autosize: boolean;
        minRows: number;
        maxRows?: number | undefined;
        disabled: boolean;
        mask: string | Record<string, any>;
        returnRaw: boolean;
        clearableIcon: string;
        clearValue: string;
        errorCount: string | number;
        success: boolean;
        messages: string | string[];
        immediateValidation: boolean;
    }>;
    inputListeners: import("vue").ComputedRef<{
        focus: () => void;
        blur: () => void;
    }>;
    datePickerProps: import("vue").ComputedRef<{
        [x: string & `on${string}`]: unknown;
        modelValue?: unknown;
        monthNames?: unknown;
        weekdayNames?: unknown;
        view?: unknown;
        type?: unknown;
        readonly?: unknown;
        disabled?: unknown;
        color?: unknown;
        weekendsColor?: unknown;
        allowedYears?: unknown;
        highlightToday?: unknown;
        mode?: unknown;
        startYear?: unknown;
        endYear?: unknown;
        "onUpdate:modelValue"?: unknown;
        "onHover:year"?: unknown;
        "onClick:year"?: unknown;
        allowedMonths?: unknown;
        "onHover:month"?: unknown;
        "onClick:month"?: unknown;
        firstWeekday?: unknown;
        hideWeekDays?: unknown;
        showOtherMonths?: unknown;
        allowedDays?: unknown;
        weekends?: unknown;
        highlightWeekend?: unknown;
        otherMonth?: unknown;
        today?: unknown;
        inRange?: unknown;
        selected?: unknown;
        weekend?: unknown;
        hidden?: unknown;
        focused?: unknown;
        onClick?: unknown;
        "onHover:day"?: unknown;
        "onClick:day"?: unknown;
        "onUpdate:view"?: unknown;
        stateful?: unknown;
    } & {
        type: import("../va-date-picker/types").VaDatePickerType;
        hidden: boolean;
        disabled: boolean;
        readonly: boolean;
        mode: import("../va-date-picker/types").VaDatePickerMode;
        selected: boolean;
        stateful: boolean;
        focused: boolean;
        otherMonth: boolean;
        today: boolean;
        inRange: boolean;
        weekend: boolean;
        highlightWeekend: boolean;
        highlightToday: boolean;
        monthNames: string[];
        weekdayNames: string[];
        firstWeekday: "Monday" | "Sunday";
        hideWeekDays: boolean;
        showOtherMonths: boolean;
        startYear: number;
        endYear: number;
    } & {
        [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
        view?: import("../va-date-picker/types").VaDatePickerView | undefined;
        color?: string | undefined;
        onClick?: ((...args: any[]) => any) | undefined;
        modelValue?: VaDatePickerModelValue;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        "onHover:day"?: ((...args: any[]) => any) | undefined;
        "onClick:day"?: ((...args: any[]) => any) | undefined;
        allowedDays?: ((date: Date) => boolean) | undefined;
        weekends?: ((d: Date) => boolean) | undefined;
        "onUpdate:view"?: ((...args: any[]) => any) | undefined;
        "onHover:month"?: ((...args: any[]) => any) | undefined;
        "onClick:month"?: ((...args: any[]) => any) | undefined;
        allowedMonths?: ((date: Date) => boolean) | undefined;
        "onHover:year"?: ((...args: any[]) => any) | undefined;
        "onClick:year"?: ((...args: any[]) => any) | undefined;
        allowedYears?: ((date: Date) => boolean) | undefined;
        weekendsColor?: string | undefined;
    }>;
    filterSlots: import("vue").ComputedRef<string[]>;
    canBeCleared: import("vue").ComputedRef<boolean>;
    clearIconProps: import("vue").ComputedRef<{
        name: string;
        color: string;
        size: string;
    }>;
    iconProps: import("vue").ComputedRef<{
        name: string;
        color: string;
        size: string;
        class: string;
    }>;
    reset: () => void;
    focus: () => void;
    blur: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    clearValue?: unknown;
    resetOnClose?: unknown;
    isOpen?: unknown;
    format?: unknown;
    formatDate?: unknown;
    parse?: unknown;
    parseDate?: unknown;
    parseValue?: unknown;
    delimiter?: unknown;
    rangeDelimiter?: unknown;
    manualInput?: unknown;
    color?: unknown;
    leftIcon?: unknown;
    icon?: unknown;
    modelValue?: unknown;
    monthNames?: unknown;
    weekdayNames?: unknown;
    view?: unknown;
    type?: unknown;
    readonly?: unknown;
    disabled?: unknown;
    weekendsColor?: unknown;
    allowedYears?: unknown;
    highlightToday?: unknown;
    mode?: unknown;
    startYear?: unknown;
    endYear?: unknown;
    "onUpdate:modelValue"?: unknown;
    "onHover:year"?: unknown;
    "onClick:year"?: unknown;
    allowedMonths?: unknown;
    "onHover:month"?: unknown;
    "onClick:month"?: unknown;
    firstWeekday?: unknown;
    hideWeekDays?: unknown;
    showOtherMonths?: unknown;
    allowedDays?: unknown;
    weekends?: unknown;
    highlightWeekend?: unknown;
    otherMonth?: unknown;
    today?: unknown;
    inRange?: unknown;
    selected?: unknown;
    weekend?: unknown;
    hidden?: unknown;
    focused?: unknown;
    onClick?: unknown;
    "onHover:day"?: unknown;
    "onClick:day"?: unknown;
    "onUpdate:view"?: unknown;
    stateful?: unknown;
    placeholder?: unknown;
    tabindex?: unknown;
    label?: unknown;
    loading?: unknown;
    inputClass?: unknown;
    pattern?: unknown;
    inputmode?: unknown;
    outline?: unknown;
    bordered?: unknown;
    requiredMark?: unknown;
    autosize?: unknown;
    minRows?: unknown;
    maxRows?: unknown;
    mask?: unknown;
    returnRaw?: unknown;
    clearable?: unknown;
    clearableIcon?: unknown;
    error?: unknown;
    errorMessages?: unknown;
    errorCount?: unknown;
    rules?: unknown;
    success?: unknown;
    messages?: unknown;
    immediateValidation?: unknown;
} & {
    type: import("../va-date-picker/types").VaDatePickerType;
    color: string;
    mask: string | Record<string, any>;
    outline: boolean;
    loading: boolean;
    hidden: boolean;
    label: string;
    disabled: boolean;
    readonly: boolean;
    success: boolean;
    mode: import("../va-date-picker/types").VaDatePickerMode;
    icon: string;
    placeholder: string;
    tabindex: number;
    inputmode: string;
    selected: boolean;
    autosize: boolean;
    stateful: boolean;
    rules: ((v: unknown) => any)[];
    leftIcon: boolean;
    bordered: boolean;
    messages: string | string[];
    focused: boolean;
    requiredMark: boolean;
    errorCount: string | number;
    immediateValidation: boolean;
    minRows: number;
    inputClass: string;
    returnRaw: boolean;
    clearable: boolean;
    clearableIcon: string;
    otherMonth: boolean;
    today: boolean;
    inRange: boolean;
    weekend: boolean;
    highlightWeekend: boolean;
    highlightToday: boolean;
    monthNames: string[];
    weekdayNames: string[];
    firstWeekday: "Monday" | "Sunday";
    hideWeekDays: boolean;
    showOtherMonths: boolean;
    startYear: number;
    endYear: number;
    resetOnClose: boolean;
    formatDate: (date: Date) => string;
    delimiter: string;
    rangeDelimiter: string;
    manualInput: boolean;
} & {
    error?: boolean | undefined;
    view?: import("../va-date-picker/types").VaDatePickerView | undefined;
    pattern?: string | undefined;
    onClick?: ((...args: any[]) => any) | undefined;
    format?: ((date: VaDatePickerModelValue | undefined) => string) | undefined;
    modelValue?: VaDatePickerModelValue;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    errorMessages?: string | string[] | undefined;
    maxRows?: number | undefined;
    clearValue?: VaDatePickerModelValue;
    "onHover:day"?: ((...args: any[]) => any) | undefined;
    "onClick:day"?: ((...args: any[]) => any) | undefined;
    allowedDays?: ((date: Date) => boolean) | undefined;
    weekends?: ((d: Date) => boolean) | undefined;
    "onUpdate:view"?: ((...args: any[]) => any) | undefined;
    "onHover:month"?: ((...args: any[]) => any) | undefined;
    "onClick:month"?: ((...args: any[]) => any) | undefined;
    allowedMonths?: ((date: Date) => boolean) | undefined;
    "onHover:year"?: ((...args: any[]) => any) | undefined;
    "onClick:year"?: ((...args: any[]) => any) | undefined;
    allowedYears?: ((date: Date) => boolean) | undefined;
    weekendsColor?: string | undefined;
    isOpen?: boolean | undefined;
    parse?: ((input: string) => VaDatePickerModelValue) | undefined;
    parseDate?: ((input: string) => Date) | undefined;
    parseValue?: ((date: import("./types").VaDateInputModelValue) => VaDatePickerModelValue) | undefined;
}> & {
    [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
}, {
    type: import("../va-date-picker/types").VaDatePickerType;
    error: boolean | undefined;
    view: import("../va-date-picker/types").VaDatePickerView | undefined;
    color: string;
    mask: string | Record<string, any>;
    outline: boolean;
    loading: boolean;
    hidden: boolean;
    label: string;
    pattern: string | undefined;
    disabled: boolean;
    readonly: boolean;
    success: boolean;
    mode: import("../va-date-picker/types").VaDatePickerMode;
    icon: string;
    onClick: ((...args: any[]) => any) | undefined;
    placeholder: string;
    tabindex: number;
    inputmode: string;
    selected: boolean;
    autosize: boolean;
    modelValue: VaDatePickerModelValue;
    stateful: boolean;
    rules: ((v: unknown) => any)[];
    leftIcon: boolean;
    "onUpdate:modelValue": ((...args: any[]) => any) | undefined;
    bordered: boolean;
    errorMessages: string | string[] | undefined;
    messages: string | string[];
    focused: boolean;
    requiredMark: boolean;
    errorCount: string | number;
    immediateValidation: boolean;
    minRows: number;
    maxRows: number | undefined;
    inputClass: string;
    returnRaw: boolean;
    clearable: boolean;
    clearableIcon: string;
    clearValue: VaDatePickerModelValue;
    otherMonth: boolean;
    today: boolean;
    inRange: boolean;
    weekend: boolean;
    highlightWeekend: boolean;
    highlightToday: boolean;
    "onHover:day": ((...args: any[]) => any) | undefined;
    "onClick:day": ((...args: any[]) => any) | undefined;
    monthNames: string[];
    weekdayNames: string[];
    firstWeekday: "Monday" | "Sunday";
    hideWeekDays: boolean;
    showOtherMonths: boolean;
    allowedDays: ((date: Date) => boolean) | undefined;
    weekends: ((d: Date) => boolean) | undefined;
    "onUpdate:view": ((...args: any[]) => any) | undefined;
    "onHover:month": ((...args: any[]) => any) | undefined;
    "onClick:month": ((...args: any[]) => any) | undefined;
    allowedMonths: ((date: Date) => boolean) | undefined;
    "onHover:year": ((...args: any[]) => any) | undefined;
    "onClick:year": ((...args: any[]) => any) | undefined;
    allowedYears: ((date: Date) => boolean) | undefined;
    startYear: number;
    endYear: number;
    weekendsColor: string | undefined;
    resetOnClose: boolean;
    isOpen: boolean | undefined;
    formatDate: (date: Date) => string;
    delimiter: string;
    rangeDelimiter: string;
    manualInput: boolean;
}>;
export default _default;
