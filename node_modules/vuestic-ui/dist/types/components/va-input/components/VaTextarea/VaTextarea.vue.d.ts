import { CSSProperties } from 'vue';
declare const _default: import("vue").DefineComponent<{
    modelValue: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    placeholder: {
        type: StringConstructor;
    };
    autosize: {
        type: BooleanConstructor;
        default: boolean;
    };
    minRows: {
        type: NumberConstructor;
        default: number;
        validator: (val: number) => boolean;
    };
    maxRows: {
        type: NumberConstructor;
        validator: (val: number) => boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    textarea: import("vue").Ref<HTMLTextAreaElement | undefined>;
    computedStyle: import("vue").ComputedRef<CSSProperties>;
    listeners: Record<string, any>;
    computedProps: import("vue").ComputedRef<{
        disabled: boolean;
        readonly: boolean;
        placeholder: string | undefined;
    }>;
}, unknown, {}, {
    focus(): void;
    blur(): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    modelValue?: unknown;
    placeholder?: unknown;
    autosize?: unknown;
    minRows?: unknown;
    maxRows?: unknown;
    disabled?: unknown;
    readonly?: unknown;
} & {
    disabled: boolean;
    readonly: boolean;
    autosize: boolean;
    modelValue: string | number;
    minRows: number;
} & {
    placeholder?: string | undefined;
    maxRows?: number | undefined;
}> & {
    [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
}, {
    disabled: boolean;
    readonly: boolean;
    autosize: boolean;
    modelValue: string | number;
    minRows: number;
}>;
export default _default;
