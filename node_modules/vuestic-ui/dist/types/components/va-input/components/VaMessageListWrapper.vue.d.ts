declare const _default: import("vue").DefineComponent<{
    modelValue: {
        required: boolean;
    };
    error: {
        type: BooleanConstructor;
        default: undefined;
    };
    errorMessages: {
        type: import("vue").PropType<string | string[]>;
        default: undefined;
    };
    errorCount: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    rules: {
        type: import("vue").PropType<((v: unknown) => any)[]>;
        default: () => never[];
    };
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    messages: {
        type: import("vue").PropType<string | string[]>;
        default: () => never[];
    };
    immediateValidation: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    messagesColor: import("vue").ComputedRef<"" | "success" | "danger">;
    messagesComputed: import("vue").ComputedRef<string | string[] | undefined>;
    errorLimit: import("vue").ComputedRef<number>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    modelValue?: unknown;
    error?: unknown;
    errorMessages?: unknown;
    errorCount?: unknown;
    rules?: unknown;
    success?: unknown;
    messages?: unknown;
    immediateValidation?: unknown;
} & {
    success: boolean;
    rules: ((v: unknown) => any)[];
    messages: string | string[];
    errorCount: string | number;
    immediateValidation: boolean;
} & {
    error?: boolean | undefined;
    modelValue?: unknown;
    errorMessages?: string | string[] | undefined;
}>, {
    error: boolean;
    success: boolean;
    rules: ((v: unknown) => any)[];
    errorMessages: string | string[];
    messages: string | string[];
    errorCount: string | number;
    immediateValidation: boolean;
}>;
export default _default;
