declare const _default: import("vue").DefineComponent<{
    label: {
        type: StringConstructor;
        default: string;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    outline: {
        type: BooleanConstructor;
        default: boolean;
    };
    bordered: {
        type: BooleanConstructor;
        default: boolean;
    };
    focused: {
        type: BooleanConstructor;
        default: boolean;
    };
    error: {
        type: BooleanConstructor;
        default: boolean;
    };
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    requiredMark: {
        type: BooleanConstructor;
        default: boolean;
    };
    modelValue: {
        required: boolean;
    };
    errorMessages: {
        type: import("vue").PropType<string | string[]>;
        default: undefined;
    };
    errorCount: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    rules: {
        type: import("vue").PropType<((v: unknown) => any)[]>;
        default: () => never[];
    };
    messages: {
        type: import("vue").PropType<string | string[]>;
        default: () => never[];
    };
    immediateValidation: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    wrapperClass: import("vue").ComputedRef<string[]>;
    colorComputed: import("vue").ComputedRef<string>;
    borderColorComputed: import("vue").ComputedRef<string | undefined>;
    messagesColor: import("vue").ComputedRef<"" | "success" | "danger">;
    messagesComputed: import("vue").ComputedRef<string | string[] | undefined>;
    hasMessages: import("vue").ComputedRef<boolean>;
    errorLimit: import("vue").ComputedRef<number>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click" | "click-prepend" | "click-append" | "click-prepend-inner" | "click-append-inner" | "click-icon")[], "click" | "click-prepend" | "click-append" | "click-prepend-inner" | "click-append-inner" | "click-icon", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    label?: unknown;
    color?: unknown;
    outline?: unknown;
    bordered?: unknown;
    focused?: unknown;
    error?: unknown;
    success?: unknown;
    requiredMark?: unknown;
    modelValue?: unknown;
    errorMessages?: unknown;
    errorCount?: unknown;
    rules?: unknown;
    messages?: unknown;
    immediateValidation?: unknown;
    disabled?: unknown;
    readonly?: unknown;
} & {
    error: boolean;
    color: string;
    outline: boolean;
    label: string;
    disabled: boolean;
    readonly: boolean;
    success: boolean;
    rules: ((v: unknown) => any)[];
    bordered: boolean;
    messages: string | string[];
    focused: boolean;
    requiredMark: boolean;
    errorCount: string | number;
    immediateValidation: boolean;
} & {
    modelValue?: unknown;
    errorMessages?: string | string[] | undefined;
}> & {
    onClick?: ((...args: any[]) => any) | undefined;
    "onClick-prepend"?: ((...args: any[]) => any) | undefined;
    "onClick-append"?: ((...args: any[]) => any) | undefined;
    "onClick-prepend-inner"?: ((...args: any[]) => any) | undefined;
    "onClick-append-inner"?: ((...args: any[]) => any) | undefined;
    "onClick-icon"?: ((...args: any[]) => any) | undefined;
}, {
    error: boolean;
    color: string;
    outline: boolean;
    label: string;
    disabled: boolean;
    readonly: boolean;
    success: boolean;
    rules: ((v: unknown) => any)[];
    bordered: boolean;
    errorMessages: string | string[];
    messages: string | string[];
    focused: boolean;
    requiredMark: boolean;
    errorCount: string | number;
    immediateValidation: boolean;
}>;
export default _default;
