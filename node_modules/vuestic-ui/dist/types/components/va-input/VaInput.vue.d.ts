import { InputHTMLAttributes, PropType } from 'vue';
declare const _default: import("vue").DefineComponent<{
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    tabindex: {
        type: NumberConstructor;
        default: number;
    };
    modelValue: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    label: {
        type: StringConstructor;
        default: string;
    };
    type: {
        type: PropType<"textarea" | "text">;
        default: string;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    inputClass: {
        type: StringConstructor;
        default: string;
    };
    pattern: {
        type: StringConstructor;
    };
    inputmode: {
        type: StringConstructor;
        default: string;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    outline: {
        type: BooleanConstructor;
        default: boolean;
    };
    bordered: {
        type: BooleanConstructor;
        default: boolean;
    };
    requiredMark: {
        type: BooleanConstructor;
        default: boolean;
    };
    autosize: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    minRows: {
        type: PropType<number>;
        required: true;
        default: number;
    };
    maxRows: {
        type: PropType<number | undefined>;
        required: false;
        default: undefined;
    };
    disabled: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    readonly: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    mask: {
        type: (ObjectConstructor | StringConstructor)[];
        default: string;
    };
    returnRaw: {
        type: BooleanConstructor;
        default: boolean;
    };
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    clearableIcon: {
        type: StringConstructor;
        default: string;
    };
    clearValue: {
        type: StringConstructor;
        default: string;
    };
    error: {
        type: BooleanConstructor;
        default: undefined;
    };
    errorMessages: {
        type: PropType<string | string[]>;
        default: undefined;
    };
    errorCount: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    rules: {
        type: PropType<((v: unknown) => any)[]>;
        default: () => never[];
    };
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    messages: {
        type: PropType<string | string[]>;
        default: () => never[];
    };
    immediateValidation: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    input: import("vue").Ref<HTMLInputElement | import("vue").DefineComponent<{
        modelValue: {
            type: (StringConstructor | NumberConstructor)[];
            default: string;
        };
        placeholder: {
            type: StringConstructor;
        };
        autosize: {
            type: BooleanConstructor;
            default: boolean;
        };
        minRows: {
            type: NumberConstructor;
            default: number;
            validator: (val: number) => boolean;
        };
        maxRows: {
            type: NumberConstructor;
            validator: (val: number) => boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
    }, {
        textarea: import("vue").Ref<HTMLTextAreaElement | undefined>;
        computedStyle: import("vue").ComputedRef<import("vue").CSSProperties>;
        listeners: Record<string, any>;
        computedProps: import("vue").ComputedRef<{
            disabled: boolean;
            readonly: boolean;
            placeholder: string | undefined;
        }>;
    }, unknown, {}, {
        focus(): void;
        blur(): void;
    }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        modelValue?: unknown;
        placeholder?: unknown;
        autosize?: unknown;
        minRows?: unknown;
        maxRows?: unknown;
        disabled?: unknown;
        readonly?: unknown;
    } & {
        disabled: boolean;
        readonly: boolean;
        autosize: boolean;
        modelValue: string | number;
        minRows: number;
    } & {
        placeholder?: string | undefined;
        maxRows?: number | undefined;
    }> & {
        [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
    }, {
        disabled: boolean;
        readonly: boolean;
        autosize: boolean;
        modelValue: string | number;
        minRows: number;
    }> | undefined>;
    inputEvents: {
        onFocus: (e: Event) => void;
        onBlur: (e: Event) => void;
        onInput: (event: Event) => void;
    };
    computedChildAttributes: import("vue").ComputedRef<InputHTMLAttributes>;
    computedInputAttributes: import("vue").ComputedRef<InputHTMLAttributes>;
    textareaProps: import("vue").ComputedRef<{
        [x: string & `on${string}`]: unknown;
        modelValue?: unknown;
        placeholder?: unknown;
        autosize?: unknown;
        minRows?: unknown;
        maxRows?: unknown;
        disabled?: unknown;
        readonly?: unknown;
    } & {
        disabled: boolean;
        readonly: boolean;
        autosize: boolean;
        modelValue: string | number;
        minRows: number;
    } & {
        [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
        placeholder?: string | undefined;
        maxRows?: number | undefined;
    }>;
    computedValue: import("vue").ComputedRef<string | number>;
    computedError: import("vue").WritableComputedRef<boolean>;
    computedErrorMessages: import("vue").WritableComputedRef<string | string[]>;
    isFocused: import("vue").Ref<boolean>;
    canBeCleared: import("vue").ComputedRef<boolean>;
    clearIconProps: import("vue").ComputedRef<{
        name: string;
        color: string;
        size: string;
    }>;
    fieldListeners: Record<string, any>;
    reset: () => void;
    filterSlots: import("vue").ComputedRef<string[]>;
}, unknown, {}, {
    focus(): void;
    blur(): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    placeholder?: unknown;
    tabindex?: unknown;
    modelValue?: unknown;
    label?: unknown;
    type?: unknown;
    loading?: unknown;
    inputClass?: unknown;
    pattern?: unknown;
    inputmode?: unknown;
    color?: unknown;
    outline?: unknown;
    bordered?: unknown;
    requiredMark?: unknown;
    autosize?: unknown;
    minRows?: unknown;
    maxRows?: unknown;
    disabled?: unknown;
    readonly?: unknown;
    mask?: unknown;
    returnRaw?: unknown;
    clearable?: unknown;
    clearableIcon?: unknown;
    clearValue?: unknown;
    error?: unknown;
    errorMessages?: unknown;
    errorCount?: unknown;
    rules?: unknown;
    success?: unknown;
    messages?: unknown;
    immediateValidation?: unknown;
} & {
    type: "textarea" | "text";
    color: string;
    mask: string | Record<string, any>;
    outline: boolean;
    loading: boolean;
    label: string;
    disabled: boolean;
    readonly: boolean;
    success: boolean;
    placeholder: string;
    tabindex: number;
    inputmode: string;
    autosize: boolean;
    modelValue: string | number;
    rules: ((v: unknown) => any)[];
    bordered: boolean;
    messages: string | string[];
    requiredMark: boolean;
    errorCount: string | number;
    immediateValidation: boolean;
    minRows: number;
    inputClass: string;
    returnRaw: boolean;
    clearable: boolean;
    clearableIcon: string;
    clearValue: string;
} & {
    error?: boolean | undefined;
    pattern?: string | undefined;
    errorMessages?: string | string[] | undefined;
    maxRows?: number | undefined;
}> & {
    [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
}, {
    type: "textarea" | "text";
    error: boolean;
    color: string;
    mask: string | Record<string, any>;
    outline: boolean;
    loading: boolean;
    label: string;
    disabled: boolean;
    readonly: boolean;
    success: boolean;
    placeholder: string;
    tabindex: number;
    inputmode: string;
    autosize: boolean;
    modelValue: string | number;
    rules: ((v: unknown) => any)[];
    bordered: boolean;
    errorMessages: string | string[];
    messages: string | string[];
    requiredMark: boolean;
    errorCount: string | number;
    immediateValidation: boolean;
    minRows: number;
    maxRows: number | undefined;
    inputClass: string;
    returnRaw: boolean;
    clearable: boolean;
    clearableIcon: string;
    clearValue: string;
}>;
export default _default;
