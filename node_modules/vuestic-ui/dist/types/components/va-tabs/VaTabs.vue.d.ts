import { Ref } from 'vue';
import { TabComponent } from './types';
declare const _default: import("vue").DefineComponent<{
    modelValue: {
        type: (StringConstructor | NumberConstructor)[];
        default: null;
    };
    left: {
        type: BooleanConstructor;
        default: boolean;
    };
    right: {
        type: BooleanConstructor;
        default: boolean;
    };
    center: {
        type: BooleanConstructor;
        default: boolean;
    };
    grow: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideSlider: {
        type: BooleanConstructor;
        default: boolean;
    };
    vertical: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    prevIcon: {
        type: StringConstructor;
        default: string;
    };
    nextIcon: {
        type: StringConstructor;
        default: string;
    };
    stateful: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
}, {
    wrapper: Ref<HTMLElement | undefined>;
    container: Ref<HTMLElement | undefined>;
    tabs: Ref<HTMLElement | undefined>;
    tabsList: Ref<TabComponent[]>;
    sliderHeight: Ref<number | null>;
    sliderWidth: Ref<number | null>;
    sliderOffsetX: Ref<number>;
    sliderOffsetY: Ref<number>;
    showPagination: Ref<boolean>;
    tabsContentOffset: Ref<number>;
    resizeObserver: Ref<ResizeObserver | undefined>;
    startingXPoint: Ref<number>;
    animationIncluded: Ref<boolean>;
    colorComputed: import("vue").ComputedRef<string>;
    tabConfig: {
        VaTab: {
            color: string;
        };
    };
    computedClass: import("vue").ComputedRef<{
        'va-tabs__container--left': boolean;
        'va-tabs__container--right': boolean;
        'va-tabs__container--center': boolean;
        'va-tabs__container--grow': boolean;
        'va-tabs__container--disabled': boolean;
    }>;
    computedTabsClass: import("vue").ComputedRef<{
        'va-tabs--vertical': boolean;
    }>;
    tabSelected: Ref<string | number | null>;
    sliderStyles: import("vue").ComputedRef<{
        display: string;
        backgroundColor?: undefined;
        height?: undefined;
        width?: undefined;
        transform?: undefined;
        transition?: undefined;
    } | {
        backgroundColor: string;
        height: string;
        width: string;
        transform: string;
        transition: string;
        display?: undefined;
    }>;
    paginationControlledStyles: import("vue").ComputedRef<{
        transform: string;
        transition?: undefined;
    } | {
        transform: string;
        transition: string;
    }>;
    disablePaginationLeft: import("vue").ComputedRef<boolean>;
    disablePaginationRight: import("vue").ComputedRef<boolean>;
    resetSliderSizes: () => void;
    moveToTab: (tab: TabComponent) => void;
    updateStartingXPoint: () => void;
    updateTabsState: () => void;
    updatePagination: () => void;
    movePaginationLeft: () => void;
    movePaginationRight: () => void;
    updateSlider: (tab: TabComponent) => void;
    includeAnimation: () => void;
    redrawTabs: () => void;
    selectTab: (tab: TabComponent) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "click:next" | "click:prev")[], "update:modelValue" | "click:next" | "click:prev", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    modelValue?: unknown;
    left?: unknown;
    right?: unknown;
    center?: unknown;
    grow?: unknown;
    disabled?: unknown;
    hideSlider?: unknown;
    vertical?: unknown;
    color?: unknown;
    prevIcon?: unknown;
    nextIcon?: unknown;
    stateful?: unknown;
} & {
    center: boolean;
    left: boolean;
    color: string;
    right: boolean;
    disabled: boolean;
    vertical: boolean;
    modelValue: string | number;
    stateful: boolean;
    grow: boolean;
    hideSlider: boolean;
    prevIcon: string;
    nextIcon: string;
} & {}> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    "onClick:next"?: ((...args: any[]) => any) | undefined;
    "onClick:prev"?: ((...args: any[]) => any) | undefined;
}, {
    center: boolean;
    left: boolean;
    color: string;
    right: boolean;
    disabled: boolean;
    vertical: boolean;
    modelValue: string | number;
    stateful: boolean;
    grow: boolean;
    hideSlider: boolean;
    prevIcon: string;
    nextIcon: string;
}>;
export default _default;
