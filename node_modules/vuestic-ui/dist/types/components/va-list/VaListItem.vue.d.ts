import { PropType } from 'vue';
declare const _default: import("vue").DefineComponent<{
    tag: {
        type: PropType<string>;
        default: string;
    };
    disabled: {
        type: PropType<boolean>;
        default: boolean;
    };
    to: {
        type: PropType<string | Record<string, unknown>>;
        default: null;
    };
    replace: {
        type: PropType<boolean>;
        default: boolean;
    };
    append: {
        type: PropType<boolean>;
        default: boolean;
    };
    exact: {
        type: PropType<boolean>;
        default: boolean;
    };
    activeClass: {
        type: PropType<string>;
        default: string;
    };
    exactActiveClass: {
        type: PropType<string>;
        default: string;
    };
    href: {
        type: PropType<string>;
        default: string;
    };
    target: {
        type: PropType<string>;
        default: string;
    };
}, {
    keyboardFocusListeners: {
        mousedown: () => void;
        focus: () => void;
        blur: () => void;
    };
    hasKeyboardFocus: import("vue").Ref<boolean>;
    indexComputed: import("vue").ComputedRef<-1 | 0>;
    computedClass: import("vue").ComputedRef<{
        'va-list-item--disabled': boolean;
    }>;
    computedStyle: import("vue").ComputedRef<{
        outline: string;
    }>;
    hasRouterLinkParams: import("vue").ComputedRef<boolean>;
    tagComputed: import("vue").ComputedRef<string>;
    isActiveRouterLink: import("vue").ComputedRef<boolean>;
    hrefComputed: import("vue").ComputedRef<any>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click" | "focus")[], "click" | "focus", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    tag?: unknown;
    disabled?: unknown;
    to?: unknown;
    replace?: unknown;
    append?: unknown;
    exact?: unknown;
    activeClass?: unknown;
    exactActiveClass?: unknown;
    href?: unknown;
    target?: unknown;
} & {
    replace: boolean;
    exact: boolean;
    target: string;
    append: boolean;
    disabled: boolean;
    tag: string;
    href: string;
    to: string | Record<string, unknown>;
    activeClass: string;
    exactActiveClass: string;
} & {}> & {
    onFocus?: ((...args: any[]) => any) | undefined;
    onClick?: ((...args: any[]) => any) | undefined;
}, {
    replace: boolean;
    exact: boolean;
    target: string;
    append: boolean;
    disabled: boolean;
    tag: string;
    href: string;
    to: string | Record<string, unknown>;
    activeClass: string;
    exactActiveClass: string;
}>;
export default _default;
