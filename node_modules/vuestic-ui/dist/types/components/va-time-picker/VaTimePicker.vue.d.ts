import { PropType } from 'vue';
declare const _default: import("vue").DefineComponent<{
    modelValue: {
        type: DateConstructor;
        required: false;
    };
    ampm: {
        type: BooleanConstructor;
        default: boolean;
    };
    hidePeriodSwitch: {
        type: BooleanConstructor;
        default: boolean;
    };
    periodUpdatesModelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    view: {
        type: PropType<"hours" | "minutes" | "seconds">;
        default: string;
    };
    hoursFilter: {
        type: PropType<(h: number) => boolean>;
    };
    minutesFilter: {
        type: PropType<(h: number) => boolean>;
    };
    secondsFilter: {
        type: PropType<(h: number) => boolean>;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    stateful: {
        type: PropType<boolean>;
        default: boolean;
    };
}, {
    columns: import("vue").ComputedRef<({
        items: number[];
        activeItem: import("vue").WritableComputedRef<number>;
    } | {
        items: string[];
        activeItem: import("vue").WritableComputedRef<number>;
    })[]>;
    computedClass: import("vue").ComputedRef<Record<"va-time-picker--disabled" | "va-time-picker--readonly", boolean>>;
    isPM: import("vue").Ref<boolean>;
    pickers: import("vue").Ref<HTMLElement[]>;
    setItemRef: (el: any) => void;
    focusNext: () => void;
    focusPrev: () => void;
    activeColumnIndex: import("vue").Ref<number | undefined>;
    focus: (idx?: number) => void;
    blur: (idx?: number | undefined) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    modelValue?: unknown;
    ampm?: unknown;
    hidePeriodSwitch?: unknown;
    periodUpdatesModelValue?: unknown;
    view?: unknown;
    hoursFilter?: unknown;
    minutesFilter?: unknown;
    secondsFilter?: unknown;
    disabled?: unknown;
    readonly?: unknown;
    stateful?: unknown;
} & {
    view: "hours" | "minutes" | "seconds";
    disabled: boolean;
    readonly: boolean;
    stateful: boolean;
    ampm: boolean;
    hidePeriodSwitch: boolean;
    periodUpdatesModelValue: boolean;
} & {
    modelValue?: Date | undefined;
    hoursFilter?: ((h: number) => boolean) | undefined;
    minutesFilter?: ((h: number) => boolean) | undefined;
    secondsFilter?: ((h: number) => boolean) | undefined;
}> & {
    [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
}, {
    view: "hours" | "minutes" | "seconds";
    disabled: boolean;
    readonly: boolean;
    stateful: boolean;
    ampm: boolean;
    hidePeriodSwitch: boolean;
    periodUpdatesModelValue: boolean;
}>;
export default _default;
