import { PropType, Ref } from 'vue';
declare type Target = HTMLElement | Window;
declare const _default: import("vue").DefineComponent<{
    offsetTop: {
        type: PropType<number>;
        default: undefined;
    };
    offsetBottom: {
        type: PropType<number>;
        default: undefined;
    };
    target: {
        type: PropType<Target | (() => Target)>;
        default: () => Window | undefined;
    };
}, {
    computedClass: import("vue").ComputedRef<{
        'va-affix--affixed': import("vue").ComputedRef<boolean>;
    }[]>;
    computedStyle: import("vue").ComputedRef<{
        top: string | undefined;
        bottom: string | undefined;
        width: string;
    }>;
    isAffixed: import("vue").ComputedRef<boolean>;
    element: Ref<HTMLElement | null>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "change"[], "change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    offsetTop?: unknown;
    offsetBottom?: unknown;
    target?: unknown;
} & {
    target: Target | (() => Target);
} & {
    offsetTop?: number | undefined;
    offsetBottom?: number | undefined;
}> & {
    onChange?: ((...args: any[]) => any) | undefined;
}, {
    target: Target | (() => Target);
    offsetTop: number;
    offsetBottom: number;
}>;
export default _default;
