declare const _default: import("vue").DefineComponent<{
    color: {
        type: import("vue").PropType<string>;
        default: string;
    };
    textColor: {
        type: import("vue").PropType<string | undefined>;
        default: undefined;
    };
    tag: {
        type: import("vue").PropType<string>;
        default: string;
    };
    outline: {
        type: import("vue").PropType<boolean | undefined>;
        default: undefined;
    };
    gradient: {
        type: import("vue").PropType<boolean | undefined>;
        default: undefined;
    };
    flat: {
        type: import("vue").PropType<boolean | undefined>;
        default: undefined;
    };
    type: {
        type: import("vue").PropType<string>;
        default: string;
    };
    disabled: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    block: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    rounded: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    round: {
        type: import("vue").PropType<boolean | undefined>;
        default: undefined;
    };
    spaceBetweenItems: {
        type: import("vue").PropType<boolean | undefined>;
        default: undefined;
    };
    icon: {
        type: import("vue").PropType<string | undefined>;
        default: undefined;
    };
    iconRight: {
        type: import("vue").PropType<string | undefined>;
        default: undefined;
    };
    size: {
        type: import("vue").PropType<string>;
        default: string;
        validator: (value: string) => boolean;
    };
    to: {
        type: import("vue").PropType<string | Record<string, unknown>>;
        default: null;
    };
    replace: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    append: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    exact: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    activeClass: {
        type: import("vue").PropType<string>;
        default: string;
    };
    exactActiveClass: {
        type: import("vue").PropType<string>;
        default: string;
    };
    href: {
        type: import("vue").PropType<string>;
        default: string;
    };
    target: {
        type: import("vue").PropType<string>;
        default: string;
    };
    loading: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    sizesConfig: {
        type: import("vue").PropType<Record<string, any>>;
        default: () => import("../../services/global-config/types").SizeConfig;
    };
    fontSizesConfig: {
        type: import("vue").PropType<Record<string, any>>;
        default: () => import("../../services/global-config/types").SizeConfig;
    };
}, {
    button: import("vue").Ref<HTMLElement | null>;
    tagComputed: import("vue").ComputedRef<string>;
    hrefComputed: import("vue").ComputedRef<any>;
    computedClass: import("vue").ComputedRef<{
        'va-button--default': boolean;
        'va-button--flat': boolean | undefined;
        'va-button--outline': boolean | undefined;
        'va-button--disabled': boolean;
        'va-button--hover': boolean;
        'va-button--focus': boolean;
        'va-button--large': boolean;
        'va-button--small': boolean;
        'va-button--normal': boolean;
        'va-button--loading': boolean;
        'va-button--block': boolean;
        'va-button--square': boolean;
        'va-button--round': boolean;
        'va-button--no-label': boolean;
        'va-button--space-between-items': boolean | undefined;
    }>;
    computedStyle: import("vue").ComputedRef<Partial<CSSStyleDeclaration>>;
    computedType: import("vue").ComputedRef<string | undefined>;
    textColorComputed: import("vue").ComputedRef<string>;
    loaderSize: import("vue").ComputedRef<string>;
    focusState: import("vue").Ref<boolean>;
    hoverState: import("vue").Ref<boolean>;
}, unknown, {}, {
    focus(): void;
    blur(): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    color?: unknown;
    textColor?: unknown;
    tag?: unknown;
    outline?: unknown;
    gradient?: unknown;
    flat?: unknown;
    type?: unknown;
    disabled?: unknown;
    block?: unknown;
    rounded?: unknown;
    round?: unknown;
    spaceBetweenItems?: unknown;
    icon?: unknown;
    iconRight?: unknown;
    size?: unknown;
    to?: unknown;
    replace?: unknown;
    append?: unknown;
    exact?: unknown;
    activeClass?: unknown;
    exactActiveClass?: unknown;
    href?: unknown;
    target?: unknown;
    loading?: unknown;
    sizesConfig?: unknown;
    fontSizesConfig?: unknown;
} & {
    replace: boolean;
    type: string;
    exact: boolean;
    block: boolean;
    color: string;
    loading: boolean;
    target: string;
    append: boolean;
    disabled: boolean;
    size: string;
    tag: string;
    href: string;
    to: string | Record<string, unknown>;
    sizesConfig: Record<string, any>;
    fontSizesConfig: Record<string, any>;
    activeClass: string;
    exactActiveClass: string;
    rounded: boolean;
} & {
    flat?: boolean | undefined;
    outline?: boolean | undefined;
    round?: boolean | undefined;
    icon?: string | undefined;
    textColor?: string | undefined;
    gradient?: boolean | undefined;
    spaceBetweenItems?: boolean | undefined;
    iconRight?: string | undefined;
}>, {
    replace: boolean;
    flat: boolean | undefined;
    type: string;
    exact: boolean;
    block: boolean;
    color: string;
    outline: boolean | undefined;
    round: boolean | undefined;
    loading: boolean;
    target: string;
    append: boolean;
    disabled: boolean;
    size: string;
    tag: string;
    icon: string | undefined;
    href: string;
    to: string | Record<string, unknown>;
    sizesConfig: Record<string, any>;
    textColor: string | undefined;
    fontSizesConfig: Record<string, any>;
    gradient: boolean | undefined;
    activeClass: string;
    exactActiveClass: string;
    rounded: boolean;
    spaceBetweenItems: boolean | undefined;
    iconRight: string | undefined;
}>;
export default _default;
