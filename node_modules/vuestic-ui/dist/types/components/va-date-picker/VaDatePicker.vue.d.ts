import { PropType } from 'vue';
import { VaDatePickerModelValue, VaDatePickerType, VaDatePickerView } from './types';
declare const _default: import("vue").DefineComponent<{
    modelValue: {
        type: PropType<VaDatePickerModelValue>;
    };
    monthNames: {
        type: PropType<string[]>;
        required: false;
        default: string[];
    };
    weekdayNames: {
        type: PropType<string[]>;
        required: false;
        default: string[];
    };
    view: {
        type: PropType<VaDatePickerView>;
    };
    type: {
        type: PropType<VaDatePickerType>;
        default: string;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: undefined;
    };
    weekendsColor: {
        type: StringConstructor;
        default: undefined;
    };
    allowedYears: {
        type: PropType<((date: Date) => boolean) | undefined>;
        required: false;
        default: undefined;
    };
    highlightToday: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    mode: {
        type: PropType<import("./types").VaDatePickerMode>;
        required: true;
        default: import("./types").VaDatePickerMode;
    };
    startYear: {
        type: PropType<number>;
        required: true;
        default: number;
    };
    endYear: {
        type: PropType<number>;
        required: true;
        default: number;
    };
    "onUpdate:modelValue": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    "onHover:year": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    "onClick:year": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    allowedMonths: {
        type: PropType<((date: Date) => boolean) | undefined>;
        required: false;
        default: undefined;
    };
    "onHover:month": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    "onClick:month": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    firstWeekday: {
        type: PropType<"Monday" | "Sunday">;
        required: true;
        default: "Monday" | "Sunday";
    };
    hideWeekDays: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    showOtherMonths: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    allowedDays: {
        type: PropType<((date: Date) => boolean) | undefined>;
        required: false;
        default: undefined;
    };
    weekends: {
        type: PropType<((d: Date) => boolean) | undefined>;
        required: false;
        default: undefined;
    };
    highlightWeekend: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    otherMonth: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    today: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    inRange: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    selected: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    weekend: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    hidden: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    focused: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    onClick: {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    "onHover:day": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    "onClick:day": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    "onUpdate:view": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    stateful: {
        type: PropType<boolean>;
        default: boolean;
    };
}, {
    dayPickerProps: import("vue").ComputedRef<{
        monthNames?: unknown;
        weekdayNames?: unknown;
        firstWeekday?: unknown;
        hideWeekDays?: unknown;
        view?: unknown;
        modelValue?: unknown;
        mode?: unknown;
        showOtherMonths?: unknown;
        allowedDays?: unknown;
        weekends?: unknown;
        highlightWeekend?: unknown;
        highlightToday?: unknown;
        readonly?: unknown;
        otherMonth?: unknown;
        today?: unknown;
        inRange?: unknown;
        disabled?: unknown;
        selected?: unknown;
        weekend?: unknown;
        hidden?: unknown;
        focused?: unknown;
        onClick?: unknown;
        "onUpdate:modelValue"?: unknown;
        "onHover:day"?: unknown;
        "onClick:day"?: unknown;
    } & {
        view: VaDatePickerView;
        hidden: boolean;
        disabled: boolean;
        readonly: boolean;
        mode: import("./types").VaDatePickerMode;
        selected: boolean;
        focused: boolean;
        otherMonth: boolean;
        today: boolean;
        inRange: boolean;
        weekend: boolean;
        highlightWeekend: boolean;
        highlightToday: boolean;
        monthNames: string[];
        weekdayNames: string[];
        firstWeekday: "Monday" | "Sunday";
        hideWeekDays: boolean;
        showOtherMonths: boolean;
    } & {
        onClick?: ((...args: any[]) => any) | undefined;
        modelValue?: VaDatePickerModelValue;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        "onHover:day"?: ((...args: any[]) => any) | undefined;
        "onClick:day"?: ((...args: any[]) => any) | undefined;
        allowedDays?: ((date: Date) => boolean) | undefined;
        weekends?: ((d: Date) => boolean) | undefined;
    }>;
    headerProps: import("vue").ComputedRef<{
        monthNames?: unknown;
        view?: unknown;
        color?: unknown;
        disabled?: unknown;
        "onUpdate:view"?: unknown;
    } & {
        disabled: boolean;
        monthNames: unknown[];
    } & {
        view?: VaDatePickerView | undefined;
        color?: string | undefined;
        "onUpdate:view"?: ((...args: any[]) => any) | undefined;
    }>;
    monthPickerProps: import("vue").ComputedRef<{
        modelValue?: unknown;
        monthNames?: unknown;
        view?: unknown;
        allowedMonths?: unknown;
        highlightToday?: unknown;
        mode?: unknown;
        readonly?: unknown;
        "onUpdate:modelValue"?: unknown;
        "onHover:month"?: unknown;
        "onClick:month"?: unknown;
    } & {
        view: VaDatePickerView;
        readonly: boolean;
        mode: import("./types").VaDatePickerMode;
        highlightToday: boolean;
        monthNames: string[];
    } & {
        modelValue?: VaDatePickerModelValue;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        "onHover:month"?: ((...args: any[]) => any) | undefined;
        "onClick:month"?: ((...args: any[]) => any) | undefined;
        allowedMonths?: ((date: Date) => boolean) | undefined;
    }>;
    yearPickerProps: import("vue").ComputedRef<{
        modelValue?: unknown;
        allowedYears?: unknown;
        highlightToday?: unknown;
        mode?: unknown;
        view?: unknown;
        startYear?: unknown;
        endYear?: unknown;
        readonly?: unknown;
        "onUpdate:modelValue"?: unknown;
        "onHover:year"?: unknown;
        "onClick:year"?: unknown;
    } & {
        view: VaDatePickerView;
        readonly: boolean;
        mode: import("./types").VaDatePickerMode;
        highlightToday: boolean;
        startYear: number;
        endYear: number;
    } & {
        modelValue?: VaDatePickerModelValue;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        "onHover:year"?: ((...args: any[]) => any) | undefined;
        "onClick:year"?: ((...args: any[]) => any) | undefined;
        allowedYears?: ((date: Date) => boolean) | undefined;
    }>;
    syncView: import("vue").WritableComputedRef<VaDatePickerView>;
    classComputed: import("vue").ComputedRef<{
        'va-date-picker_without-week-days': boolean;
        'va-date-picker_disabled': boolean;
    }>;
    valueComputed: import("vue").WritableComputedRef<VaDatePickerModelValue>;
    onDayModelValueUpdate: (modelValue: VaDatePickerModelValue) => void;
    onMonthClick: (date: Date) => void;
    onMonthModelValueUpdate: (modelValue: VaDatePickerModelValue) => void;
    onYearClick: (date: Date) => void;
    onYearModelValueUpdate: (modelValue: VaDatePickerModelValue) => void;
    colorsStyle: Record<string, any>;
    currentPicker: import("vue").Ref<{
        [x: string]: any;
        setup?: ((this: void, props: Readonly<{}>, ctx: import("vue").SetupContext<any>) => any) | undefined;
        name?: string | undefined;
        template?: string | object | undefined;
        render?: Function | undefined;
        components?: {
            [x: string]: import("vue").FunctionalComponent<any, any> | {
                new (...args: any[]): any;
                __isFragment?: undefined;
                __isTeleport?: undefined;
                __isSuspense?: undefined;
            } | {
                [x: string]: any;
                setup?: ((this: void, props: Readonly<{
                    [x: string]: any;
                }>, ctx: import("vue").SetupContext<any>) => any) | undefined;
                name?: string | undefined;
                template?: string | object | undefined;
                render?: Function | undefined;
                components?: any | undefined;
                directives?: {
                    [x: string]: import("vue").FunctionDirective<any, any> | {
                        created?: import("vue").DirectiveHook<any, null, any> | undefined;
                        beforeMount?: import("vue").DirectiveHook<any, null, any> | undefined;
                        mounted?: import("vue").DirectiveHook<any, null, any> | undefined;
                        beforeUpdate?: import("vue").DirectiveHook<any, import("vue").VNode<any, any, {
                            [key: string]: any;
                        }>, any> | undefined;
                        updated?: import("vue").DirectiveHook<any, import("vue").VNode<any, any, {
                            [key: string]: any;
                        }>, any> | undefined;
                        beforeUnmount?: import("vue").DirectiveHook<any, null, any> | undefined;
                        unmounted?: import("vue").DirectiveHook<any, null, any> | undefined;
                        getSSRProps?: ((binding: import("vue").DirectiveBinding<any>, vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                            [key: string]: any;
                        }>) => {
                            [x: string]: unknown;
                        } | undefined) | undefined;
                        deep?: boolean | undefined;
                    };
                } | undefined;
                inheritAttrs?: boolean | undefined;
                emits?: any;
                expose?: string[] | undefined;
                serverPrefetch?: (() => Promise<any>) | undefined;
                compilerOptions?: {
                    isCustomElement?: ((tag: string) => boolean) | undefined;
                    whitespace?: "preserve" | "condense" | undefined;
                    comments?: boolean | undefined;
                    delimiters?: [string, string] | undefined;
                } | undefined;
                call?: ((this: unknown, ...args: unknown[]) => never) | undefined;
                __isFragment?: undefined;
                __isTeleport?: undefined;
                __isSuspense?: undefined;
                __defaults?: {} | undefined;
                compatConfig?: {
                    GLOBAL_MOUNT?: boolean | "suppress-warning" | undefined;
                    GLOBAL_MOUNT_CONTAINER?: boolean | "suppress-warning" | undefined;
                    GLOBAL_EXTEND?: boolean | "suppress-warning" | undefined;
                    GLOBAL_PROTOTYPE?: boolean | "suppress-warning" | undefined;
                    GLOBAL_SET?: boolean | "suppress-warning" | undefined;
                    GLOBAL_DELETE?: boolean | "suppress-warning" | undefined;
                    GLOBAL_OBSERVABLE?: boolean | "suppress-warning" | undefined;
                    GLOBAL_PRIVATE_UTIL?: boolean | "suppress-warning" | undefined;
                    CONFIG_SILENT?: boolean | "suppress-warning" | undefined;
                    CONFIG_DEVTOOLS?: boolean | "suppress-warning" | undefined;
                    CONFIG_KEY_CODES?: boolean | "suppress-warning" | undefined;
                    CONFIG_PRODUCTION_TIP?: boolean | "suppress-warning" | undefined;
                    CONFIG_IGNORED_ELEMENTS?: boolean | "suppress-warning" | undefined;
                    CONFIG_WHITESPACE?: boolean | "suppress-warning" | undefined;
                    CONFIG_OPTION_MERGE_STRATS?: boolean | "suppress-warning" | undefined;
                    INSTANCE_SET?: boolean | "suppress-warning" | undefined;
                    INSTANCE_DELETE?: boolean | "suppress-warning" | undefined;
                    INSTANCE_DESTROY?: boolean | "suppress-warning" | undefined;
                    INSTANCE_EVENT_EMITTER?: boolean | "suppress-warning" | undefined;
                    INSTANCE_EVENT_HOOKS?: boolean | "suppress-warning" | undefined;
                    INSTANCE_CHILDREN?: boolean | "suppress-warning" | undefined;
                    INSTANCE_LISTENERS?: boolean | "suppress-warning" | undefined;
                    INSTANCE_SCOPED_SLOTS?: boolean | "suppress-warning" | undefined;
                    INSTANCE_ATTRS_CLASS_STYLE?: boolean | "suppress-warning" | undefined;
                    OPTIONS_DATA_FN?: boolean | "suppress-warning" | undefined;
                    OPTIONS_DATA_MERGE?: boolean | "suppress-warning" | undefined;
                    OPTIONS_BEFORE_DESTROY?: boolean | "suppress-warning" | undefined;
                    OPTIONS_DESTROYED?: boolean | "suppress-warning" | undefined;
                    WATCH_ARRAY?: boolean | "suppress-warning" | undefined;
                    PROPS_DEFAULT_THIS?: boolean | "suppress-warning" | undefined;
                    V_FOR_REF?: boolean | "suppress-warning" | undefined;
                    V_ON_KEYCODE_MODIFIER?: boolean | "suppress-warning" | undefined;
                    CUSTOM_DIR?: boolean | "suppress-warning" | undefined;
                    ATTR_FALSE_VALUE?: boolean | "suppress-warning" | undefined;
                    ATTR_ENUMERATED_COERCION?: boolean | "suppress-warning" | undefined;
                    TRANSITION_CLASSES?: boolean | "suppress-warning" | undefined;
                    TRANSITION_GROUP_ROOT?: boolean | "suppress-warning" | undefined;
                    COMPONENT_ASYNC?: boolean | "suppress-warning" | undefined;
                    COMPONENT_FUNCTIONAL?: boolean | "suppress-warning" | undefined;
                    COMPONENT_V_MODEL?: boolean | "suppress-warning" | undefined;
                    RENDER_FUNCTION?: boolean | "suppress-warning" | undefined;
                    FILTERS?: boolean | "suppress-warning" | undefined;
                    PRIVATE_APIS?: boolean | "suppress-warning" | undefined;
                    MODE?: 2 | 3 | ((comp: import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions> | null) => 2 | 3) | undefined;
                } | undefined;
                data?: ((this: any, vm: any) => any) | undefined;
                computed?: {
                    [x: string]: import("@vue/reactivity").ComputedGetter<any> | {
                        get: import("@vue/reactivity").ComputedGetter<any>;
                        set: import("@vue/reactivity").ComputedSetter<any>;
                    };
                } | undefined;
                methods?: {
                    [x: string]: Function;
                } | undefined;
                watch?: {
                    [x: string]: string | import("vue").WatchCallback<any, any> | {
                        handler: string | import("vue").WatchCallback<any, any>;
                        immediate?: boolean | undefined;
                        deep?: boolean | undefined;
                        flush?: "pre" | "sync" | "post" | undefined;
                        onTrack?: ((event: import("vue").DebuggerEvent) => void) | undefined;
                        onTrigger?: ((event: import("vue").DebuggerEvent) => void) | undefined;
                    } | (string | import("vue").WatchCallback<any, any> | {
                        handler: string | import("vue").WatchCallback<any, any>;
                        immediate?: boolean | undefined;
                        deep?: boolean | undefined;
                        flush?: "pre" | "sync" | "post" | undefined;
                        onTrack?: ((event: import("vue").DebuggerEvent) => void) | undefined;
                        onTrigger?: ((event: import("vue").DebuggerEvent) => void) | undefined;
                    })[];
                } | undefined;
                provide?: Function | {
                    [x: string]: unknown;
                } | undefined;
                inject?: string[] | {
                    [x: string]: string | symbol | {
                        from?: string | symbol | undefined;
                        default?: unknown;
                    };
                    [x: symbol]: string | symbol | {
                        from?: string | symbol | undefined;
                        default?: unknown;
                    };
                } | undefined;
                filters?: {
                    [x: string]: Function;
                } | undefined;
                mixins?: any[] | undefined;
                extends?: any;
                beforeCreate?: (() => void) | undefined;
                created?: (() => void) | undefined;
                beforeMount?: (() => void) | undefined;
                mounted?: (() => void) | undefined;
                beforeUpdate?: (() => void) | undefined;
                updated?: (() => void) | undefined;
                activated?: (() => void) | undefined;
                deactivated?: (() => void) | undefined;
                beforeDestroy?: (() => void) | undefined;
                beforeUnmount?: (() => void) | undefined;
                destroyed?: (() => void) | undefined;
                unmounted?: (() => void) | undefined;
                renderTracked?: ((e: import("vue").DebuggerEvent) => void) | undefined;
                renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | undefined;
                errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | undefined;
                delimiters?: [string, string] | undefined;
                __differentiator?: string | number | symbol | undefined;
                __isBuiltIn?: boolean | undefined;
                __file?: string | undefined;
                beforeRouteEnter?: import("vue-router").NavigationGuardWithThis<undefined> | undefined;
                beforeRouteUpdate?: import("vue-router").NavigationGuard | undefined;
                beforeRouteLeave?: import("vue-router").NavigationGuard | undefined;
            };
        } | undefined;
        directives?: {
            [x: string]: import("vue").FunctionDirective<any, any> | {
                created?: import("vue").DirectiveHook<any, null, any> | undefined;
                beforeMount?: import("vue").DirectiveHook<any, null, any> | undefined;
                mounted?: import("vue").DirectiveHook<any, null, any> | undefined;
                beforeUpdate?: import("vue").DirectiveHook<any, import("vue").VNode<any, any, {
                    [key: string]: any;
                }>, any> | undefined;
                updated?: import("vue").DirectiveHook<any, import("vue").VNode<any, any, {
                    [key: string]: any;
                }>, any> | undefined;
                beforeUnmount?: import("vue").DirectiveHook<any, null, any> | undefined;
                unmounted?: import("vue").DirectiveHook<any, null, any> | undefined;
                getSSRProps?: ((binding: import("vue").DirectiveBinding<any>, vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>) => {
                    [x: string]: unknown;
                } | undefined) | undefined;
                deep?: boolean | undefined;
            };
        } | undefined;
        inheritAttrs?: boolean | undefined;
        emits?: any;
        expose?: string[] | undefined;
        serverPrefetch?: (() => Promise<any>) | undefined;
        compilerOptions?: {
            isCustomElement?: ((tag: string) => boolean) | undefined;
            whitespace?: "preserve" | "condense" | undefined;
            comments?: boolean | undefined;
            delimiters?: [string, string] | undefined;
        } | undefined;
        call?: ((this: unknown, ...args: unknown[]) => never) | undefined;
        __isFragment?: undefined;
        __isTeleport?: undefined;
        __isSuspense?: undefined;
        __defaults?: {} | undefined;
        compatConfig?: {
            GLOBAL_MOUNT?: boolean | "suppress-warning" | undefined;
            GLOBAL_MOUNT_CONTAINER?: boolean | "suppress-warning" | undefined;
            GLOBAL_EXTEND?: boolean | "suppress-warning" | undefined;
            GLOBAL_PROTOTYPE?: boolean | "suppress-warning" | undefined;
            GLOBAL_SET?: boolean | "suppress-warning" | undefined;
            GLOBAL_DELETE?: boolean | "suppress-warning" | undefined;
            GLOBAL_OBSERVABLE?: boolean | "suppress-warning" | undefined;
            GLOBAL_PRIVATE_UTIL?: boolean | "suppress-warning" | undefined;
            CONFIG_SILENT?: boolean | "suppress-warning" | undefined;
            CONFIG_DEVTOOLS?: boolean | "suppress-warning" | undefined;
            CONFIG_KEY_CODES?: boolean | "suppress-warning" | undefined;
            CONFIG_PRODUCTION_TIP?: boolean | "suppress-warning" | undefined;
            CONFIG_IGNORED_ELEMENTS?: boolean | "suppress-warning" | undefined;
            CONFIG_WHITESPACE?: boolean | "suppress-warning" | undefined;
            CONFIG_OPTION_MERGE_STRATS?: boolean | "suppress-warning" | undefined;
            INSTANCE_SET?: boolean | "suppress-warning" | undefined;
            INSTANCE_DELETE?: boolean | "suppress-warning" | undefined;
            INSTANCE_DESTROY?: boolean | "suppress-warning" | undefined;
            INSTANCE_EVENT_EMITTER?: boolean | "suppress-warning" | undefined;
            INSTANCE_EVENT_HOOKS?: boolean | "suppress-warning" | undefined;
            INSTANCE_CHILDREN?: boolean | "suppress-warning" | undefined;
            INSTANCE_LISTENERS?: boolean | "suppress-warning" | undefined;
            INSTANCE_SCOPED_SLOTS?: boolean | "suppress-warning" | undefined;
            INSTANCE_ATTRS_CLASS_STYLE?: boolean | "suppress-warning" | undefined;
            OPTIONS_DATA_FN?: boolean | "suppress-warning" | undefined;
            OPTIONS_DATA_MERGE?: boolean | "suppress-warning" | undefined;
            OPTIONS_BEFORE_DESTROY?: boolean | "suppress-warning" | undefined;
            OPTIONS_DESTROYED?: boolean | "suppress-warning" | undefined;
            WATCH_ARRAY?: boolean | "suppress-warning" | undefined;
            PROPS_DEFAULT_THIS?: boolean | "suppress-warning" | undefined;
            V_FOR_REF?: boolean | "suppress-warning" | undefined;
            V_ON_KEYCODE_MODIFIER?: boolean | "suppress-warning" | undefined;
            CUSTOM_DIR?: boolean | "suppress-warning" | undefined;
            ATTR_FALSE_VALUE?: boolean | "suppress-warning" | undefined;
            ATTR_ENUMERATED_COERCION?: boolean | "suppress-warning" | undefined;
            TRANSITION_CLASSES?: boolean | "suppress-warning" | undefined;
            TRANSITION_GROUP_ROOT?: boolean | "suppress-warning" | undefined;
            COMPONENT_ASYNC?: boolean | "suppress-warning" | undefined;
            COMPONENT_FUNCTIONAL?: boolean | "suppress-warning" | undefined;
            COMPONENT_V_MODEL?: boolean | "suppress-warning" | undefined;
            RENDER_FUNCTION?: boolean | "suppress-warning" | undefined;
            FILTERS?: boolean | "suppress-warning" | undefined;
            PRIVATE_APIS?: boolean | "suppress-warning" | undefined;
            MODE?: 2 | 3 | ((comp: import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions> | null) => 2 | 3) | undefined;
        } | undefined;
        data?: ((this: import("vue").CreateComponentPublicInstance<{}, {}, {}, {}, import("vue").MethodOptions, any, any, {}, {}, {}, false, {
            P: {};
            B: {};
            D: {};
            C: import("vue").ComputedOptions;
            M: import("vue").MethodOptions;
            Defaults: {};
        } & {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, {}, {}, {}, import("vue").ComputedOptions, import("vue").MethodOptions, {}>, vm: import("vue").CreateComponentPublicInstance<{}, {}, {}, {}, import("vue").MethodOptions, any, any, {}, {}, {}, false, {
            P: {};
            B: {};
            D: {};
            C: import("vue").ComputedOptions;
            M: import("vue").MethodOptions;
            Defaults: {};
        } & {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, {}, {}, {}, import("vue").ComputedOptions, import("vue").MethodOptions, {}>) => any) | undefined;
        computed?: any;
        methods?: any;
        watch?: {
            [x: string]: string | import("vue").WatchCallback<any, any> | {
                handler: string | import("vue").WatchCallback<any, any>;
                immediate?: boolean | undefined;
                deep?: boolean | undefined;
                flush?: "pre" | "sync" | "post" | undefined;
                onTrack?: ((event: import("vue").DebuggerEvent) => void) | undefined;
                onTrigger?: ((event: import("vue").DebuggerEvent) => void) | undefined;
            } | (string | import("vue").WatchCallback<any, any> | {
                handler: string | import("vue").WatchCallback<any, any>;
                immediate?: boolean | undefined;
                deep?: boolean | undefined;
                flush?: "pre" | "sync" | "post" | undefined;
                onTrack?: ((event: import("vue").DebuggerEvent) => void) | undefined;
                onTrigger?: ((event: import("vue").DebuggerEvent) => void) | undefined;
            })[];
        } | undefined;
        provide?: Function | {
            [x: string]: unknown;
        } | undefined;
        inject?: string[] | {
            [x: string]: string | symbol | {
                from?: string | symbol | undefined;
                default?: unknown;
            };
            [x: symbol]: string | symbol | {
                from?: string | symbol | undefined;
                default?: unknown;
            };
        } | undefined;
        filters?: {
            [x: string]: Function;
        } | undefined;
        mixins?: any[] | undefined;
        extends?: any;
        beforeCreate?: (() => void) | undefined;
        created?: (() => void) | undefined;
        beforeMount?: (() => void) | undefined;
        mounted?: (() => void) | undefined;
        beforeUpdate?: (() => void) | undefined;
        updated?: (() => void) | undefined;
        activated?: (() => void) | undefined;
        deactivated?: (() => void) | undefined;
        beforeDestroy?: (() => void) | undefined;
        beforeUnmount?: (() => void) | undefined;
        destroyed?: (() => void) | undefined;
        unmounted?: (() => void) | undefined;
        renderTracked?: ((e: import("vue").DebuggerEvent) => void) | undefined;
        renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | undefined;
        errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | undefined;
        delimiters?: [string, string] | undefined;
        __differentiator?: string | number | symbol | undefined;
        __isBuiltIn?: boolean | undefined;
        __file?: string | undefined;
        beforeRouteEnter?: import("vue-router").NavigationGuardWithThis<undefined> | undefined;
        beforeRouteUpdate?: import("vue-router").NavigationGuard | undefined;
        beforeRouteLeave?: import("vue-router").NavigationGuard | undefined;
    } | null>;
    isPickerReadonly: (pickerName: 'year' | 'month' | 'day') => boolean;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    modelValue?: unknown;
    monthNames?: unknown;
    weekdayNames?: unknown;
    view?: unknown;
    type?: unknown;
    readonly?: unknown;
    disabled?: unknown;
    color?: unknown;
    weekendsColor?: unknown;
    allowedYears?: unknown;
    highlightToday?: unknown;
    mode?: unknown;
    startYear?: unknown;
    endYear?: unknown;
    "onUpdate:modelValue"?: unknown;
    "onHover:year"?: unknown;
    "onClick:year"?: unknown;
    allowedMonths?: unknown;
    "onHover:month"?: unknown;
    "onClick:month"?: unknown;
    firstWeekday?: unknown;
    hideWeekDays?: unknown;
    showOtherMonths?: unknown;
    allowedDays?: unknown;
    weekends?: unknown;
    highlightWeekend?: unknown;
    otherMonth?: unknown;
    today?: unknown;
    inRange?: unknown;
    selected?: unknown;
    weekend?: unknown;
    hidden?: unknown;
    focused?: unknown;
    onClick?: unknown;
    "onHover:day"?: unknown;
    "onClick:day"?: unknown;
    "onUpdate:view"?: unknown;
    stateful?: unknown;
} & {
    type: VaDatePickerType;
    hidden: boolean;
    disabled: boolean;
    readonly: boolean;
    mode: import("./types").VaDatePickerMode;
    selected: boolean;
    stateful: boolean;
    focused: boolean;
    otherMonth: boolean;
    today: boolean;
    inRange: boolean;
    weekend: boolean;
    highlightWeekend: boolean;
    highlightToday: boolean;
    monthNames: string[];
    weekdayNames: string[];
    firstWeekday: "Monday" | "Sunday";
    hideWeekDays: boolean;
    showOtherMonths: boolean;
    startYear: number;
    endYear: number;
} & {
    view?: VaDatePickerView | undefined;
    color?: string | undefined;
    onClick?: ((...args: any[]) => any) | undefined;
    modelValue?: VaDatePickerModelValue;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    "onHover:day"?: ((...args: any[]) => any) | undefined;
    "onClick:day"?: ((...args: any[]) => any) | undefined;
    allowedDays?: ((date: Date) => boolean) | undefined;
    weekends?: ((d: Date) => boolean) | undefined;
    "onUpdate:view"?: ((...args: any[]) => any) | undefined;
    "onHover:month"?: ((...args: any[]) => any) | undefined;
    "onClick:month"?: ((...args: any[]) => any) | undefined;
    allowedMonths?: ((date: Date) => boolean) | undefined;
    "onHover:year"?: ((...args: any[]) => any) | undefined;
    "onClick:year"?: ((...args: any[]) => any) | undefined;
    allowedYears?: ((date: Date) => boolean) | undefined;
    weekendsColor?: string | undefined;
}> & {
    [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
}, {
    type: VaDatePickerType;
    color: string;
    hidden: boolean;
    disabled: boolean;
    readonly: boolean;
    mode: import("./types").VaDatePickerMode;
    onClick: ((...args: any[]) => any) | undefined;
    selected: boolean;
    stateful: boolean;
    "onUpdate:modelValue": ((...args: any[]) => any) | undefined;
    focused: boolean;
    otherMonth: boolean;
    today: boolean;
    inRange: boolean;
    weekend: boolean;
    highlightWeekend: boolean;
    highlightToday: boolean;
    "onHover:day": ((...args: any[]) => any) | undefined;
    "onClick:day": ((...args: any[]) => any) | undefined;
    monthNames: string[];
    weekdayNames: string[];
    firstWeekday: "Monday" | "Sunday";
    hideWeekDays: boolean;
    showOtherMonths: boolean;
    allowedDays: ((date: Date) => boolean) | undefined;
    weekends: ((d: Date) => boolean) | undefined;
    "onUpdate:view": ((...args: any[]) => any) | undefined;
    "onHover:month": ((...args: any[]) => any) | undefined;
    "onClick:month": ((...args: any[]) => any) | undefined;
    allowedMonths: ((date: Date) => boolean) | undefined;
    "onHover:year": ((...args: any[]) => any) | undefined;
    "onClick:year": ((...args: any[]) => any) | undefined;
    allowedYears: ((date: Date) => boolean) | undefined;
    startYear: number;
    endYear: number;
    weekendsColor: string;
}>;
export default _default;
