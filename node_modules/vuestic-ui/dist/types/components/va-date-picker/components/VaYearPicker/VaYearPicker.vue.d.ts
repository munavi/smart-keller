import { PropType } from 'vue';
import { VaDatePickerMode, VaDatePickerModelValue, VaDatePickerView } from '../../types';
declare const _default: import("vue").DefineComponent<{
    modelValue: {
        type: PropType<VaDatePickerModelValue>;
    };
    allowedYears: {
        type: PropType<(date: Date) => boolean>;
        default: undefined;
    };
    highlightToday: {
        type: BooleanConstructor;
        default: boolean;
    };
    mode: {
        type: PropType<VaDatePickerMode>;
        default: string;
    };
    view: {
        type: PropType<VaDatePickerView>;
        default: () => {
            type: string;
        };
    };
    startYear: {
        type: NumberConstructor;
        default: () => number;
    };
    endYear: {
        type: NumberConstructor;
        default: () => number;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    hoveredIndex: import("vue").Ref<number>;
    years: import("vue").ComputedRef<Date[]>;
    rootNode: import("vue").Ref<HTMLElement | null>;
    onClick: (date: Date) => void;
    isToday: (date: Date) => boolean;
    isSelected: (date: Date) => boolean;
    isInRange: (date: Date) => boolean;
    isYearDisabled: (year: Date) => boolean;
    focusedCellIndex: import("vue").Ref<number>;
    containerAttributes: {
        onFocus: () => void;
        onKeydown: (e: KeyboardEvent) => void;
        onBlur: () => void;
        onMousedown: () => void;
        tabindex: number;
    };
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "hover:year" | "click:year")[], "update:modelValue" | "hover:year" | "click:year", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    modelValue?: unknown;
    allowedYears?: unknown;
    highlightToday?: unknown;
    mode?: unknown;
    view?: unknown;
    startYear?: unknown;
    endYear?: unknown;
    readonly?: unknown;
} & {
    view: VaDatePickerView;
    readonly: boolean;
    mode: VaDatePickerMode;
    highlightToday: boolean;
    startYear: number;
    endYear: number;
} & {
    modelValue?: VaDatePickerModelValue;
    allowedYears?: ((date: Date) => boolean) | undefined;
}> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    "onHover:year"?: ((...args: any[]) => any) | undefined;
    "onClick:year"?: ((...args: any[]) => any) | undefined;
}, {
    view: VaDatePickerView;
    readonly: boolean;
    mode: VaDatePickerMode;
    highlightToday: boolean;
    allowedYears: (date: Date) => boolean;
    startYear: number;
    endYear: number;
}>;
export default _default;
