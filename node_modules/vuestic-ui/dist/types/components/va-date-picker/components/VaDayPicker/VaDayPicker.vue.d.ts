import { PropType } from 'vue';
import { VaDatePickerMode, VaDatePickerModelValue, VaDatePickerView } from '../../types';
declare const _default: import("vue").DefineComponent<{
    monthNames: {
        type: PropType<string[]>;
        required: true;
    };
    weekdayNames: {
        type: PropType<string[]>;
        required: true;
    };
    firstWeekday: {
        type: PropType<"Monday" | "Sunday">;
        default: string;
    };
    hideWeekDays: {
        type: BooleanConstructor;
        default: boolean;
    };
    view: {
        type: PropType<VaDatePickerView>;
        default: () => {
            type: string;
        };
    };
    modelValue: {
        type: PropType<VaDatePickerModelValue>;
    };
    mode: {
        type: PropType<VaDatePickerMode>;
        default: string;
    };
    showOtherMonths: {
        type: BooleanConstructor;
        default: boolean;
    };
    allowedDays: {
        type: PropType<(date: Date) => boolean>;
    };
    weekends: {
        type: PropType<(d: Date) => boolean>;
    };
    highlightWeekend: {
        type: BooleanConstructor;
        default: boolean;
    };
    highlightToday: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    otherMonth: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    today: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    inRange: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    disabled: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    selected: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    weekend: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    hidden: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    focused: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    onClick: {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
}, {
    hoveredIndex: import("vue").Ref<number>;
    calendarDates: import("vue").ComputedRef<Date[]>;
    onClick: (date: Date) => void;
    isToday: (date: Date) => boolean;
    isSelected: (date: Date) => boolean;
    isInRange: (date: Date) => boolean;
    isOtherMonth: (date: Date) => boolean;
    isDateDisabled: (date: Date) => boolean;
    isDateWeekend: (date: Date) => boolean;
    containerAttributes: {
        onFocus: () => void;
        onKeydown: (e: KeyboardEvent) => void;
        onBlur: () => void;
        onMousedown: () => void;
        tabindex: number;
    };
    weekdayNamesComputed: import("vue").ComputedRef<string[]>;
    VaDayPickerCellPropValues: import("vue").ComputedRef<{
        otherMonth?: unknown;
        today?: unknown;
        inRange?: unknown;
        disabled?: unknown;
        selected?: unknown;
        weekend?: unknown;
        hidden?: unknown;
        focused?: unknown;
        highlightWeekend?: unknown;
        highlightToday?: unknown;
        readonly?: unknown;
        onClick?: unknown;
    } & {
        hidden: boolean;
        disabled: boolean;
        readonly: boolean;
        selected: boolean;
        focused: boolean;
        otherMonth: boolean;
        today: boolean;
        inRange: boolean;
        weekend: boolean;
        highlightWeekend: boolean;
        highlightToday: boolean;
    } & {
        onClick?: ((...args: any[]) => any) | undefined;
    }>;
    focusedCellIndex: import("vue").Ref<number>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "hover:day" | "click:day")[], "update:modelValue" | "hover:day" | "click:day", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    monthNames?: unknown;
    weekdayNames?: unknown;
    firstWeekday?: unknown;
    hideWeekDays?: unknown;
    view?: unknown;
    modelValue?: unknown;
    mode?: unknown;
    showOtherMonths?: unknown;
    allowedDays?: unknown;
    weekends?: unknown;
    highlightWeekend?: unknown;
    highlightToday?: unknown;
    readonly?: unknown;
    otherMonth?: unknown;
    today?: unknown;
    inRange?: unknown;
    disabled?: unknown;
    selected?: unknown;
    weekend?: unknown;
    hidden?: unknown;
    focused?: unknown;
    onClick?: unknown;
} & {
    view: VaDatePickerView;
    hidden: boolean;
    disabled: boolean;
    readonly: boolean;
    mode: VaDatePickerMode;
    selected: boolean;
    focused: boolean;
    otherMonth: boolean;
    today: boolean;
    inRange: boolean;
    weekend: boolean;
    highlightWeekend: boolean;
    highlightToday: boolean;
    monthNames: string[];
    weekdayNames: string[];
    firstWeekday: "Monday" | "Sunday";
    hideWeekDays: boolean;
    showOtherMonths: boolean;
} & {
    onClick?: ((...args: any[]) => any) | undefined;
    modelValue?: VaDatePickerModelValue;
    allowedDays?: ((date: Date) => boolean) | undefined;
    weekends?: ((d: Date) => boolean) | undefined;
}> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    "onHover:day"?: ((...args: any[]) => any) | undefined;
    "onClick:day"?: ((...args: any[]) => any) | undefined;
}, {
    view: VaDatePickerView;
    hidden: boolean;
    disabled: boolean;
    readonly: boolean;
    mode: VaDatePickerMode;
    onClick: ((...args: any[]) => any) | undefined;
    selected: boolean;
    focused: boolean;
    otherMonth: boolean;
    today: boolean;
    inRange: boolean;
    weekend: boolean;
    highlightWeekend: boolean;
    highlightToday: boolean;
    firstWeekday: "Monday" | "Sunday";
    hideWeekDays: boolean;
    showOtherMonths: boolean;
}>;
export default _default;
