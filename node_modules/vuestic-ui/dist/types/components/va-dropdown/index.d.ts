export { default as VaDropdownContent } from './components/VaDropdownContent';
declare const _default: import("vue").DefineComponent<{
    stateful: {
        default: boolean;
    };
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
    };
    anchorSelector: {
        type: StringConstructor;
        default: string;
    };
    attachElement: {
        type: StringConstructor;
        default: string;
    };
    disableAttachment: {
        type: BooleanConstructor;
        default: boolean;
    };
    keepAnchorWidth: {
        type: BooleanConstructor;
        default: boolean;
    };
    isContentHoverable: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnContentClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnClickOutside: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnAnchorClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    hoverOverTimeout: {
        type: NumberConstructor;
        default: number;
    };
    hoverOutTimeout: {
        type: NumberConstructor;
        default: number;
    };
    offset: {
        type: import("vue").PropType<number | [number, number]>;
        default: () => number;
    };
    trigger: {
        type: import("vue").PropType<"none" | "click" | "hover">;
        default: string;
        validator: (trigger: string) => boolean;
    };
    placement: {
        type: import("vue").PropType<import("../../composables/usePopover").Placement>;
        default: string;
        validator: (placement: string) => boolean;
    };
}, {
    valueComputed: import("vue").WritableComputedRef<boolean>;
    anchorRef: import("vue").Ref<any>;
    contentRef: import("vue").Ref<any>;
    computedClass: import("vue").ComputedRef<{
        'va-dropdown': boolean;
        'va-dropdown--disabled': boolean;
    }>;
    emitAndClose: (eventName: string, close?: boolean | undefined) => void;
    onAnchorClick: () => void;
    onMouseEnter: () => void;
    onMouseLeave: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    stateful?: unknown;
    modelValue?: unknown;
    disabled?: unknown;
    anchorSelector?: unknown;
    attachElement?: unknown;
    disableAttachment?: unknown;
    keepAnchorWidth?: unknown;
    isContentHoverable?: unknown;
    closeOnContentClick?: unknown;
    closeOnClickOutside?: unknown;
    closeOnAnchorClick?: unknown;
    hoverOverTimeout?: unknown;
    hoverOutTimeout?: unknown;
    offset?: unknown;
    trigger?: unknown;
    placement?: unknown;
} & {
    offset: number | [number, number];
    disabled: boolean;
    modelValue: boolean;
    stateful: boolean;
    keepAnchorWidth: boolean;
    placement: import("../../composables/usePopover").Placement;
    anchorSelector: string;
    attachElement: string;
    disableAttachment: boolean;
    isContentHoverable: boolean;
    closeOnContentClick: boolean;
    closeOnClickOutside: boolean;
    closeOnAnchorClick: boolean;
    hoverOverTimeout: number;
    hoverOutTimeout: number;
    trigger: "none" | "click" | "hover";
} & {}> & {
    [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
}, {
    offset: number | [number, number];
    disabled: boolean;
    modelValue: boolean;
    stateful: boolean;
    keepAnchorWidth: boolean;
    placement: import("../../composables/usePopover").Placement;
    anchorSelector: string;
    attachElement: string;
    disableAttachment: boolean;
    isContentHoverable: boolean;
    closeOnContentClick: boolean;
    closeOnClickOutside: boolean;
    closeOnAnchorClick: boolean;
    hoverOverTimeout: number;
    hoverOutTimeout: number;
    trigger: "none" | "click" | "hover";
}>;
export default _default;
