export declare const VaBreadcrumbsItem: import("vue").DefineComponent<{
    disabled: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    label: {
        type: import("vue").PropType<string>;
        default: string;
    };
    tag: {
        type: import("vue").PropType<string>;
        default: string;
    };
    to: {
        type: import("vue").PropType<string | Record<string, unknown>>;
        default: null;
    };
    replace: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    append: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    exact: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    activeClass: {
        type: import("vue").PropType<string>;
        default: string;
    };
    exactActiveClass: {
        type: import("vue").PropType<string>;
        default: string;
    };
    href: {
        type: import("vue").PropType<string>;
        default: string;
    };
    target: {
        type: import("vue").PropType<string>;
        default: string;
    };
}, {
    isDisabled: import("vue").ComputedRef<boolean>;
    hrefComputed: import("vue").ComputedRef<any>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    disabled?: unknown;
    label?: unknown;
    tag?: unknown;
    to?: unknown;
    replace?: unknown;
    append?: unknown;
    exact?: unknown;
    activeClass?: unknown;
    exactActiveClass?: unknown;
    href?: unknown;
    target?: unknown;
} & {
    replace: boolean;
    exact: boolean;
    label: string;
    target: string;
    append: boolean;
    disabled: boolean;
    tag: string;
    href: string;
    to: string | Record<string, unknown>;
    activeClass: string;
    exactActiveClass: string;
} & {}>, {
    replace: boolean;
    exact: boolean;
    label: string;
    target: string;
    append: boolean;
    disabled: boolean;
    tag: string;
    href: string;
    to: string | Record<string, unknown>;
    activeClass: string;
    exactActiveClass: string;
}>;
declare const _default: import("vue").DefineComponent<{
    separator: {
        type: import("vue").PropType<string>;
        default: string;
    };
    color: {
        type: import("vue").PropType<string>;
        default: string;
    };
    activeColor: {
        type: import("vue").PropType<string>;
        default: null;
    };
    separatorColor: {
        type: import("vue").PropType<string>;
        default: null;
    };
    align: {
        type: import("vue").PropType<string>;
        default: string;
    };
    vertical: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    separator?: unknown;
    color?: unknown;
    activeColor?: unknown;
    separatorColor?: unknown;
    align?: unknown;
    vertical?: unknown;
} & {
    color: string;
    vertical: boolean;
    separator: string;
    align: string;
    activeColor: string;
    separatorColor: string;
} & {}>, {
    color: string;
    vertical: boolean;
    separator: string;
    align: string;
    activeColor: string;
    separatorColor: string;
}>;
export default _default;
