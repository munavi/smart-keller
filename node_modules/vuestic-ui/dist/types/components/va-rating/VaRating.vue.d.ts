import { PropType } from 'vue';
declare const _default: import("vue").DefineComponent<{
    numbers: {
        type: BooleanConstructor;
        default: boolean;
    };
    halves: {
        type: BooleanConstructor;
        default: boolean;
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    texts: {
        type: PropType<string[]>;
        default: () => never[];
    };
    itemNumber: {
        type: PropType<number>;
        required: true;
        default: number;
    };
    modelValue: {
        type: PropType<number>;
        required: true;
        default: number;
    };
    size: {
        type: PropType<string | number>;
        required: true;
        default: string | number;
    };
    sizesConfig: {
        type: PropType<Record<string, any>>;
        required: true;
        default: Record<string, any>;
    };
    fontSizesConfig: {
        type: PropType<Record<string, any>>;
        required: true;
        default: Record<string, any>;
    };
    unselectedColor: {
        type: PropType<string | undefined>;
        required: false;
        default: undefined;
    };
    color: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    icon: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    halfIcon: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    emptyIcon: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    hover: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    tabindex: {
        type: PropType<number>;
        required: true;
        default: number;
    };
    emptyIconColor: {
        type: PropType<string | undefined>;
        required: false;
        default: undefined;
    };
    onClick: {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    "onUpdate:modelValue": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    onHover: {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    stateful: {
        type: PropType<boolean>;
        default: boolean;
    };
}, {
    rootClass: import("vue").ComputedRef<Record<"va-rating--disabled" | "va-rating--readonly", boolean>>;
    VaRatingItemProps: import("vue").ComputedRef<{
        modelValue?: unknown;
        icon?: unknown;
        halfIcon?: unknown;
        emptyIcon?: unknown;
        halves?: unknown;
        hover?: unknown;
        tabindex?: unknown;
        size?: unknown;
        emptyIconColor?: unknown;
        color?: unknown;
        onClick?: unknown;
        "onUpdate:modelValue"?: unknown;
        onHover?: unknown;
    } & {
        color: string;
        size: string | number;
        icon: string;
        tabindex: number;
        modelValue: number;
        hover: boolean;
        halfIcon: string;
        emptyIcon: string;
        halves: boolean;
    } & {
        onClick?: ((...args: any[]) => any) | undefined;
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onHover?: ((...args: any[]) => any) | undefined;
        emptyIconColor?: string | undefined;
    }>;
    VaRatingItemNumberButtonProps: import("vue").ComputedRef<{
        itemNumber?: unknown;
        modelValue?: unknown;
        size?: unknown;
        sizesConfig?: unknown;
        fontSizesConfig?: unknown;
        unselectedColor?: unknown;
        color?: unknown;
    } & {
        color: string;
        size: string | number;
        sizesConfig: Record<string, any>;
        fontSizesConfig: Record<string, any>;
        modelValue: number;
        itemNumber: number;
    } & {
        unselectedColor?: string | undefined;
    }>;
    isInteractionsEnabled: import("vue").ComputedRef<boolean>;
    tabindex: import("vue").ComputedRef<0 | undefined>;
    onArrowKeyPress: (direction: 1 | -1) => void;
    visibleValue: import("vue").ComputedRef<number>;
    modelValue: import("vue").WritableComputedRef<number>;
    hoveredValue: import("vue").Ref<number>;
    isHovered: import("vue").Ref<boolean>;
    onMouseEnter: () => void;
    onMouseLeave: () => void;
    onItemValueUpdate: (itemIndex: number, newValue: number) => void;
    onItemHoveredValueUpdate: (itemIndex: number, newValue: number) => void;
    getItemValue: (itemIndex: number) => number;
    computedColor: import("vue").ComputedRef<string>;
    backgroundComputed: import("vue").ComputedRef<string>;
    textColorComputed: import("vue").ComputedRef<string>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "update:modelValue"[], "update:modelValue", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    numbers?: unknown;
    halves?: unknown;
    max?: unknown;
    texts?: unknown;
    itemNumber?: unknown;
    modelValue?: unknown;
    size?: unknown;
    sizesConfig?: unknown;
    fontSizesConfig?: unknown;
    unselectedColor?: unknown;
    color?: unknown;
    icon?: unknown;
    halfIcon?: unknown;
    emptyIcon?: unknown;
    hover?: unknown;
    tabindex?: unknown;
    emptyIconColor?: unknown;
    onClick?: unknown;
    "onUpdate:modelValue"?: unknown;
    onHover?: unknown;
    disabled?: unknown;
    readonly?: unknown;
    clearable?: unknown;
    stateful?: unknown;
} & {
    max: number;
    color: string;
    disabled: boolean;
    size: string | number;
    readonly: boolean;
    icon: string;
    numbers: boolean;
    tabindex: number;
    sizesConfig: Record<string, any>;
    fontSizesConfig: Record<string, any>;
    modelValue: number;
    stateful: boolean;
    hover: boolean;
    clearable: boolean;
    halfIcon: string;
    emptyIcon: string;
    halves: boolean;
    itemNumber: number;
    texts: string[];
} & {
    onClick?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    unselectedColor?: string | undefined;
    onHover?: ((...args: any[]) => any) | undefined;
    emptyIconColor?: string | undefined;
}> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    max: number;
    color: string;
    disabled: boolean;
    size: string | number;
    readonly: boolean;
    icon: string;
    numbers: boolean;
    onClick: ((...args: any[]) => any) | undefined;
    tabindex: number;
    sizesConfig: Record<string, any>;
    fontSizesConfig: Record<string, any>;
    modelValue: number;
    stateful: boolean;
    hover: boolean;
    "onUpdate:modelValue": ((...args: any[]) => any) | undefined;
    clearable: boolean;
    unselectedColor: string | undefined;
    onHover: ((...args: any[]) => any) | undefined;
    halfIcon: string;
    emptyIcon: string;
    halves: boolean;
    emptyIconColor: string | undefined;
    itemNumber: number;
    texts: string[];
}>;
export default _default;
