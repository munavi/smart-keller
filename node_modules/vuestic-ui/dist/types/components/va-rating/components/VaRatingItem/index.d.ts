declare const _default: import("vue").DefineComponent<{
    modelValue: {
        type: NumberConstructor;
        default: number;
    };
    icon: {
        type: StringConstructor;
        default: string;
    };
    halfIcon: {
        type: StringConstructor;
        default: string;
    };
    emptyIcon: {
        type: StringConstructor;
        default: string;
    };
    halves: {
        type: BooleanConstructor;
        default: boolean;
    };
    hover: {
        type: BooleanConstructor;
        default: boolean;
    };
    tabindex: {
        type: NumberConstructor;
        default: number;
    };
    size: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    emptyIconColor: {
        type: StringConstructor;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
}, {
    rootEl: import("vue").Ref<HTMLElement | undefined>;
    onEnter: () => void;
    onClick: () => void;
    onMouseMove: (ev: MouseEvent) => void;
    onMouseLeave: () => void;
    visibleValue: import("vue").ComputedRef<number>;
    computedIconName: import("vue").ComputedRef<string>;
    setColors: (colors: import("../../../../main").ColorConfig) => void;
    getColors: () => import("../../../../main").ColorConfig;
    getColor: (prop?: string | undefined, defaultColor?: string, preferVariables?: boolean | undefined) => string;
    getBoxShadowColor: (color: import("colortranslator/dist/@types").ColorInput) => string;
    getHoverColor: (color: import("colortranslator/dist/@types").ColorInput) => string;
    getFocusColor: (color: import("colortranslator/dist/@types").ColorInput) => string;
    getGradientBackground: (color: string) => string;
    getTextColor: (color: import("colortranslator/dist/@types").ColorInput, darkColor?: string, lightColor?: string) => string;
    shiftHSLAColor: (color: import("colortranslator/dist/@types").ColorInput, offset: {
        h?: number | undefined;
        s?: number | undefined;
        l?: number | undefined;
        a?: number | undefined;
    }) => string;
    setHSLAColor: (color: import("colortranslator/dist/@types").ColorInput, newColor: {
        h?: number | undefined;
        s?: number | undefined;
        l?: number | undefined;
        a?: number | undefined;
    }) => string;
    colorsToCSSVariable: (colors: {
        [colorName: string]: string | undefined;
    }, prefix?: string) => Record<string, any>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click" | "update:modelValue" | "hover")[], "click" | "update:modelValue" | "hover", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    modelValue?: unknown;
    icon?: unknown;
    halfIcon?: unknown;
    emptyIcon?: unknown;
    halves?: unknown;
    hover?: unknown;
    tabindex?: unknown;
    size?: unknown;
    emptyIconColor?: unknown;
    color?: unknown;
} & {
    color: string;
    size: string | number;
    icon: string;
    tabindex: number;
    modelValue: number;
    hover: boolean;
    halfIcon: string;
    emptyIcon: string;
    halves: boolean;
} & {
    emptyIconColor?: string | undefined;
}> & {
    onClick?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onHover?: ((...args: any[]) => any) | undefined;
}, {
    color: string;
    size: string | number;
    icon: string;
    tabindex: number;
    modelValue: number;
    hover: boolean;
    halfIcon: string;
    emptyIcon: string;
    halves: boolean;
}>;
export default _default;
