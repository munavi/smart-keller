declare const _default: import("vue").DefineComponent<{
    trigger: {
        default: string;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    textColor: {
        type: StringConstructor;
    };
    icon: {
        type: StringConstructor;
        default: string;
    };
    title: {
        type: StringConstructor;
        default: string;
    };
    message: {
        type: StringConstructor;
        default: string;
    };
    autoHide: {
        type: BooleanConstructor;
        default: boolean;
    };
    offset: {
        type: import("vue").PropType<number | [number, number]>;
        default: number;
    };
    stateful: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    modelValue: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    disabled: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    anchorSelector: {
        type: import("vue").PropType<string>;
        required: true;
        default: string;
    };
    attachElement: {
        type: import("vue").PropType<string>;
        required: true;
        default: string;
    };
    disableAttachment: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    keepAnchorWidth: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    isContentHoverable: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    closeOnContentClick: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    closeOnClickOutside: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    closeOnAnchorClick: {
        type: import("vue").PropType<boolean>;
        required: true;
        default: boolean;
    };
    hoverOverTimeout: {
        type: import("vue").PropType<number>;
        required: true;
        default: number;
    };
    hoverOutTimeout: {
        type: import("vue").PropType<number>;
        required: true;
        default: number;
    };
    placement: {
        type: import("vue").PropType<import("../../composables/usePopover").Placement>;
        required: true;
        default: import("../../composables/usePopover").Placement;
    };
}, {
    VaDropdownPropValues: import("vue").ComputedRef<{
        [x: string & `on${string}`]: unknown;
        stateful?: unknown;
        modelValue?: unknown;
        disabled?: unknown;
        anchorSelector?: unknown;
        attachElement?: unknown;
        disableAttachment?: unknown;
        keepAnchorWidth?: unknown;
        isContentHoverable?: unknown;
        closeOnContentClick?: unknown;
        closeOnClickOutside?: unknown;
        closeOnAnchorClick?: unknown;
        hoverOverTimeout?: unknown;
        hoverOutTimeout?: unknown;
        offset?: unknown;
        trigger?: unknown;
        placement?: unknown;
    } & {
        offset: number | [number, number];
        disabled: boolean;
        modelValue: boolean;
        stateful: boolean;
        keepAnchorWidth: boolean;
        placement: import("../../composables/usePopover").Placement;
        anchorSelector: string;
        attachElement: string;
        disableAttachment: boolean;
        isContentHoverable: boolean;
        closeOnContentClick: boolean;
        closeOnClickOutside: boolean;
        closeOnAnchorClick: boolean;
        hoverOverTimeout: number;
        hoverOutTimeout: number;
        trigger: "none" | "click" | "hover";
    } & {
        [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
    }>;
    computedPopoverStyle: import("vue").ComputedRef<{
        boxShadow: string;
        backgroundColor: string;
        color: string;
    }>;
    textColorComputed: import("vue").ComputedRef<string>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    trigger?: unknown;
    color?: unknown;
    textColor?: unknown;
    icon?: unknown;
    title?: unknown;
    message?: unknown;
    autoHide?: unknown;
    offset?: unknown;
    stateful?: unknown;
    modelValue?: unknown;
    disabled?: unknown;
    anchorSelector?: unknown;
    attachElement?: unknown;
    disableAttachment?: unknown;
    keepAnchorWidth?: unknown;
    isContentHoverable?: unknown;
    closeOnContentClick?: unknown;
    closeOnClickOutside?: unknown;
    closeOnAnchorClick?: unknown;
    hoverOverTimeout?: unknown;
    hoverOutTimeout?: unknown;
    placement?: unknown;
} & {
    offset: number | [number, number];
    message: string;
    color: string;
    title: string;
    disabled: boolean;
    icon: string;
    modelValue: boolean;
    stateful: boolean;
    keepAnchorWidth: boolean;
    placement: import("../../composables/usePopover").Placement;
    anchorSelector: string;
    attachElement: string;
    disableAttachment: boolean;
    isContentHoverable: boolean;
    closeOnContentClick: boolean;
    closeOnClickOutside: boolean;
    closeOnAnchorClick: boolean;
    hoverOverTimeout: number;
    hoverOutTimeout: number;
    trigger: string;
    autoHide: boolean;
} & {
    textColor?: string | undefined;
}>, {
    offset: number | [number, number];
    message: string;
    color: string;
    title: string;
    disabled: boolean;
    icon: string;
    modelValue: boolean;
    stateful: boolean;
    keepAnchorWidth: boolean;
    placement: import("../../composables/usePopover").Placement;
    anchorSelector: string;
    attachElement: string;
    disableAttachment: boolean;
    isContentHoverable: boolean;
    closeOnContentClick: boolean;
    closeOnClickOutside: boolean;
    closeOnAnchorClick: boolean;
    hoverOverTimeout: number;
    hoverOutTimeout: number;
    trigger: string;
    autoHide: boolean;
}>;
export default _default;
