import { PropType } from 'vue';
import { Placement } from '../../composables/usePopover';
declare const _default: import("vue").DefineComponent<{
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    stateful: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    textColor: {
        type: StringConstructor;
        default: undefined;
    };
    size: {
        type: StringConstructor;
        default: string;
        validator: (value: string) => boolean;
    };
    outline: {
        type: BooleanConstructor;
        default: boolean;
    };
    flat: {
        type: BooleanConstructor;
        default: boolean;
    };
    rounded: {
        type: BooleanConstructor;
        default: boolean;
    };
    gradient: {
        type: BooleanConstructor;
        default: undefined;
    };
    icon: {
        type: StringConstructor;
        default: string;
    };
    openedIcon: {
        type: StringConstructor;
        default: string;
    };
    hideIcon: {
        type: BooleanConstructor;
        default: boolean;
    };
    leftIcon: {
        type: BooleanConstructor;
        default: boolean;
    };
    disableButton: {
        type: BooleanConstructor;
        default: boolean;
    };
    disableDropdown: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    placement: {
        type: PropType<Placement>;
        default: string;
        validator: (placement: string) => boolean;
    };
    offset: {
        type: PropType<number | [number, number]>;
        default: () => number[];
    };
    keepAnchorWidth: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnContentClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    split: {
        type: BooleanConstructor;
    };
    splitTo: {
        type: StringConstructor;
        default: string;
    };
    splitHref: {
        type: StringConstructor;
        default: string;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    label: {
        type: StringConstructor;
    };
}, {
    valueComputed: import("vue").WritableComputedRef<boolean>;
    computedIcon: import("vue").ComputedRef<string>;
    computedClass: import("vue").ComputedRef<{
        'va-button-dropdown': boolean;
        'va-button-dropdown--split': boolean;
        'va-button-dropdown--normal': boolean;
        'va-button-dropdown--large': boolean;
        'va-button-dropdown--small': boolean;
    }>;
    listeners: Record<string, any>;
    mainButtonListeners: Record<string, any>;
    computedButtonIcons: import("vue").ComputedRef<{
        [x: string]: string;
    }>;
    computedViewStyles: import("vue").ComputedRef<Pick<Readonly<{
        [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
        split: boolean;
        flat: boolean;
        offset: number | [number, number];
        color: string;
        outline: boolean;
        loading: boolean;
        label: string | undefined;
        disabled: boolean;
        size: string;
        icon: string;
        textColor: string | undefined;
        modelValue: boolean;
        stateful: boolean;
        gradient: boolean | undefined;
        rounded: boolean;
        keepAnchorWidth: boolean;
        placement: Placement;
        closeOnContentClick: boolean;
        openedIcon: string;
        hideIcon: boolean;
        leftIcon: boolean;
        disableButton: boolean;
        disableDropdown: boolean;
        splitTo: string;
        splitHref: string;
    }>, "flat" | "color" | "outline" | "size" | "gradient" | "rounded">>;
    computedMainButtonProps: import("vue").ComputedRef<{
        to: string;
        href: string;
        loading: boolean;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    modelValue?: unknown;
    stateful?: unknown;
    color?: unknown;
    textColor?: unknown;
    size?: unknown;
    outline?: unknown;
    flat?: unknown;
    rounded?: unknown;
    gradient?: unknown;
    icon?: unknown;
    openedIcon?: unknown;
    hideIcon?: unknown;
    leftIcon?: unknown;
    disableButton?: unknown;
    disableDropdown?: unknown;
    disabled?: unknown;
    placement?: unknown;
    offset?: unknown;
    keepAnchorWidth?: unknown;
    closeOnContentClick?: unknown;
    split?: unknown;
    splitTo?: unknown;
    splitHref?: unknown;
    loading?: unknown;
    label?: unknown;
} & {
    split: boolean;
    flat: boolean;
    offset: number | [number, number];
    color: string;
    outline: boolean;
    loading: boolean;
    disabled: boolean;
    size: string;
    icon: string;
    modelValue: boolean;
    stateful: boolean;
    rounded: boolean;
    keepAnchorWidth: boolean;
    placement: Placement;
    closeOnContentClick: boolean;
    openedIcon: string;
    hideIcon: boolean;
    leftIcon: boolean;
    disableButton: boolean;
    disableDropdown: boolean;
    splitTo: string;
    splitHref: string;
} & {
    label?: string | undefined;
    textColor?: string | undefined;
    gradient?: boolean | undefined;
}> & {
    [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
}, {
    split: boolean;
    flat: boolean;
    offset: number | [number, number];
    color: string;
    outline: boolean;
    loading: boolean;
    disabled: boolean;
    size: string;
    icon: string;
    textColor: string;
    modelValue: boolean;
    stateful: boolean;
    gradient: boolean;
    rounded: boolean;
    keepAnchorWidth: boolean;
    placement: Placement;
    closeOnContentClick: boolean;
    openedIcon: string;
    hideIcon: boolean;
    leftIcon: boolean;
    disableButton: boolean;
    disableDropdown: boolean;
    splitTo: string;
    splitHref: string;
}>;
export default _default;
