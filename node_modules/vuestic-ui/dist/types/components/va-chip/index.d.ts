declare const _default: import("vue").DefineComponent<{
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeable: {
        type: BooleanConstructor;
        default: boolean;
    };
    outline: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    square: {
        type: BooleanConstructor;
        default: boolean;
    };
    shadow: {
        type: BooleanConstructor;
        default: boolean;
    };
    flat: {
        type: BooleanConstructor;
        default: boolean;
    };
    icon: {
        type: StringConstructor;
        default: string;
    };
    tag: {
        type: StringConstructor;
        default: string;
    };
    size: {
        type: import("vue").PropType<"small" | "medium" | "large">;
        default: string;
        validator: (value: string) => boolean;
    };
    stateful: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    color: {
        type: import("vue").PropType<string>;
        default: string;
    };
    to: {
        type: import("vue").PropType<string | Record<string, unknown>>;
        default: null;
    };
    replace: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    append: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    exact: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    activeClass: {
        type: import("vue").PropType<string>;
        default: string;
    };
    exactActiveClass: {
        type: import("vue").PropType<string>;
        default: string;
    };
    href: {
        type: import("vue").PropType<string>;
        default: string;
    };
    target: {
        type: import("vue").PropType<string>;
        default: string;
    };
}, {
    keyboardFocusListeners: {
        mousedown: () => void;
        focus: () => void;
        blur: () => void;
    };
    valueComputed: import("vue").WritableComputedRef<boolean>;
    hrefComputed: import("vue").ComputedRef<any>;
    tagComputed: import("vue").ComputedRef<string>;
    onMouseEnter: () => void;
    onMouseLeave: () => void;
    isHovered: import("vue").Ref<boolean>;
    close: () => void;
    iconSize: import("vue").ComputedRef<string>;
    indexComputed: import("vue").ComputedRef<-1 | 0>;
    computedClass: import("vue").ComputedRef<{
        'va-chip--small': boolean;
        'va-chip--large': boolean;
        'va-chip--square': boolean;
        'va-chip--disabled': boolean;
    }>;
    computedStyle: import("vue").ComputedRef<{
        color: string;
        borderColor: string;
        background: string;
        boxShadow: string | undefined;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    modelValue?: unknown;
    closeable?: unknown;
    outline?: unknown;
    disabled?: unknown;
    square?: unknown;
    shadow?: unknown;
    flat?: unknown;
    icon?: unknown;
    tag?: unknown;
    size?: unknown;
    stateful?: unknown;
    color?: unknown;
    to?: unknown;
    replace?: unknown;
    append?: unknown;
    exact?: unknown;
    activeClass?: unknown;
    exactActiveClass?: unknown;
    href?: unknown;
    target?: unknown;
} & {
    replace: boolean;
    flat: boolean;
    exact: boolean;
    square: boolean;
    color: string;
    outline: boolean;
    target: string;
    append: boolean;
    disabled: boolean;
    size: "small" | "medium" | "large";
    tag: string;
    icon: string;
    href: string;
    to: string | Record<string, unknown>;
    closeable: boolean;
    modelValue: boolean;
    stateful: boolean;
    activeClass: string;
    exactActiveClass: string;
    shadow: boolean;
} & {}> & {
    [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
}, {
    replace: boolean;
    flat: boolean;
    exact: boolean;
    square: boolean;
    color: string;
    outline: boolean;
    target: string;
    append: boolean;
    disabled: boolean;
    size: "small" | "medium" | "large";
    tag: string;
    icon: string;
    href: string;
    to: string | Record<string, unknown>;
    closeable: boolean;
    modelValue: boolean;
    stateful: boolean;
    activeClass: string;
    exactActiveClass: string;
    shadow: boolean;
}>;
export default _default;
