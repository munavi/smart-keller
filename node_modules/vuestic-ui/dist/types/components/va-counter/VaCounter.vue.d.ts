import { InputHTMLAttributes, PropType, ComputedRef } from 'vue';
declare const _default: import("vue").DefineComponent<{
    modelValue: {
        type: PropType<string | number>;
        default: number;
    };
    manualInput: {
        type: PropType<boolean>;
        default: boolean;
    };
    stateful: {
        type: PropType<boolean>;
        default: boolean;
    };
    min: {
        type: PropType<number>;
        default: undefined;
    };
    max: {
        type: PropType<number>;
        default: undefined;
    };
    step: {
        type: PropType<number>;
        default: number;
    };
    label: {
        type: PropType<string>;
        default: string;
    };
    messages: {
        type: PropType<string | string[]>;
        default: () => never[];
    };
    width: {
        type: PropType<string | number>;
        default: string;
    };
    color: {
        type: PropType<string>;
        default: string;
    };
    outline: {
        type: PropType<boolean>;
    };
    bordered: {
        type: PropType<boolean>;
    };
    increaseIcon: {
        type: PropType<string>;
        default: string;
    };
    decreaseIcon: {
        type: PropType<string>;
        default: string;
    };
    buttons: {
        type: PropType<boolean>;
        default: boolean;
    };
    flat: {
        type: PropType<boolean>;
        default: boolean;
    };
    rounded: {
        type: PropType<boolean>;
        default: boolean;
    };
    margins: {
        type: PropType<string | number>;
        default: string;
    };
    textColor: {
        type: PropType<string | undefined>;
        default: undefined;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    input: import("vue").Ref<HTMLInputElement | HTMLDivElement | undefined>;
    valueComputed: import("vue").WritableComputedRef<string | number>;
    isFocused: import("vue").Ref<boolean>;
    fieldListeners: Record<string, any>;
    inputListeners: Record<string, any>;
    inputAttributesComputed: ComputedRef<InputHTMLAttributes>;
    inputWrapperPropsComputed: ComputedRef<{
        color: string;
        outline: boolean | undefined;
        label: string;
        disabled: boolean;
        readonly: boolean;
        bordered: boolean | undefined;
        messages: string | string[];
    }>;
    setCountInput: ({ target }: Event) => void;
    setCountChange: ({ target }: Event) => void;
    decreaseCount: () => void;
    increaseCount: () => void;
    decreaseIconProps: ComputedRef<{
        onClick?: (() => void) | undefined;
        class: {
            'va-counter__icon--inactive': boolean;
        };
        color: string;
        name: string;
    }>;
    increaseIconProps: ComputedRef<{
        onClick?: (() => void) | undefined;
        class: {
            'va-counter__icon--inactive': boolean;
        };
        color: string;
        name: string;
    }>;
    decreaseButtonProps: ComputedRef<{
        icon: string;
        disabled: boolean;
        flat: boolean;
        outline: boolean | undefined;
        color: string;
        textColor: string | undefined;
        rounded: boolean;
    }>;
    increaseButtonProps: ComputedRef<{
        icon: string;
        disabled: boolean;
        flat: boolean;
        outline: boolean | undefined;
        color: string;
        textColor: string | undefined;
        rounded: boolean;
    }>;
    colorComputed: ComputedRef<string>;
    classComputed: ComputedRef<unknown[]>;
    styleComputed: ComputedRef<Partial<CSSStyleDeclaration>>;
    marginComputed: ComputedRef<string>;
}, unknown, {}, {
    focus(): void;
    blur(): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    modelValue?: unknown;
    manualInput?: unknown;
    stateful?: unknown;
    min?: unknown;
    max?: unknown;
    step?: unknown;
    label?: unknown;
    messages?: unknown;
    width?: unknown;
    color?: unknown;
    outline?: unknown;
    bordered?: unknown;
    increaseIcon?: unknown;
    decreaseIcon?: unknown;
    buttons?: unknown;
    flat?: unknown;
    rounded?: unknown;
    margins?: unknown;
    textColor?: unknown;
    disabled?: unknown;
    readonly?: unknown;
} & {
    flat: boolean;
    buttons: boolean;
    width: string | number;
    color: string;
    label: string;
    disabled: boolean;
    readonly: boolean;
    step: number;
    modelValue: string | number;
    stateful: boolean;
    rounded: boolean;
    messages: string | string[];
    manualInput: boolean;
    increaseIcon: string;
    decreaseIcon: string;
    margins: string | number;
} & {
    max?: number | undefined;
    outline?: boolean | undefined;
    min?: number | undefined;
    textColor?: string | undefined;
    bordered?: boolean | undefined;
}> & {
    [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
}, {
    flat: boolean;
    max: number;
    buttons: boolean;
    width: string | number;
    color: string;
    label: string;
    disabled: boolean;
    readonly: boolean;
    step: number;
    min: number;
    textColor: string | undefined;
    modelValue: string | number;
    stateful: boolean;
    rounded: boolean;
    messages: string | string[];
    manualInput: boolean;
    increaseIcon: string;
    decreaseIcon: string;
    margins: string | number;
}>;
export default _default;
