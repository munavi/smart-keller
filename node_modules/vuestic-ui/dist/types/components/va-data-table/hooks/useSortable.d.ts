import { Ref } from 'vue';
import { TableColumn, TableRow, ITableItem, TSortingOrder } from '../types';
interface useSortableProps {
    sortBy: string | undefined;
    sortingOrder: TSortingOrder | undefined;
}
export declare type TSortedArgs = {
    sortBy: string;
    sortingOrder: TSortingOrder;
    items: ITableItem[];
    itemsIndexes: number[];
};
export declare type TSortableEmits = (event: 'update:sortBy' | 'update:sortingOrder' | 'sorted', args: string | TSortingOrder | TSortedArgs) => void;
export default function useSortable(columns: Ref<TableColumn[]>, filteredRows: Ref<TableRow[]>, props: useSortableProps, emit: TSortableEmits): {
    sortBySync: import("vue").WritableComputedRef<string>;
    sortingOrderSync: import("vue").WritableComputedRef<TSortingOrder>;
    toggleSorting: (column: TableColumn) => void;
    sortedRows: import("vue").ComputedRef<TableRow[]>;
};
export {};
