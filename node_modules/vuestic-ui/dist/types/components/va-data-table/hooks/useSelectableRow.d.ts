import { Ref } from 'vue';
import { TableRow, ITableItem, TSelectMode } from '../types';
interface useSelectableProps {
    modelValue: ITableItem[] | undefined;
    selectable: boolean;
    selectMode: TSelectMode;
    [prop: string]: unknown;
}
export declare type TEmits = 'update:modelValue' | 'selectionChange';
export declare type TSelectionChange = {
    currentSelectedItems: ITableItem[];
    previousSelectedItems: ITableItem[];
};
export declare type TSelectableEmits = (event: TEmits, arg: ITableItem[] | TSelectionChange) => void;
export default function useSelectableRow(paginatedRows: Ref<TableRow[]>, props: useSelectableProps, emit: TSelectableEmits): {
    ctrlSelectRow: (row: TableRow) => void;
    shiftSelectRows: (row: TableRow) => void;
    toggleRowSelection: (row: TableRow) => void;
    toggleBulkSelection: () => void;
    isRowSelected: (row: TableRow) => boolean;
    noRowsSelected: import("vue").ComputedRef<boolean>;
    severalRowsSelected: import("vue").ComputedRef<boolean>;
    allRowsSelected: import("vue").ComputedRef<boolean>;
};
export {};
