import { Ref } from 'vue';
import { TableRow, TFilterMethod, ITableItem } from '../types';
interface useFilterableProps {
    filter: string;
    filterMethod: TFilterMethod | undefined;
    [prop: string]: unknown;
}
export declare type TFilteredArgs = {
    items: ITableItem[];
    itemsIndexes: number[];
};
export declare type TFilterableEmits = (event: 'filtered', arg: TFilteredArgs) => void;
export default function useFilterable(rawRows: Ref<TableRow[]>, props: useFilterableProps, emit: TFilterableEmits): {
    filteredRows: import("vue").ComputedRef<TableRow[]>;
};
export {};
