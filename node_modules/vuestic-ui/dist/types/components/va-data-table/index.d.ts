declare const _default: import("vue").DefineComponent<{
    columns: {
        type: import("vue").PropType<import("./types").TTableColumnSource[]>;
        default: () => import("./types").TTableColumnSource[];
    };
    items: {
        type: import("vue").PropType<import("./types").ITableItem[]>;
        default: () => import("./types").ITableItem[];
    };
    modelValue: {
        type: import("vue").PropType<import("./types").ITableItem[]>;
    };
    sortingOrder: {
        type: import("vue").PropType<import("./types").TSortingOrder>;
    };
    sortBy: {
        type: StringConstructor;
    };
    filter: {
        type: StringConstructor;
        default: string;
    };
    filterMethod: {
        type: import("vue").PropType<import("./types").TFilterMethod>;
    };
    hoverable: {
        type: BooleanConstructor;
        default: boolean;
    };
    clickable: {
        type: BooleanConstructor;
        default: boolean;
    };
    animated: {
        type: BooleanConstructor;
        default: boolean;
    };
    selectable: {
        type: BooleanConstructor;
        default: boolean;
    };
    selectMode: {
        type: import("vue").PropType<import("./types").TSelectMode>;
        default: string;
    };
    selectedColor: {
        type: StringConstructor;
        default: string;
    };
    perPage: {
        type: NumberConstructor;
    };
    currentPage: {
        type: NumberConstructor;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    loadingColor: {
        type: StringConstructor;
        default: string;
    };
    noDataHtml: {
        type: StringConstructor;
        default: string;
    };
    noDataFilteredHtml: {
        type: StringConstructor;
        default: string;
    };
    hideDefaultHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    footerClone: {
        type: BooleanConstructor;
        default: boolean;
    };
    allowFooterSorting: {
        type: BooleanConstructor;
        default: boolean;
    };
    striped: {
        type: BooleanConstructor;
        default: boolean;
    };
    stickyHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    height: {
        type: import("vue").PropType<string | number>;
    };
}, {
    columnsComputed: import("vue").ComputedRef<import("./types").TableColumn[]>;
    rows: import("vue").ComputedRef<import("./types").TableRow[]>;
    ctrlSelectRow: (row: import("./types").TableRow) => void;
    shiftSelectRows: (row: import("./types").TableRow) => void;
    toggleBulkSelection: () => void;
    isRowSelected: (row: import("./types").TableRow) => boolean;
    severalRowsSelected: import("vue").ComputedRef<boolean>;
    allRowsSelected: import("vue").ComputedRef<boolean>;
    sortBySync: import("vue").WritableComputedRef<string>;
    sortingOrderSync: import("vue").WritableComputedRef<import("./types").TSortingOrder>;
    toggleSorting: (column: import("./types").TableColumn) => void;
    getHeaderCSSVariables: (column: import("./types").TableColumn) => {
        [x: string]: string;
    };
    rowCSSVariables: import("vue").ComputedRef<Record<string, any>>;
    getCellCSSVariables: (cell: import("./types").TableCell) => {
        [x: string]: "center" | "left" | "top" | "bottom" | "right" | "middle" | (string & Record<never, never>);
    };
    getFooterCSSVariables: (column: import("./types").TableColumn) => {
        [x: string]: string;
    };
    getStickyCSSVariables: () => {
        [x: string]: string | false | 0 | undefined;
    };
    getClasses: (classes?: import("./types").TClassesOptions) => string[];
    getStyles: (styles?: import("./types").TStyleOptions) => Record<string, any>;
    showNoDataHtml: import("vue").ComputedRef<boolean>;
    showNoDataFilteredHtml: import("vue").ComputedRef<boolean>;
    onRowClickHandler: (name: "update:modelValue" | "filtered" | "update:sortBy" | "update:sortingOrder" | "sorted" | "selectionChange" | "row:click" | "row:dblclick" | "row:contextmenu", event: Event, row: import("./types").TableRow) => void;
    componentAttributes: import("vue").ComputedRef<import("vue").HTMLAttributes>;
    tableAttributes: import("vue").ComputedRef<import("vue").TableHTMLAttributes>;
    animationName: import("vue").Ref<string>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "filtered" | "update:sortBy" | "update:sortingOrder" | "sorted" | "selectionChange" | "row:click" | "row:dblclick" | "row:contextmenu")[], "update:modelValue" | "filtered" | "update:sortBy" | "update:sortingOrder" | "sorted" | "selectionChange" | "row:click" | "row:dblclick" | "row:contextmenu", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    columns?: unknown;
    items?: unknown;
    modelValue?: unknown;
    sortingOrder?: unknown;
    sortBy?: unknown;
    filter?: unknown;
    filterMethod?: unknown;
    hoverable?: unknown;
    clickable?: unknown;
    animated?: unknown;
    selectable?: unknown;
    selectMode?: unknown;
    selectedColor?: unknown;
    perPage?: unknown;
    currentPage?: unknown;
    loading?: unknown;
    loadingColor?: unknown;
    noDataHtml?: unknown;
    noDataFilteredHtml?: unknown;
    hideDefaultHeader?: unknown;
    footerClone?: unknown;
    allowFooterSorting?: unknown;
    striped?: unknown;
    stickyHeader?: unknown;
    height?: unknown;
} & {
    filter: string;
    columns: import("./types").TTableColumnSource[];
    loading: boolean;
    items: import("./types").ITableItem[];
    selectable: boolean;
    selectMode: import("./types").TSelectMode;
    hoverable: boolean;
    clickable: boolean;
    animated: boolean;
    selectedColor: string;
    loadingColor: string;
    noDataHtml: string;
    noDataFilteredHtml: string;
    hideDefaultHeader: boolean;
    footerClone: boolean;
    allowFooterSorting: boolean;
    striped: boolean;
    stickyHeader: boolean;
} & {
    height?: string | number | undefined;
    modelValue?: import("./types").ITableItem[] | undefined;
    filterMethod?: import("./types").TFilterMethod | undefined;
    sortBy?: string | undefined;
    sortingOrder?: import("./types").TSortingOrder | undefined;
    perPage?: number | undefined;
    currentPage?: number | undefined;
}> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onFiltered?: ((...args: any[]) => any) | undefined;
    "onUpdate:sortBy"?: ((...args: any[]) => any) | undefined;
    "onUpdate:sortingOrder"?: ((...args: any[]) => any) | undefined;
    onSorted?: ((...args: any[]) => any) | undefined;
    onSelectionChange?: ((...args: any[]) => any) | undefined;
    "onRow:click"?: ((...args: any[]) => any) | undefined;
    "onRow:dblclick"?: ((...args: any[]) => any) | undefined;
    "onRow:contextmenu"?: ((...args: any[]) => any) | undefined;
}, {
    filter: string;
    columns: import("./types").TTableColumnSource[];
    loading: boolean;
    items: import("./types").ITableItem[];
    selectable: boolean;
    selectMode: import("./types").TSelectMode;
    hoverable: boolean;
    clickable: boolean;
    animated: boolean;
    selectedColor: string;
    loadingColor: string;
    noDataHtml: string;
    noDataFilteredHtml: string;
    hideDefaultHeader: boolean;
    footerClone: boolean;
    allowFooterSorting: boolean;
    striped: boolean;
    stickyHeader: boolean;
}>;
export default _default;
