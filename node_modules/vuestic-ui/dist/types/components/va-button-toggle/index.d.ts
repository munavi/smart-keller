declare const _default: import("vue").DefineComponent<{
    options: {
        type: import("vue").PropType<{
            value: any;
            label?: string | undefined;
            icon?: string | undefined;
            iconRight?: string | undefined;
        }[]>;
        required: true;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    textColor: {
        type: StringConstructor;
        default: undefined;
    };
    activeButtonTextColor: {
        type: StringConstructor;
    };
    modelValue: {
        type: import("vue").PropType<string | number>;
        default: string;
    };
    outline: {
        type: BooleanConstructor;
        default: boolean;
    };
    flat: {
        type: BooleanConstructor;
        default: boolean;
    };
    rounded: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<"small" | "medium" | "large">;
        default: string;
        validator: (modelValue: "small" | "medium" | "large") => boolean;
    };
    toggleColor: {
        type: StringConstructor;
        default: string;
    };
    gradient: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    getButtonProps: (option?: {
        value: any;
        label?: string | undefined;
        icon?: string | undefined;
        iconRight?: string | undefined;
    }) => {
        icon: string | undefined;
        iconRight: string | undefined;
    } | {
        outline?: boolean | undefined;
        flat?: boolean | undefined;
        icon: string | undefined;
        iconRight: string | undefined;
        textColor: string;
        color: string;
    };
    getButtonClass: (buttonValue: any) => {
        'va-button--active': boolean;
    };
    changeValue: (value: any) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "update:modelValue"[], "update:modelValue", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    options?: unknown;
    color?: unknown;
    textColor?: unknown;
    activeButtonTextColor?: unknown;
    modelValue?: unknown;
    outline?: unknown;
    flat?: unknown;
    rounded?: unknown;
    disabled?: unknown;
    size?: unknown;
    toggleColor?: unknown;
    gradient?: unknown;
} & {
    flat: boolean;
    color: string;
    outline: boolean;
    disabled: boolean;
    options: {
        value: any;
        label?: string | undefined;
        icon?: string | undefined;
        iconRight?: string | undefined;
    }[];
    size: "small" | "medium" | "large";
    modelValue: string | number;
    gradient: boolean;
    rounded: boolean;
    toggleColor: string;
} & {
    textColor?: string | undefined;
    activeButtonTextColor?: string | undefined;
}> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    flat: boolean;
    color: string;
    outline: boolean;
    disabled: boolean;
    size: "small" | "medium" | "large";
    textColor: string;
    modelValue: string | number;
    gradient: boolean;
    rounded: boolean;
    toggleColor: string;
}>;
export default _default;
