{"version":3,"file":"index7.js","sources":["../../src/components/va-backtop/VaBacktop.vue","../../src/components/va-backtop/VaBacktop.vue?vue&type=template&id=17846d70&lang.js","../../src/components/va-backtop/index.ts"],"sourcesContent":["<template>\n  <div\n    v-if=\"visible\"\n    class=\"va-backtop\"\n    :style=\"computedStyle\"\n    @click=\"scrollToTop\"\n  >\n    <slot>\n      <va-button\n        icon=\"expand_less\"\n        :color=\"color\"\n      />\n    </slot>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType, ref, computed, onMounted, onBeforeUnmount } from 'vue'\nimport VaButton from '../va-button'\n\nexport default defineComponent({\n  name: 'VaBacktop',\n  components: { VaButton },\n  props: {\n    target: {\n      type: [Object, String] as PropType<Element | string | undefined>,\n      default: undefined,\n    },\n\n    visibilityHeight: { type: Number as PropType<number>, default: 300 },\n    speed: { type: Number as PropType<number>, default: 50 },\n    verticalOffset: { type: String as PropType<string>, default: '1rem' },\n    horizontalOffset: { type: String as PropType<string>, default: '1rem' },\n    color: { type: String as PropType<string>, default: '' },\n    horizontalPosition: {\n      type: String as PropType<'right' | 'left'>,\n      default: 'right',\n      validator: (value: string) => ['right', 'left'].includes(value),\n    },\n\n    verticalPosition: {\n      type: String as PropType<'bottom' | 'top'>,\n      default: 'bottom',\n      validator: (value: string) => ['bottom', 'top'].includes(value),\n    },\n  },\n  setup (props) {\n    const visible = ref(false)\n\n    const computedStyle = computed(() => ({\n      [props.verticalPosition]: props.verticalOffset,\n      [props.horizontalPosition]: props.horizontalOffset,\n    }))\n\n    let targetElement: Element | Window\n\n    const getTargetElement = () => {\n      if (!props.target) { return window as Window }\n      if (typeof props.target === 'string') { return document.querySelector(props.target) as Element }\n      return props.target as Element\n    }\n\n    const scrolled = ref(false)\n    const interval = ref(0)\n    const scrollToTop = () => {\n      if (scrolled.value) { return }\n\n      scrolled.value = true\n\n      if (targetElement instanceof Window) {\n        window.scrollTo({\n          top: 0,\n          behavior: 'smooth',\n        })\n\n        return\n      }\n\n      interval.value = window.setInterval(() => {\n        if (targetElement instanceof Element) {\n          if (targetElement.scrollTop === 0) {\n            clearInterval(interval.value)\n            scrolled.value = false\n          } else {\n            const next = Math.floor(targetElement.scrollTop - props.speed)\n            targetElement.scrollTo(0, next)\n          }\n        }\n      }, 15)\n    }\n\n    const handleScroll = () => {\n      const targetScrollValue = targetElement instanceof Window\n        ? targetElement.scrollY\n        : targetElement.scrollTop\n      visible.value = targetScrollValue > props.visibilityHeight\n    }\n\n    onMounted(() => {\n      targetElement = getTargetElement()\n      targetElement.addEventListener('scroll', handleScroll, true)\n    })\n    onBeforeUnmount(() => targetElement?.removeEventListener('scroll', handleScroll))\n\n    return {\n      computedStyle,\n      visible,\n      scrollToTop,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"variables\";\n\n.va-backtop {\n  position: var(--va-backtop-position);\n  top: var(--va-backtop-top);\n  left: var(--va-backtop-left);\n  right: var(--va-backtop-right);\n  bottom: var(--va-backtop-bottom);\n  cursor: var(--va-backtop-cursor);\n  z-index: var(--va-backtop-z-index);\n  font-family: var(--va-font-family);\n}\n</style>\n","<template>\n  <div\n    v-if=\"visible\"\n    class=\"va-backtop\"\n    :style=\"computedStyle\"\n    @click=\"scrollToTop\"\n  >\n    <slot>\n      <va-button\n        icon=\"expand_less\"\n        :color=\"color\"\n      />\n    </slot>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType, ref, computed, onMounted, onBeforeUnmount } from 'vue'\nimport VaButton from '../va-button'\n\nexport default defineComponent({\n  name: 'VaBacktop',\n  components: { VaButton },\n  props: {\n    target: {\n      type: [Object, String] as PropType<Element | string | undefined>,\n      default: undefined,\n    },\n\n    visibilityHeight: { type: Number as PropType<number>, default: 300 },\n    speed: { type: Number as PropType<number>, default: 50 },\n    verticalOffset: { type: String as PropType<string>, default: '1rem' },\n    horizontalOffset: { type: String as PropType<string>, default: '1rem' },\n    color: { type: String as PropType<string>, default: '' },\n    horizontalPosition: {\n      type: String as PropType<'right' | 'left'>,\n      default: 'right',\n      validator: (value: string) => ['right', 'left'].includes(value),\n    },\n\n    verticalPosition: {\n      type: String as PropType<'bottom' | 'top'>,\n      default: 'bottom',\n      validator: (value: string) => ['bottom', 'top'].includes(value),\n    },\n  },\n  setup (props) {\n    const visible = ref(false)\n\n    const computedStyle = computed(() => ({\n      [props.verticalPosition]: props.verticalOffset,\n      [props.horizontalPosition]: props.horizontalOffset,\n    }))\n\n    let targetElement: Element | Window\n\n    const getTargetElement = () => {\n      if (!props.target) { return window as Window }\n      if (typeof props.target === 'string') { return document.querySelector(props.target) as Element }\n      return props.target as Element\n    }\n\n    const scrolled = ref(false)\n    const interval = ref(0)\n    const scrollToTop = () => {\n      if (scrolled.value) { return }\n\n      scrolled.value = true\n\n      if (targetElement instanceof Window) {\n        window.scrollTo({\n          top: 0,\n          behavior: 'smooth',\n        })\n\n        return\n      }\n\n      interval.value = window.setInterval(() => {\n        if (targetElement instanceof Element) {\n          if (targetElement.scrollTop === 0) {\n            clearInterval(interval.value)\n            scrolled.value = false\n          } else {\n            const next = Math.floor(targetElement.scrollTop - props.speed)\n            targetElement.scrollTo(0, next)\n          }\n        }\n      }, 15)\n    }\n\n    const handleScroll = () => {\n      const targetScrollValue = targetElement instanceof Window\n        ? targetElement.scrollY\n        : targetElement.scrollTop\n      visible.value = targetScrollValue > props.visibilityHeight\n    }\n\n    onMounted(() => {\n      targetElement = getTargetElement()\n      targetElement.addEventListener('scroll', handleScroll, true)\n    })\n    onBeforeUnmount(() => targetElement?.removeEventListener('scroll', handleScroll))\n\n    return {\n      computedStyle,\n      visible,\n      scrollToTop,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"variables\";\n\n.va-backtop {\n  position: var(--va-backtop-position);\n  top: var(--va-backtop-top);\n  left: var(--va-backtop-left);\n  right: var(--va-backtop-right);\n  bottom: var(--va-backtop-bottom);\n  cursor: var(--va-backtop-cursor);\n  z-index: var(--va-backtop-z-index);\n  font-family: var(--va-font-family);\n}\n</style>\n","import withConfigTransport from '../../services/config-transport/withConfigTransport'\nimport VaBacktop from './VaBacktop.vue'\n\nexport default withConfigTransport(VaBacktop)\n"],"names":["defineComponent","name","components","VaButton","props","target","type","Object","String","default","undefined","visibilityHeight","Number","speed","verticalOffset","horizontalOffset","color","horizontalPosition","validator","value","includes","verticalPosition","setup","visible","ref","computedStyle","computed","targetElement","scrolled","interval","handleScroll","targetScrollValue","Window","scrollY","scrollTop","onMounted","document","querySelector","window","addEventListener","onBeforeUnmount","removeEventListener","scrollToTop","scrollTo","top","behavior","setInterval","Element","clearInterval","next","Math","floor","_ctx","_mergeProps","class","style","icon","withConfigTransport","VaBacktop"],"mappings":"mrBAoBA,MAAeA,EAAgB,CAC7BC,KAAM,YACNC,WAAY,CAAEC,SAAAA,GACdC,MAAO,CACLC,OAAQ,CACNC,KAAM,CAACC,OAAQC,QACfC,aAASC,GAGXC,iBAAkB,CAAEL,KAAMM,OAA4BH,QAAS,KAC/DI,MAAO,CAAEP,KAAMM,OAA4BH,QAAS,IACpDK,eAAgB,CAAER,KAAME,OAA4BC,QAAS,QAC7DM,iBAAkB,CAAET,KAAME,OAA4BC,QAAS,QAC/DO,MAAO,CAAEV,KAAME,OAA4BC,QAAS,IACpDQ,mBAAoB,CAClBX,KAAME,OACNC,QAAS,QACTS,UAAYC,GAAkB,CAAC,QAAS,QAAQC,SAASD,IAG3DE,iBAAkB,CAChBf,KAAME,OACNC,QAAS,SACTS,UAAYC,GAAkB,CAAC,SAAU,OAAOC,SAASD,KAG7DG,MAAOlB,GACL,MAAMmB,EAAUC,GAAI,GAEdC,EAAgBC,GAAS,MAC7B,CAACtB,EAAMiB,kBAAmBjB,EAAMU,eAChC,CAACV,EAAMa,oBAAqBb,EAAMW,qBAGpC,IAAIY,EAEJ,MAMMC,EAAWJ,GAAI,GACfK,EAAWL,EAAI,GA4BfM,aAAe,KACnB,MAAMC,EAAoBJ,aAAyBK,OAC/CL,EAAcM,QACdN,EAAcO,UAClBX,EAAQJ,MAAQY,EAAoB3B,EAAMO,kBAS5C,OANAwB,GAAU,KACRR,EA1CKvB,EAAMC,OACiB,iBAAjBD,EAAMC,OAA8B+B,SAASC,cAAcjC,EAAMC,QACrED,EAAMC,OAFeiC,OA2C5BX,EAAcY,iBAAiB,SAAUT,cAAc,MAEzDU,GAAgB,IAAMb,MAAAA,SAAAA,EAAec,oBAAoB,SAAUX,gBAE5D,CACLL,cAAAA,EACAF,QAAAA,EACAmB,YA3CkB,KACdd,EAAST,QAEbS,EAAST,OAAQ,EAEbQ,aAAyBK,OAC3BM,OAAOK,SAAS,CACdC,IAAK,EACLC,SAAU,WAMdhB,EAASV,MAAQmB,OAAOQ,aAAY,KAClC,GAAInB,aAAyBoB,QAC3B,GAAgC,IAA5BpB,EAAcO,UAChBc,cAAcnB,EAASV,OACvBS,EAAST,OAAQ,MACZ,CACL,MAAM8B,EAAOC,KAAKC,MAAMxB,EAAcO,UAAY9B,EAAMS,OACxDc,EAAcgB,SAAS,EAAGM,MAG7B,iFCtFCG,sBADRC,GAEEC,MAAM,aACLC,MAAOH,8DAKJI,KAAK,cACJxC,MAAOoC,6GCPhB,MAAeK,EAAoBC"}