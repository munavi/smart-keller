{"version":3,"file":"index42.js","sources":["../../src/composables/useMaxSelections.ts","../../src/components/va-select/VaSelectOptionList/VaSelectOptionList.vue","../../src/utils/scroll-to-element.ts","../../src/components/va-select/VaSelectOptionList/VaSelectOptionList.vue?vue&type=template&id=59030744&lang.js","../../src/components/va-select/VaSelectOptionList/index.ts","../../src/components/va-select/VaSelect.vue","../../src/components/va-select/VaSelect.vue?vue&type=template&id=ef3afb70&lang.js","../../src/components/va-select/index.ts"],"sourcesContent":["import { PropType, Ref } from 'vue'\n\n/**\n * You could add these props to any component by destructuring them inside props option.\n * @example\n * props: { ...useMaxSelectionsProps, componentsOwnProp, etc. }\n * It's better to add props at the beginning, to make sure that Component own props will be used instead in case of collision\n */\nexport const useMaxSelectionsProps = {\n  maxSelections: {\n    type: [Number, String] as PropType<number | string>,\n    default: undefined,\n  },\n}\n\nexport function useMaxSelections (\n  selections: Ref<any[]>,\n  maxSelections: Ref<number | string | undefined>,\n  emit: (event: 'update:modelValue', ...args: any[]) => void,\n) {\n  const exceedsMaxSelections = (): boolean => {\n    if (maxSelections.value === undefined || isNaN(+maxSelections.value)) { return false }\n    return selections.value.length >= maxSelections.value\n  }\n\n  const addOption = (optionToAdd: any): void => {\n    const newSelectedOptions = [...selections.value, optionToAdd]\n    emit('update:modelValue', newSelectedOptions)\n  }\n\n  return {\n    exceedsMaxSelections,\n    addOption,\n  }\n}\n","<template>\n  <div\n    class=\"va-select-option-list\"\n    ref=\"rootElement\"\n    :tabindex=\"tabindex\"\n    @keydown.up.stop.prevent=\"hoverPreviousOption\"\n    @keydown.left.stop.prevent=\"hoverPreviousOption\"\n    @keydown.down.stop.prevent=\"hoverNextOption\"\n    @keydown.right.stop.prevent=\"hoverNextOption\"\n    @scroll.passive=\"onScroll\"\n  >\n    <template\n      v-for=\"(options, groupName) in optionGroups\"\n      :key=\"groupName\"\n    >\n      <span\n        v-if=\"groupName !== '_noGroup'\"\n        class=\"va-select-option-list__group-name\"\n      >\n        {{ groupName }}\n      </span>\n      <div\n        v-for=\"option in options\"\n        :key=\"$props.getTrackBy(option)\"\n        :ref=\"setItemRef(option)\"\n        :class=\"getOptionClass(option)\"\n        :style=\"getOptionStyle(option)\"\n        @click.stop=\"selectOption(option)\"\n        @mouseover=\"updateHoveredOption(option)\"\n      >\n        <va-icon\n          v-if=\"getOptionIcon(option)\"\n          size=\"small\"\n          class=\"va-select-option-list__option--icon\"\n          :name=\"getOptionIcon(option)\"\n        />\n        <span>{{ getText(option) }}</span>\n        <va-icon\n          v-show=\"$props.getSelectedState(option)\"\n          class=\"va-select-option-list__option--selected-icon\"\n          size=\"small\"\n          name=\"done\"\n          :color=\"getColor($props.color)\"\n        />\n      </div>\n    </template>\n    <div\n      v-if=\"!filteredOptions.length\"\n      class=\"va-select-option-list no-options\"\n    >\n      {{ noOptionsText }}\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType, watch, ref, Ref, computed, ComponentPublicInstance } from 'vue'\n\nimport { getHoverColor } from '../../../services/color-config/color-functions'\nimport { useColors, useColorProps } from '../../../composables/useColor'\nimport { SelectableOption } from '../../..//composables/useSelectableList'\nimport VaIcon from '../../va-icon/'\nimport { scrollToElement } from '../../../utils/scroll-to-element'\n\nexport default defineComponent({\n  name: 'VaSelectOptionList',\n  components: { VaIcon },\n  emits: [\n    'select-option',\n    'update:hoveredOption',\n    'no-previous-option-to-hover',\n    'scroll-bottom',\n  ],\n  props: {\n    ...useColorProps,\n    options: { type: Array as PropType<SelectableOption[]>, default: () => [] },\n    noOptionsText: { type: String as PropType<string>, default: 'Items not found' },\n    getSelectedState: { type: Function as PropType<(option: SelectableOption) => boolean>, required: true },\n    getText: { type: Function as PropType<(option: SelectableOption) => string>, required: true },\n    getTrackBy: { type: Function as PropType<(option: SelectableOption) => number>, required: true },\n    getGroupBy: { type: Function as PropType<(option: SelectableOption) => string>, required: true },\n    multiple: { type: Boolean as PropType<boolean>, default: false },\n    search: { type: String as PropType<string>, default: '' },\n    tabindex: { type: Number as PropType<number>, default: 0 },\n    hoveredOption: {\n      type: [String, Number, Object] as PropType<SelectableOption | null>,\n      default: null,\n    },\n  },\n  setup (props, { emit }) {\n    const { getColor } = useColors()\n\n    const itemRefs: Ref<Record<number, HTMLElement>> = ref({})\n    const rootElement: Ref<HTMLElement | null> = ref(null)\n\n    const onScroll = (event: UIEvent) => {\n      const target = event.target as Element\n      if (!target) { return }\n\n      if (target.scrollTop + target.clientHeight === target.scrollHeight) {\n        emit('scroll-bottom')\n      }\n    }\n\n    const beforeUpdate = () => { itemRefs.value = {} }\n\n    const setItemRef = (option: SelectableOption) => (el: Element | null | ComponentPublicInstance) => {\n      if (el) {\n        itemRefs.value[props.getTrackBy(option)] = el as HTMLElement\n      }\n    }\n\n    const hoveredOptionComputed = computed({\n      get: () => props.hoveredOption || null,\n      set: (value: SelectableOption | null) => emit('update:hoveredOption', value),\n    })\n\n    const filteredOptions = computed(() => {\n      if (!props.search) {\n        return props.options\n      }\n\n      return props.options.filter((option: SelectableOption) => {\n        const optionText = props.getText(option).toString().toUpperCase()\n        const search = props.search.toUpperCase()\n        return optionText.includes(search)\n      })\n    })\n\n    const optionGroups = computed(() => filteredOptions.value.reduce((groups: Record<string, SelectableOption[]>, option) => {\n      if (typeof option !== 'object' || !option.group) {\n        groups._noGroup.push(option)\n      } else {\n        const groupBy = props.getGroupBy(option)\n\n        if (!groups[groupBy]) { groups[groupBy] = [] }\n\n        groups[groupBy].push(option)\n      }\n\n      return groups\n    }, { _noGroup: [] }))\n\n    const selectOption = (option: SelectableOption) => emit('select-option', option)\n\n    const getOptionIcon = (option: SelectableOption) => typeof option === 'object' ? (option.icon as string) : undefined\n\n    const getOptionClass = (option: SelectableOption) => ({\n      'va-select-option-list__option': true,\n      'va-select-option-list__option--selected': props.getSelectedState(option),\n    })\n\n    const getOptionStyle = (option: SelectableOption) => ({\n      color: props.getSelectedState(option) ? getColor(props.color) : 'inherit',\n      backgroundColor: isHovered(option) ? getHoverColor(getColor(props.color)) : 'transparent',\n    })\n\n    const isHovered = (option: SelectableOption) => {\n      if (!hoveredOptionComputed.value) { return false }\n      if (typeof option === 'string') { return option === hoveredOptionComputed.value }\n      if (!props.getTrackBy) { return false }\n\n      return props.getTrackBy(hoveredOptionComputed.value) === props.getTrackBy(option)\n    }\n\n    const updateHoveredOption = (option?: SelectableOption) => { hoveredOptionComputed.value = option || null }\n\n    const hoveredOptionIndex = computed(() => filteredOptions.value.findIndex((option) => {\n      return !!hoveredOptionComputed.value && props.getTrackBy(option) === props.getTrackBy(hoveredOptionComputed.value)\n    }))\n\n    const hoverPreviousOption = () => {\n      if (!hoveredOptionComputed.value) {\n        // Hover last option from list\n        filteredOptions.value.length && updateHoveredOption(filteredOptions.value.at(-1))\n      } else {\n        if (filteredOptions.value[hoveredOptionIndex.value - 1]) {\n          hoveredOptionComputed.value = filteredOptions.value[hoveredOptionIndex.value - 1]\n        } else {\n          emit('no-previous-option-to-hover')\n        }\n      }\n    }\n\n    const hoverNextOption = () => {\n      if (!hoveredOptionComputed.value) {\n        // Hover first option from list\n        filteredOptions.value.length && updateHoveredOption(filteredOptions.value[0])\n      } else {\n        if (filteredOptions.value[hoveredOptionIndex.value + 1]) {\n          hoveredOptionComputed.value = filteredOptions.value[hoveredOptionIndex.value + 1]\n        }\n      }\n    }\n\n    const hoverFirstOption = () => {\n      if (filteredOptions.value.length > 0) {\n        updateHoveredOption(filteredOptions.value[0])\n      }\n    }\n\n    const focus = () => {\n      // Prevent scroll since element in dropdown and it cause scrolling to page end.\n      rootElement.value?.focus({ preventScroll: true })\n    }\n\n    const scrollToOption = (option: SelectableOption) => {\n      if (!option) { return }\n\n      const element = itemRefs.value[props.getTrackBy(option)]\n\n      if (element) {\n        scrollToElement(element)\n      }\n    }\n\n    watch(() => props.hoveredOption, (newOption: SelectableOption | null) => newOption && scrollToOption(newOption))\n\n    const publicMethods = {\n      hoverPreviousOption,\n      hoverNextOption,\n      hoverFirstOption,\n      focus,\n      scrollToOption,\n    }\n\n    return {\n      rootElement,\n\n      getColor,\n      filteredOptions,\n      optionGroups,\n      onScroll,\n      beforeUpdate,\n      setItemRef,\n      selectOption,\n      getOptionIcon,\n      getOptionClass,\n      getOptionStyle,\n      updateHoveredOption,\n      ...publicMethods,\n    }\n  },\n\n  // we will use this while we have 'withConfigTransport'\n  methods: {\n    hoverPreviousOption () { (this as any).rootElement?.hoverPreviousOption() },\n    hoverNextOption () { (this as any).rootElement?.hoverNextOption() },\n    hoverFirstOption () { (this as any).rootElement?.hoverFirstOption() },\n    focus () { (this as any).rootElement?.focus() },\n    scrollToOption () { (this as any).rootElement?.scrollToOption() },\n\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"../../../styles/resources\";\n@import \"variables\";\n\n.va-select-option-list {\n  display: var(--va-select-option-list-display);\n  flex-direction: var(--va-select-option-list-flex-direction);\n  width: var(--va-select-option-list-width);\n  list-style: var(--va-select-option-list-list-style);\n  max-height: var(--va-select-option-list-max-height);\n  font-family: var(--va-font-family);\n  overflow: auto;\n\n  @include va-scroll();\n\n  &__group-name {\n    padding: var(--va-select-option-list-group-name-padding);\n    font-size: var(--va-select-option-list-group-name-font-size);\n    color: var(--va-select-option-list-group-name-color);\n    font-weight: var(--va-select-option-list-group-name-font-weight);\n    text-transform: uppercase;\n  }\n\n  &__option {\n    cursor: var(--va-select-option-list-option-cursor);\n    display: var(--va-select-option-list-option-display);\n    align-items: var(--va-select-option-list-option-align-items);\n    padding: var(--va-select-option-list-option-padding);\n    min-height: var(--va-select-option-list-option-min-height);\n    word-break: var(--va-select-option-list-option-word-break);\n\n    &--icon {\n      margin-right: var(--va-select-option-list-icon-margin-right);\n    }\n\n    &--selected-icon {\n      margin-left: var(--va-select-option-list-selected-icon-margin-left);\n      font-size: var(--va-select-option-list-selected-icon-font-size);\n    }\n  }\n\n  &.no-options {\n    padding: 0.5rem;\n  }\n}\n</style>\n","const getTopCoordinate = (element: HTMLElement) => element.offsetTop\nconst getBottomCoordinate = (element: HTMLElement) => element.offsetTop + element.offsetHeight\nconst getCenterCoordinate = (element: HTMLElement) => element.offsetTop + element.offsetHeight / 2\n\nconst getScrollTop = (element: HTMLElement, scrollTarget: HTMLElement, verticalAlignment?: 'start' | 'end' | 'center' | 'any') => {\n  const viewHeight = scrollTarget.offsetHeight\n  const currentPosition = scrollTarget.scrollTop\n  const top = getTopCoordinate(element) - scrollTarget.offsetTop\n  const center = getCenterCoordinate(element) - scrollTarget.offsetTop\n  const bottom = getBottomCoordinate(element) - scrollTarget.offsetTop\n\n  if (verticalAlignment === 'start') {\n    return top\n  }\n\n  if (verticalAlignment === 'end') {\n    return bottom - viewHeight\n  }\n\n  if (verticalAlignment === 'center') {\n    return center - viewHeight / 2\n  }\n\n  if (verticalAlignment === 'any') {\n    if (top - currentPosition < 0) {\n      return top\n    }\n\n    if (bottom - currentPosition > viewHeight) {\n      return bottom - viewHeight\n    }\n  }\n}\n\n/**\n * @param options.scrollTarget - element that will be scrolled\n */\nexport const scrollToElement = (element: HTMLElement, options: {\n  scrollTarget?: HTMLElement,\n  verticalAlignment?: 'start' | 'end' | 'center' | 'any',\n  smooth?: boolean,\n} = {\n  scrollTarget: element.parentElement!,\n  verticalAlignment: 'any',\n  smooth: false,\n}) => {\n  const scrollTarget = options.scrollTarget || element.parentElement!\n\n  const top = getScrollTop(element, scrollTarget, options.verticalAlignment)\n\n  if (top === undefined) { return }\n\n  scrollTarget.scroll({\n    top: top,\n    behavior: options.smooth ? 'smooth' : 'auto',\n  })\n}\n","<template>\n  <div\n    class=\"va-select-option-list\"\n    ref=\"rootElement\"\n    :tabindex=\"tabindex\"\n    @keydown.up.stop.prevent=\"hoverPreviousOption\"\n    @keydown.left.stop.prevent=\"hoverPreviousOption\"\n    @keydown.down.stop.prevent=\"hoverNextOption\"\n    @keydown.right.stop.prevent=\"hoverNextOption\"\n    @scroll.passive=\"onScroll\"\n  >\n    <template\n      v-for=\"(options, groupName) in optionGroups\"\n      :key=\"groupName\"\n    >\n      <span\n        v-if=\"groupName !== '_noGroup'\"\n        class=\"va-select-option-list__group-name\"\n      >\n        {{ groupName }}\n      </span>\n      <div\n        v-for=\"option in options\"\n        :key=\"$props.getTrackBy(option)\"\n        :ref=\"setItemRef(option)\"\n        :class=\"getOptionClass(option)\"\n        :style=\"getOptionStyle(option)\"\n        @click.stop=\"selectOption(option)\"\n        @mouseover=\"updateHoveredOption(option)\"\n      >\n        <va-icon\n          v-if=\"getOptionIcon(option)\"\n          size=\"small\"\n          class=\"va-select-option-list__option--icon\"\n          :name=\"getOptionIcon(option)\"\n        />\n        <span>{{ getText(option) }}</span>\n        <va-icon\n          v-show=\"$props.getSelectedState(option)\"\n          class=\"va-select-option-list__option--selected-icon\"\n          size=\"small\"\n          name=\"done\"\n          :color=\"getColor($props.color)\"\n        />\n      </div>\n    </template>\n    <div\n      v-if=\"!filteredOptions.length\"\n      class=\"va-select-option-list no-options\"\n    >\n      {{ noOptionsText }}\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType, watch, ref, Ref, computed, ComponentPublicInstance } from 'vue'\n\nimport { getHoverColor } from '../../../services/color-config/color-functions'\nimport { useColors, useColorProps } from '../../../composables/useColor'\nimport { SelectableOption } from '../../..//composables/useSelectableList'\nimport VaIcon from '../../va-icon/'\nimport { scrollToElement } from '../../../utils/scroll-to-element'\n\nexport default defineComponent({\n  name: 'VaSelectOptionList',\n  components: { VaIcon },\n  emits: [\n    'select-option',\n    'update:hoveredOption',\n    'no-previous-option-to-hover',\n    'scroll-bottom',\n  ],\n  props: {\n    ...useColorProps,\n    options: { type: Array as PropType<SelectableOption[]>, default: () => [] },\n    noOptionsText: { type: String as PropType<string>, default: 'Items not found' },\n    getSelectedState: { type: Function as PropType<(option: SelectableOption) => boolean>, required: true },\n    getText: { type: Function as PropType<(option: SelectableOption) => string>, required: true },\n    getTrackBy: { type: Function as PropType<(option: SelectableOption) => number>, required: true },\n    getGroupBy: { type: Function as PropType<(option: SelectableOption) => string>, required: true },\n    multiple: { type: Boolean as PropType<boolean>, default: false },\n    search: { type: String as PropType<string>, default: '' },\n    tabindex: { type: Number as PropType<number>, default: 0 },\n    hoveredOption: {\n      type: [String, Number, Object] as PropType<SelectableOption | null>,\n      default: null,\n    },\n  },\n  setup (props, { emit }) {\n    const { getColor } = useColors()\n\n    const itemRefs: Ref<Record<number, HTMLElement>> = ref({})\n    const rootElement: Ref<HTMLElement | null> = ref(null)\n\n    const onScroll = (event: UIEvent) => {\n      const target = event.target as Element\n      if (!target) { return }\n\n      if (target.scrollTop + target.clientHeight === target.scrollHeight) {\n        emit('scroll-bottom')\n      }\n    }\n\n    const beforeUpdate = () => { itemRefs.value = {} }\n\n    const setItemRef = (option: SelectableOption) => (el: Element | null | ComponentPublicInstance) => {\n      if (el) {\n        itemRefs.value[props.getTrackBy(option)] = el as HTMLElement\n      }\n    }\n\n    const hoveredOptionComputed = computed({\n      get: () => props.hoveredOption || null,\n      set: (value: SelectableOption | null) => emit('update:hoveredOption', value),\n    })\n\n    const filteredOptions = computed(() => {\n      if (!props.search) {\n        return props.options\n      }\n\n      return props.options.filter((option: SelectableOption) => {\n        const optionText = props.getText(option).toString().toUpperCase()\n        const search = props.search.toUpperCase()\n        return optionText.includes(search)\n      })\n    })\n\n    const optionGroups = computed(() => filteredOptions.value.reduce((groups: Record<string, SelectableOption[]>, option) => {\n      if (typeof option !== 'object' || !option.group) {\n        groups._noGroup.push(option)\n      } else {\n        const groupBy = props.getGroupBy(option)\n\n        if (!groups[groupBy]) { groups[groupBy] = [] }\n\n        groups[groupBy].push(option)\n      }\n\n      return groups\n    }, { _noGroup: [] }))\n\n    const selectOption = (option: SelectableOption) => emit('select-option', option)\n\n    const getOptionIcon = (option: SelectableOption) => typeof option === 'object' ? (option.icon as string) : undefined\n\n    const getOptionClass = (option: SelectableOption) => ({\n      'va-select-option-list__option': true,\n      'va-select-option-list__option--selected': props.getSelectedState(option),\n    })\n\n    const getOptionStyle = (option: SelectableOption) => ({\n      color: props.getSelectedState(option) ? getColor(props.color) : 'inherit',\n      backgroundColor: isHovered(option) ? getHoverColor(getColor(props.color)) : 'transparent',\n    })\n\n    const isHovered = (option: SelectableOption) => {\n      if (!hoveredOptionComputed.value) { return false }\n      if (typeof option === 'string') { return option === hoveredOptionComputed.value }\n      if (!props.getTrackBy) { return false }\n\n      return props.getTrackBy(hoveredOptionComputed.value) === props.getTrackBy(option)\n    }\n\n    const updateHoveredOption = (option?: SelectableOption) => { hoveredOptionComputed.value = option || null }\n\n    const hoveredOptionIndex = computed(() => filteredOptions.value.findIndex((option) => {\n      return !!hoveredOptionComputed.value && props.getTrackBy(option) === props.getTrackBy(hoveredOptionComputed.value)\n    }))\n\n    const hoverPreviousOption = () => {\n      if (!hoveredOptionComputed.value) {\n        // Hover last option from list\n        filteredOptions.value.length && updateHoveredOption(filteredOptions.value.at(-1))\n      } else {\n        if (filteredOptions.value[hoveredOptionIndex.value - 1]) {\n          hoveredOptionComputed.value = filteredOptions.value[hoveredOptionIndex.value - 1]\n        } else {\n          emit('no-previous-option-to-hover')\n        }\n      }\n    }\n\n    const hoverNextOption = () => {\n      if (!hoveredOptionComputed.value) {\n        // Hover first option from list\n        filteredOptions.value.length && updateHoveredOption(filteredOptions.value[0])\n      } else {\n        if (filteredOptions.value[hoveredOptionIndex.value + 1]) {\n          hoveredOptionComputed.value = filteredOptions.value[hoveredOptionIndex.value + 1]\n        }\n      }\n    }\n\n    const hoverFirstOption = () => {\n      if (filteredOptions.value.length > 0) {\n        updateHoveredOption(filteredOptions.value[0])\n      }\n    }\n\n    const focus = () => {\n      // Prevent scroll since element in dropdown and it cause scrolling to page end.\n      rootElement.value?.focus({ preventScroll: true })\n    }\n\n    const scrollToOption = (option: SelectableOption) => {\n      if (!option) { return }\n\n      const element = itemRefs.value[props.getTrackBy(option)]\n\n      if (element) {\n        scrollToElement(element)\n      }\n    }\n\n    watch(() => props.hoveredOption, (newOption: SelectableOption | null) => newOption && scrollToOption(newOption))\n\n    const publicMethods = {\n      hoverPreviousOption,\n      hoverNextOption,\n      hoverFirstOption,\n      focus,\n      scrollToOption,\n    }\n\n    return {\n      rootElement,\n\n      getColor,\n      filteredOptions,\n      optionGroups,\n      onScroll,\n      beforeUpdate,\n      setItemRef,\n      selectOption,\n      getOptionIcon,\n      getOptionClass,\n      getOptionStyle,\n      updateHoveredOption,\n      ...publicMethods,\n    }\n  },\n\n  // we will use this while we have 'withConfigTransport'\n  methods: {\n    hoverPreviousOption () { (this as any).rootElement?.hoverPreviousOption() },\n    hoverNextOption () { (this as any).rootElement?.hoverNextOption() },\n    hoverFirstOption () { (this as any).rootElement?.hoverFirstOption() },\n    focus () { (this as any).rootElement?.focus() },\n    scrollToOption () { (this as any).rootElement?.scrollToOption() },\n\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"../../../styles/resources\";\n@import \"variables\";\n\n.va-select-option-list {\n  display: var(--va-select-option-list-display);\n  flex-direction: var(--va-select-option-list-flex-direction);\n  width: var(--va-select-option-list-width);\n  list-style: var(--va-select-option-list-list-style);\n  max-height: var(--va-select-option-list-max-height);\n  font-family: var(--va-font-family);\n  overflow: auto;\n\n  @include va-scroll();\n\n  &__group-name {\n    padding: var(--va-select-option-list-group-name-padding);\n    font-size: var(--va-select-option-list-group-name-font-size);\n    color: var(--va-select-option-list-group-name-color);\n    font-weight: var(--va-select-option-list-group-name-font-weight);\n    text-transform: uppercase;\n  }\n\n  &__option {\n    cursor: var(--va-select-option-list-option-cursor);\n    display: var(--va-select-option-list-option-display);\n    align-items: var(--va-select-option-list-option-align-items);\n    padding: var(--va-select-option-list-option-padding);\n    min-height: var(--va-select-option-list-option-min-height);\n    word-break: var(--va-select-option-list-option-word-break);\n\n    &--icon {\n      margin-right: var(--va-select-option-list-icon-margin-right);\n    }\n\n    &--selected-icon {\n      margin-left: var(--va-select-option-list-selected-icon-margin-left);\n      font-size: var(--va-select-option-list-selected-icon-font-size);\n    }\n  }\n\n  &.no-options {\n    padding: 0.5rem;\n  }\n}\n</style>\n","import withConfigTransport from '../../../services/config-transport/withConfigTransport'\nimport VaSelectOptionList from './VaSelectOptionList.vue'\n\nexport default withConfigTransport(VaSelectOptionList)\n","<template>\n  <va-dropdown\n    ref=\"dropdown\"\n    class=\"va-select__dropdown va-select-dropdown\"\n    trigger=\"none\"\n    anchorSelector=\".va-input-wrapper__input\"\n    :placement=\"$props.placement\"\n    :disabled=\"$props.disabled\"\n    :max-height=\"$props.maxHeight\"\n    :fixed=\"$props.fixed\"\n    :close-on-content-click=\"closeOnContentClick\"\n    :stateful=\"false\"\n    :offset=\"[1, 0]\"\n    keep-anchor-width\n    v-model=\"showDropdownContentComputed\"\n    @keydown.up.stop.prevent=\"showDropdown()\"\n    @keydown.down.stop.prevent=\"showDropdown()\"\n    @keydown.space.stop.prevent=\"showDropdown()\"\n    @keydown.enter.stop.prevent=\"showDropdown()\"\n    @click.prevent=\"onSelectClick()\"\n  >\n    <template #anchor>\n      <div class=\"va-select\">\n        <va-input\n          ref=\"input\"\n          :model-value=\"valueComputedString\"\n          :success=\"$props.success\"\n          :error=\"computedError\"\n          :color=\"$props.color\"\n          :label=\"$props.label\"\n          :placeholder=\"$props.placeholder\"\n          :loading=\"$props.loading\"\n          :disabled=\"$props.disabled\"\n          :outline=\"$props.outline\"\n          :bordered=\"$props.bordered\"\n          :required-mark=\"$props.requiredMark\"\n          :tabindex=\"tabIndexComputed\"\n          :messages=\"$props.messages\"\n          :error-messages=\"computedErrorMessages\"\n          readonly\n          @focus=\"onInputFocus()\"\n          @blur=\"onInputBlur()\"\n        >\n          <template\n            v-if=\"$slots.prepend\"\n            #prepend\n          >\n            <slot name=\"prepend\" />\n          </template>\n\n          <template\n            v-if=\"$slots.append\"\n            #append\n          >\n            <slot name=\"append\" />\n          </template>\n\n          <template\n            v-if=\"$slots.prependInner\"\n            #prependInner\n          >\n            <slot name=\"prependInner\" />\n          </template>\n\n          <template #icon>\n            <va-icon\n              v-if=\"showClearIcon\"\n              v-bind=\"clearIconProps\"\n              @click.stop=\"reset()\"\n            />\n          </template>\n\n          <template #appendInner>\n            <slot\n              v-if=\"$slots.appendInner\"\n              name=\"appendInner\"\n            />\n            <va-icon\n              :color=\"toggleIconColor\"\n              :name=\"toggleIcon\"\n            />\n          </template>\n\n          <template\n            v-if=\"$slots.content\"\n            #content\n          >\n            <slot\n              name=\"content\"\n              v-bind=\"{ valueString: valueComputedString, value: valueComputed }\"\n            />\n          </template>\n        </va-input>\n      </div>\n    </template>\n\n    <!-- Stop propagation for enter keyup event, to prevent VaDropdown closing -->\n    <va-dropdown-content\n      class=\"va-select-dropdown__content\"\n      :style=\"{ width: $props.width }\"\n      @keyup.enter.stop\n      @keydown.tab.stop.prevent\n      @keydown.esc.prevent=\"hideAndFocus()\"\n    >\n      <va-input\n        v-if=\"showSearchInput\"\n        ref=\"searchBar\"\n        class=\"va-select__input\"\n        placeholder=\"Search\"\n        :tabindex=\"tabindex + 1\"\n        :bordered=\"true\"\n        v-model=\"searchInput\"\n        @keydown.up.stop.prevent=\"hoverPreviousOption()\"\n        @keydown.left.stop.prevent=\"hoverPreviousOption()\"\n        @keydown.down.stop.prevent=\"hoverNextOption()\"\n        @keydown.right.stop.prevent=\"hoverNextOption()\"\n        @keydown.enter.prevent=\"selectOrAddOption()\"\n        @focus=\"hoveredOption = null\"\n      />\n      <div class=\"va-select-dropdown__options-wrapper\">\n        <va-select-option-list\n          ref=\"optionList\"\n          v-model:hoveredOption=\"hoveredOption\"\n          :style=\"{ maxHeight: $props.maxHeight }\"\n          :options=\"filteredOptions\"\n          :selected-value=\"valueComputed\"\n          :get-selected-state=\"checkIsOptionSelected\"\n          :get-text=\"getText\"\n          :get-track-by=\"getTrackBy\"\n          :get-group-by=\"getGroupBy\"\n          :search=\"searchInput\"\n          :no-options-text=\"$props.noOptionsText\"\n          :color=\"$props.color\"\n          :tabindex=\"tabindex + 1\"\n          @select-option=\"selectOption\"\n          @no-previous-option-to-hover=\"focusSearchBar()\"\n          @keydown.enter.stop.prevent=\"selectHoveredOption()\"\n          @keydown.space.stop.prevent=\"selectHoveredOption()\"\n          @keydown.tab.stop.prevent=\"searchBar && searchBar.focus()\"\n          @keydown=\"onHintedSearch\"\n          @scroll-bottom=\"onScrollBottom\"\n        />\n      </div>\n    </va-dropdown-content>\n  </va-dropdown>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType, ref, computed, watch, nextTick, Ref } from 'vue'\n\nimport { useSelectableList, useSelectableListProps, SelectableOption } from '../../composables/useSelectableList'\nimport { useValidation, useValidationProps, useValidationEmits } from '../../composables/useValidation'\nimport { useFormProps } from '../../composables/useForm'\nimport { useLoadingProps } from '../../composables/useLoading'\nimport { useColor } from '../../composables/useColor'\nimport { useMaxSelections, useMaxSelectionsProps } from '../../composables/useMaxSelections'\nimport { useClearableProps, useClearable, useClearableEmits } from '../../composables/useClearable'\nimport { Placement } from '../../composables/usePopover'\nimport { useColors } from '../../services/color-config/color-config'\nimport { warn } from '../../services/utils'\nimport VaDropdown, { VaDropdownContent } from '../va-dropdown'\nimport VaIcon from '../va-icon'\nimport VaInput from '../va-input'\nimport VaSelectOptionList from './VaSelectOptionList'\nimport { useFocus } from '../../composables/useFocus'\n\ntype DropdownIcon = {\n  open: string,\n  close: string\n}\n\nexport default defineComponent({\n  name: 'VaSelect',\n\n  components: {\n    VaSelectOptionList,\n    VaIcon,\n    VaDropdown,\n    VaDropdownContent,\n    VaInput,\n  },\n\n  emits: [\n    'update:modelValue',\n    'update-search',\n    'create-new',\n    'scroll-bottom',\n    ...useValidationEmits,\n    ...useClearableEmits,\n  ],\n\n  props: {\n    ...useSelectableListProps,\n    ...useValidationProps,\n    ...useLoadingProps,\n    ...useMaxSelectionsProps,\n    ...useClearableProps,\n    ...useFormProps,\n\n    modelValue: {\n      type: [String, Number, Object] as PropType<SelectableOption>,\n      default: '',\n    },\n\n    // Dropdown placement\n    placement: {\n      type: String as PropType<Partial<Placement>>,\n      default: 'bottom',\n      validator: (placement: string) => ['top', 'bottom'].includes(placement),\n    },\n\n    allowCreate: {\n      type: [Boolean, String] as PropType<boolean | 'unique'>,\n      default: false,\n      validator: (mode: string | boolean) => [true, false, 'unique'].includes(mode),\n    },\n\n    color: { type: String as PropType<string>, default: 'primary' },\n    multiple: { type: Boolean as PropType<boolean>, default: false },\n    searchable: { type: Boolean as PropType<boolean>, default: false },\n    separator: { type: String as PropType<string>, default: ', ' },\n    width: { type: String as PropType<string>, default: '100%' },\n    maxHeight: { type: String as PropType<string>, default: '256px' },\n    noOptionsText: { type: String as PropType<string>, default: 'Items not found' },\n    fixed: { type: Boolean as PropType<boolean>, default: true },\n    hideSelected: { type: Boolean as PropType<boolean>, default: false },\n    tabindex: { type: Number as PropType<number>, default: 0 },\n    dropdownIcon: {\n      type: [String, Object] as PropType<string | DropdownIcon>,\n      default: (): DropdownIcon => ({\n        open: 'expand_more',\n        close: 'expand_less',\n      }),\n      validator: (value: string | DropdownIcon) => {\n        if (typeof value === 'string') { return true }\n\n        const isOpenIconString = typeof value.open === 'string'\n        const isCloseIconString = typeof value.close === 'string'\n\n        return isOpenIconString && isCloseIconString\n      },\n    },\n\n    // Input style\n    outline: { type: Boolean as PropType<boolean>, default: false },\n    bordered: { type: Boolean as PropType<boolean>, default: false },\n    label: { type: String as PropType<string>, default: '' },\n    placeholder: { type: String as PropType<string>, default: '' },\n    requiredMark: { type: Boolean as PropType<boolean>, default: false },\n  },\n\n  setup (props, { emit }) {\n    const optionList = ref<typeof VaSelectOptionList>()\n    const input = ref<typeof VaInput>()\n    const searchBar = ref<typeof VaInput>()\n    const { isFocused } = useFocus()\n\n    const { getHoverColor } = useColors()\n    const { getOptionByValue, getValue, getText, getTrackBy, getGroupBy } = useSelectableList(props)\n\n    const {\n      validate,\n      computedError,\n      computedErrorMessages,\n    } = useValidation(props, emit, () => reset(), () => focus())\n\n    const { colorComputed } = useColor(props)\n    const toggleIconColor = computed(() => props.readonly ? getHoverColor(colorComputed.value) : colorComputed.value)\n\n    const onScrollBottom = () => {\n      emit('scroll-bottom')\n    }\n\n    const searchInput = ref('')\n    const showSearchInput = computed(() => props.searchable || props.allowCreate)\n\n    watch(searchInput, (value) => {\n      emit('update-search', value)\n      hoveredOption.value = null\n    })\n\n    // Select value\n\n    const valueComputed = computed<SelectableOption | SelectableOption[]>({\n      get () {\n        const value = getOptionByValue(props.modelValue)\n\n        if (props.multiple) {\n          if (!value) {\n            return []\n          }\n\n          if (!Array.isArray(value)) {\n            return [value]\n          }\n\n          return value\n        }\n\n        if (Array.isArray(value)) {\n          warn('Model value should be a string or a number for a single Select.')\n\n          if (value.length) {\n            return value[value.length - 1]\n          }\n        }\n\n        return value\n      },\n\n      set (value: SelectableOption | SelectableOption[]) {\n        if (Array.isArray(value)) {\n          emit('update:modelValue', value.map(getValue))\n        } else {\n          emit('update:modelValue', getValue(value))\n        }\n      },\n    })\n\n    const valueComputedString = computed(() => {\n      if (!valueComputed.value) { return props.clearValue }\n      if (typeof valueComputed.value === 'string' || typeof valueComputed.value === 'number') { return valueComputed.value }\n      if (Array.isArray(valueComputed.value)) {\n        return valueComputed.value.map((value) => getText(value)).join(props.separator) || props.clearValue\n      }\n\n      return getText(valueComputed.value)\n    })\n\n    // Icons\n    const {\n      canBeCleared,\n      clearIconProps,\n      onFocus,\n      onBlur,\n    } = useClearable(props, valueComputed)\n\n    const showClearIcon = computed(() => {\n      return props.multiple && Array.isArray(valueComputed.value) ? !!valueComputed.value.length : canBeCleared.value\n    })\n\n    const toggleIcon = computed(() => {\n      if (!props.dropdownIcon) { return '' }\n\n      if (typeof props.dropdownIcon === 'string') {\n        return props.dropdownIcon\n      }\n\n      return showDropdownContent.value ? props.dropdownIcon.close : props.dropdownIcon.open\n    })\n\n    // Options\n\n    const filteredOptions = computed(() => {\n      if (!props.options) { return [] }\n\n      if (props.hideSelected) {\n        return props.options.filter((option) => !checkIsOptionSelected(option))\n      }\n\n      return props.options\n    })\n\n    const checkIsOptionSelected = (option: SelectableOption) => {\n      if (!valueComputed.value) { return false }\n\n      if (Array.isArray(valueComputed.value)) {\n        return !!valueComputed.value.find((valueItem) => compareOptions(valueItem, option))\n      }\n\n      return compareOptions(valueComputed.value, option)\n    }\n\n    const compareOptions = (option1: SelectableOption, option2: SelectableOption) => {\n      const one = getValue(option1)\n      const two = getValue(option2)\n\n      // identity check works nice for strings and exact matches.\n      if (one === two) {\n        return true\n      }\n      if (typeof one === 'string' && typeof two === 'string') {\n        return one === two\n      }\n      if (one === null || two === null) {\n        return false\n      }\n      if (typeof one === 'object' && typeof two === 'object') {\n        return getTrackBy(one) === getTrackBy(two)\n      }\n\n      return false\n    }\n\n    const isValueComputedArray = (v: Ref<SelectableOption | SelectableOption[]>): v is Ref<SelectableOption[]> => Array.isArray(v.value)\n\n    const selectOption = (option: SelectableOption) => {\n      if (hoveredOption.value === null) {\n        hideAndFocus()\n        return\n      }\n\n      if (showSearchInput.value) {\n        searchInput.value = ''\n      }\n\n      if (props.multiple && isValueComputedArray(valueComputed)) {\n        const { exceedsMaxSelections, addOption } = useMaxSelections(valueComputed, ref(props.maxSelections), emit)\n\n        const isSelected = checkIsOptionSelected(getValue(option))\n\n        if (isSelected) {\n          // Unselect\n          valueComputed.value = valueComputed.value.filter((optionSelected) => !compareOptions(getValue(option), getValue(optionSelected)))\n        } else {\n          if (exceedsMaxSelections()) { return }\n          addOption(getValue(option))\n        }\n      } else {\n        valueComputed.value = typeof option === 'string' || typeof option === 'number' ? option : { ...option }\n        hideAndFocus()\n      }\n    }\n\n    const addNewOption = () => {\n      // Do not emit if option already exist and allow create is `unique`\n      const hasAddedOption = props.options?.some((option: SelectableOption) => getText(option) === searchInput.value)\n\n      if (!(props.allowCreate === 'unique' && hasAddedOption)) {\n        emit('create-new', searchInput.value)\n        searchInput.value = ''\n      }\n    }\n\n    // Hovered options\n\n    const hoveredOption = ref<SelectableOption | null>(null)\n\n    const selectHoveredOption = () => {\n      if (!hoveredOption.value) { return }\n\n      if (!showDropdownContent.value) {\n        // We can not select options if they are hidden\n        showDropdown()\n        return\n      }\n\n      selectOption(hoveredOption.value)\n    }\n\n    const selectOrAddOption = () => {\n      const allowedToCreate = !!props.allowCreate && searchInput.value !== ''\n\n      if (hoveredOption.value !== null) {\n        selectHoveredOption()\n      } else if (allowedToCreate) {\n        addNewOption()\n      }\n    }\n\n    const hoverPreviousOption = () => {\n      optionList.value?.hoverPreviousOption()\n    }\n\n    const hoverNextOption = () => {\n      optionList.value?.hoverNextOption()\n    }\n\n    // Dropdown content\n\n    const showDropdownContent = ref(false)\n\n    const showDropdownContentComputed = computed({\n      get: () => showDropdownContent.value,\n      set: (show: boolean) => {\n        show ? showDropdown() : hideDropdown()\n      },\n    })\n\n    const closeOnContentClick = computed(() => {\n      return !(props.multiple || props.searchable || props.allowCreate)\n    })\n\n    const showDropdown = () => {\n      if (props.disabled || props.readonly) { return }\n\n      showDropdownContent.value = true\n      scrollToSelected()\n      focusSearchOrOptions()\n    }\n\n    const hideDropdown = () => {\n      showDropdownContent.value = false\n      searchInput.value = ''\n      validate()\n    }\n\n    const toggleDropdown = () => {\n      if (showDropdownContent.value) {\n        hideAndFocus()\n      } else {\n        showDropdown()\n      }\n    }\n\n    const onSelectClick = () => {\n      if (props.disabled || props.readonly) { return }\n      toggleDropdown()\n    }\n\n    const hideAndFocus = () => {\n      hideDropdown()\n      input.value?.focus()\n    }\n\n    const focusSearchBar = () => {\n      searchBar.value?.focus()\n    }\n\n    const focusOptionList = () => {\n      optionList.value?.focus()\n      !props.modelValue && optionList.value?.hoverFirstOption()\n    }\n\n    const focusSearchOrOptions = () => nextTick(() => {\n      if (showSearchInput.value) {\n        focusSearchBar()\n      } else {\n        focusOptionList()\n      }\n    })\n\n    const onInputFocus = () => {\n      isFocused.value = true\n      onFocus()\n    }\n\n    const onInputBlur = () => {\n      if (showDropdownContentComputed.value) { return }\n\n      onBlur()\n\n      isFocused.value\n        ? isFocused.value = false\n        : validate()\n    }\n\n    /** @public */\n    const focus = () => {\n      if (props.disabled) { return }\n      input.value?.focus()\n    }\n\n    /** @public */\n    const blur = () => {\n      if (showDropdownContentComputed.value) {\n        showDropdownContentComputed.value = false\n      }\n\n      nextTick(input.value?.blur)\n    }\n\n    /** @public */\n    const reset = () => {\n      if (props.multiple) {\n        valueComputed.value = Array.isArray(props.clearValue) ? props.clearValue : []\n      } else {\n        valueComputed.value = props.clearValue\n      }\n\n      searchInput.value = ''\n      emit('clear')\n    }\n\n    const tabIndexComputed = computed(() => props.disabled ? -1 : props.tabindex)\n\n    const scrollToSelected = () => {\n      const selected = valueComputed.value\n      const nothingSelected = typeof selected !== 'object' && Array.isArray(selected) && !selected.length\n\n      if (nothingSelected) { return }\n\n      const scrollTo = Array.isArray(selected) ? selected[selected.length - 1] : selected\n      hoveredOption.value = scrollTo\n      nextTick(() => optionList.value?.scrollToOption(scrollTo))\n    }\n\n    // Hinted search\n\n    let hintedSearchQuery = ''\n    let hintedSearchQueryTimeoutIndex!: ReturnType<typeof setTimeout>\n    const navigationKeys = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'Enter', ' ']\n\n    // Hinted search - hover option if you typing it's value on select without search-bar\n    const onHintedSearch = (event: KeyboardEvent) => {\n      if (navigationKeys.some(key => key === event.key)) {\n        return\n      }\n\n      const isLetter: boolean = event.key.length === 1\n      const isDeleteKey: boolean = event.key === 'Backspace' || event.key === 'Delete'\n\n      clearTimeout(hintedSearchQueryTimeoutIndex)\n\n      if (isDeleteKey) {\n        // Remove last letter from query\n        hintedSearchQuery = hintedSearchQuery ? hintedSearchQuery.slice(0, -1) : ''\n      } else if (isLetter) {\n        // Add every new letter to the query\n        hintedSearchQuery += event.key\n      }\n\n      if (showSearchInput.value) {\n        searchInput.value = hintedSearchQuery\n        return\n      }\n\n      // Search for an option that matches the query\n      if (hintedSearchQuery) {\n        const appropriateOption = props.options.find(option => getText(option).toLowerCase().startsWith(hintedSearchQuery.toLowerCase()))\n        if (appropriateOption) {\n          hoveredOption.value = appropriateOption\n        }\n      }\n\n      hintedSearchQueryTimeoutIndex = setTimeout(() => { hintedSearchQuery = '' }, 1000)\n    }\n\n    return {\n      input,\n      optionList,\n      searchBar,\n\n      // while we have problem with 'withConfigTransport'\n      // focus,\n      // blur,\n\n      onInputFocus,\n      onInputBlur,\n      focusOptionList,\n      reset,\n      onSelectClick,\n      focusSearchBar,\n      searchInput,\n      showSearchInput,\n      hoveredOption,\n      tabIndexComputed,\n      valueComputed,\n      valueComputedString,\n      showClearIcon,\n      toggleIcon,\n      computedErrorMessages,\n      computedError,\n      filteredOptions,\n      checkIsOptionSelected,\n      closeOnContentClick,\n      selectOption,\n      selectOrAddOption,\n      selectHoveredOption,\n      hoverPreviousOption,\n      hoverNextOption,\n      showDropdownContentComputed,\n      showDropdown,\n      hideDropdown,\n      hideAndFocus,\n      toggleDropdown,\n      toggleIconColor,\n      onHintedSearch,\n      getText,\n      getTrackBy,\n      getGroupBy,\n      onScrollBottom,\n      clearIconProps,\n    }\n  },\n  // we will use this while we have problem with 'withConfigTransport'\n  methods: {\n    focus () {\n      if (this.$props.disabled) { return }\n      this.input?.focus()\n    },\n    blur () {\n      if (this.showDropdownContentComputed) {\n        this.showDropdownContentComputed = false\n      }\n\n      nextTick(this.input?.blur)\n    },\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"../../styles/resources\";\n@import \"variables\";\n\n.va-select {\n  cursor: var(--va-select-cursor);\n\n  .va-input {\n    cursor: var(--va-select-cursor);\n  }\n}\n\n.va-select-dropdown {\n  .va-dropdown__anchor {\n    display: block;\n  }\n\n  &__content {\n    overflow: hidden;\n    border-bottom-right-radius: var(--va-select-dropdown-border-radius);\n    border-bottom-left-radius: var(--va-select-dropdown-border-radius);\n    border-top-right-radius: 0;\n    border-top-left-radius: 0;\n    box-shadow: var(--va-select-box-shadow);\n    padding: 0;\n  }\n\n  &__options-wrapper {\n    background: var(--va-select-dropdown-background);\n    overflow-y: auto;\n\n    @include va-scroll();\n  }\n}\n</style>\n","<template>\n  <va-dropdown\n    ref=\"dropdown\"\n    class=\"va-select__dropdown va-select-dropdown\"\n    trigger=\"none\"\n    anchorSelector=\".va-input-wrapper__input\"\n    :placement=\"$props.placement\"\n    :disabled=\"$props.disabled\"\n    :max-height=\"$props.maxHeight\"\n    :fixed=\"$props.fixed\"\n    :close-on-content-click=\"closeOnContentClick\"\n    :stateful=\"false\"\n    :offset=\"[1, 0]\"\n    keep-anchor-width\n    v-model=\"showDropdownContentComputed\"\n    @keydown.up.stop.prevent=\"showDropdown()\"\n    @keydown.down.stop.prevent=\"showDropdown()\"\n    @keydown.space.stop.prevent=\"showDropdown()\"\n    @keydown.enter.stop.prevent=\"showDropdown()\"\n    @click.prevent=\"onSelectClick()\"\n  >\n    <template #anchor>\n      <div class=\"va-select\">\n        <va-input\n          ref=\"input\"\n          :model-value=\"valueComputedString\"\n          :success=\"$props.success\"\n          :error=\"computedError\"\n          :color=\"$props.color\"\n          :label=\"$props.label\"\n          :placeholder=\"$props.placeholder\"\n          :loading=\"$props.loading\"\n          :disabled=\"$props.disabled\"\n          :outline=\"$props.outline\"\n          :bordered=\"$props.bordered\"\n          :required-mark=\"$props.requiredMark\"\n          :tabindex=\"tabIndexComputed\"\n          :messages=\"$props.messages\"\n          :error-messages=\"computedErrorMessages\"\n          readonly\n          @focus=\"onInputFocus()\"\n          @blur=\"onInputBlur()\"\n        >\n          <template\n            v-if=\"$slots.prepend\"\n            #prepend\n          >\n            <slot name=\"prepend\" />\n          </template>\n\n          <template\n            v-if=\"$slots.append\"\n            #append\n          >\n            <slot name=\"append\" />\n          </template>\n\n          <template\n            v-if=\"$slots.prependInner\"\n            #prependInner\n          >\n            <slot name=\"prependInner\" />\n          </template>\n\n          <template #icon>\n            <va-icon\n              v-if=\"showClearIcon\"\n              v-bind=\"clearIconProps\"\n              @click.stop=\"reset()\"\n            />\n          </template>\n\n          <template #appendInner>\n            <slot\n              v-if=\"$slots.appendInner\"\n              name=\"appendInner\"\n            />\n            <va-icon\n              :color=\"toggleIconColor\"\n              :name=\"toggleIcon\"\n            />\n          </template>\n\n          <template\n            v-if=\"$slots.content\"\n            #content\n          >\n            <slot\n              name=\"content\"\n              v-bind=\"{ valueString: valueComputedString, value: valueComputed }\"\n            />\n          </template>\n        </va-input>\n      </div>\n    </template>\n\n    <!-- Stop propagation for enter keyup event, to prevent VaDropdown closing -->\n    <va-dropdown-content\n      class=\"va-select-dropdown__content\"\n      :style=\"{ width: $props.width }\"\n      @keyup.enter.stop\n      @keydown.tab.stop.prevent\n      @keydown.esc.prevent=\"hideAndFocus()\"\n    >\n      <va-input\n        v-if=\"showSearchInput\"\n        ref=\"searchBar\"\n        class=\"va-select__input\"\n        placeholder=\"Search\"\n        :tabindex=\"tabindex + 1\"\n        :bordered=\"true\"\n        v-model=\"searchInput\"\n        @keydown.up.stop.prevent=\"hoverPreviousOption()\"\n        @keydown.left.stop.prevent=\"hoverPreviousOption()\"\n        @keydown.down.stop.prevent=\"hoverNextOption()\"\n        @keydown.right.stop.prevent=\"hoverNextOption()\"\n        @keydown.enter.prevent=\"selectOrAddOption()\"\n        @focus=\"hoveredOption = null\"\n      />\n      <div class=\"va-select-dropdown__options-wrapper\">\n        <va-select-option-list\n          ref=\"optionList\"\n          v-model:hoveredOption=\"hoveredOption\"\n          :style=\"{ maxHeight: $props.maxHeight }\"\n          :options=\"filteredOptions\"\n          :selected-value=\"valueComputed\"\n          :get-selected-state=\"checkIsOptionSelected\"\n          :get-text=\"getText\"\n          :get-track-by=\"getTrackBy\"\n          :get-group-by=\"getGroupBy\"\n          :search=\"searchInput\"\n          :no-options-text=\"$props.noOptionsText\"\n          :color=\"$props.color\"\n          :tabindex=\"tabindex + 1\"\n          @select-option=\"selectOption\"\n          @no-previous-option-to-hover=\"focusSearchBar()\"\n          @keydown.enter.stop.prevent=\"selectHoveredOption()\"\n          @keydown.space.stop.prevent=\"selectHoveredOption()\"\n          @keydown.tab.stop.prevent=\"searchBar && searchBar.focus()\"\n          @keydown=\"onHintedSearch\"\n          @scroll-bottom=\"onScrollBottom\"\n        />\n      </div>\n    </va-dropdown-content>\n  </va-dropdown>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType, ref, computed, watch, nextTick, Ref } from 'vue'\n\nimport { useSelectableList, useSelectableListProps, SelectableOption } from '../../composables/useSelectableList'\nimport { useValidation, useValidationProps, useValidationEmits } from '../../composables/useValidation'\nimport { useFormProps } from '../../composables/useForm'\nimport { useLoadingProps } from '../../composables/useLoading'\nimport { useColor } from '../../composables/useColor'\nimport { useMaxSelections, useMaxSelectionsProps } from '../../composables/useMaxSelections'\nimport { useClearableProps, useClearable, useClearableEmits } from '../../composables/useClearable'\nimport { Placement } from '../../composables/usePopover'\nimport { useColors } from '../../services/color-config/color-config'\nimport { warn } from '../../services/utils'\nimport VaDropdown, { VaDropdownContent } from '../va-dropdown'\nimport VaIcon from '../va-icon'\nimport VaInput from '../va-input'\nimport VaSelectOptionList from './VaSelectOptionList'\nimport { useFocus } from '../../composables/useFocus'\n\ntype DropdownIcon = {\n  open: string,\n  close: string\n}\n\nexport default defineComponent({\n  name: 'VaSelect',\n\n  components: {\n    VaSelectOptionList,\n    VaIcon,\n    VaDropdown,\n    VaDropdownContent,\n    VaInput,\n  },\n\n  emits: [\n    'update:modelValue',\n    'update-search',\n    'create-new',\n    'scroll-bottom',\n    ...useValidationEmits,\n    ...useClearableEmits,\n  ],\n\n  props: {\n    ...useSelectableListProps,\n    ...useValidationProps,\n    ...useLoadingProps,\n    ...useMaxSelectionsProps,\n    ...useClearableProps,\n    ...useFormProps,\n\n    modelValue: {\n      type: [String, Number, Object] as PropType<SelectableOption>,\n      default: '',\n    },\n\n    // Dropdown placement\n    placement: {\n      type: String as PropType<Partial<Placement>>,\n      default: 'bottom',\n      validator: (placement: string) => ['top', 'bottom'].includes(placement),\n    },\n\n    allowCreate: {\n      type: [Boolean, String] as PropType<boolean | 'unique'>,\n      default: false,\n      validator: (mode: string | boolean) => [true, false, 'unique'].includes(mode),\n    },\n\n    color: { type: String as PropType<string>, default: 'primary' },\n    multiple: { type: Boolean as PropType<boolean>, default: false },\n    searchable: { type: Boolean as PropType<boolean>, default: false },\n    separator: { type: String as PropType<string>, default: ', ' },\n    width: { type: String as PropType<string>, default: '100%' },\n    maxHeight: { type: String as PropType<string>, default: '256px' },\n    noOptionsText: { type: String as PropType<string>, default: 'Items not found' },\n    fixed: { type: Boolean as PropType<boolean>, default: true },\n    hideSelected: { type: Boolean as PropType<boolean>, default: false },\n    tabindex: { type: Number as PropType<number>, default: 0 },\n    dropdownIcon: {\n      type: [String, Object] as PropType<string | DropdownIcon>,\n      default: (): DropdownIcon => ({\n        open: 'expand_more',\n        close: 'expand_less',\n      }),\n      validator: (value: string | DropdownIcon) => {\n        if (typeof value === 'string') { return true }\n\n        const isOpenIconString = typeof value.open === 'string'\n        const isCloseIconString = typeof value.close === 'string'\n\n        return isOpenIconString && isCloseIconString\n      },\n    },\n\n    // Input style\n    outline: { type: Boolean as PropType<boolean>, default: false },\n    bordered: { type: Boolean as PropType<boolean>, default: false },\n    label: { type: String as PropType<string>, default: '' },\n    placeholder: { type: String as PropType<string>, default: '' },\n    requiredMark: { type: Boolean as PropType<boolean>, default: false },\n  },\n\n  setup (props, { emit }) {\n    const optionList = ref<typeof VaSelectOptionList>()\n    const input = ref<typeof VaInput>()\n    const searchBar = ref<typeof VaInput>()\n    const { isFocused } = useFocus()\n\n    const { getHoverColor } = useColors()\n    const { getOptionByValue, getValue, getText, getTrackBy, getGroupBy } = useSelectableList(props)\n\n    const {\n      validate,\n      computedError,\n      computedErrorMessages,\n    } = useValidation(props, emit, () => reset(), () => focus())\n\n    const { colorComputed } = useColor(props)\n    const toggleIconColor = computed(() => props.readonly ? getHoverColor(colorComputed.value) : colorComputed.value)\n\n    const onScrollBottom = () => {\n      emit('scroll-bottom')\n    }\n\n    const searchInput = ref('')\n    const showSearchInput = computed(() => props.searchable || props.allowCreate)\n\n    watch(searchInput, (value) => {\n      emit('update-search', value)\n      hoveredOption.value = null\n    })\n\n    // Select value\n\n    const valueComputed = computed<SelectableOption | SelectableOption[]>({\n      get () {\n        const value = getOptionByValue(props.modelValue)\n\n        if (props.multiple) {\n          if (!value) {\n            return []\n          }\n\n          if (!Array.isArray(value)) {\n            return [value]\n          }\n\n          return value\n        }\n\n        if (Array.isArray(value)) {\n          warn('Model value should be a string or a number for a single Select.')\n\n          if (value.length) {\n            return value[value.length - 1]\n          }\n        }\n\n        return value\n      },\n\n      set (value: SelectableOption | SelectableOption[]) {\n        if (Array.isArray(value)) {\n          emit('update:modelValue', value.map(getValue))\n        } else {\n          emit('update:modelValue', getValue(value))\n        }\n      },\n    })\n\n    const valueComputedString = computed(() => {\n      if (!valueComputed.value) { return props.clearValue }\n      if (typeof valueComputed.value === 'string' || typeof valueComputed.value === 'number') { return valueComputed.value }\n      if (Array.isArray(valueComputed.value)) {\n        return valueComputed.value.map((value) => getText(value)).join(props.separator) || props.clearValue\n      }\n\n      return getText(valueComputed.value)\n    })\n\n    // Icons\n    const {\n      canBeCleared,\n      clearIconProps,\n      onFocus,\n      onBlur,\n    } = useClearable(props, valueComputed)\n\n    const showClearIcon = computed(() => {\n      return props.multiple && Array.isArray(valueComputed.value) ? !!valueComputed.value.length : canBeCleared.value\n    })\n\n    const toggleIcon = computed(() => {\n      if (!props.dropdownIcon) { return '' }\n\n      if (typeof props.dropdownIcon === 'string') {\n        return props.dropdownIcon\n      }\n\n      return showDropdownContent.value ? props.dropdownIcon.close : props.dropdownIcon.open\n    })\n\n    // Options\n\n    const filteredOptions = computed(() => {\n      if (!props.options) { return [] }\n\n      if (props.hideSelected) {\n        return props.options.filter((option) => !checkIsOptionSelected(option))\n      }\n\n      return props.options\n    })\n\n    const checkIsOptionSelected = (option: SelectableOption) => {\n      if (!valueComputed.value) { return false }\n\n      if (Array.isArray(valueComputed.value)) {\n        return !!valueComputed.value.find((valueItem) => compareOptions(valueItem, option))\n      }\n\n      return compareOptions(valueComputed.value, option)\n    }\n\n    const compareOptions = (option1: SelectableOption, option2: SelectableOption) => {\n      const one = getValue(option1)\n      const two = getValue(option2)\n\n      // identity check works nice for strings and exact matches.\n      if (one === two) {\n        return true\n      }\n      if (typeof one === 'string' && typeof two === 'string') {\n        return one === two\n      }\n      if (one === null || two === null) {\n        return false\n      }\n      if (typeof one === 'object' && typeof two === 'object') {\n        return getTrackBy(one) === getTrackBy(two)\n      }\n\n      return false\n    }\n\n    const isValueComputedArray = (v: Ref<SelectableOption | SelectableOption[]>): v is Ref<SelectableOption[]> => Array.isArray(v.value)\n\n    const selectOption = (option: SelectableOption) => {\n      if (hoveredOption.value === null) {\n        hideAndFocus()\n        return\n      }\n\n      if (showSearchInput.value) {\n        searchInput.value = ''\n      }\n\n      if (props.multiple && isValueComputedArray(valueComputed)) {\n        const { exceedsMaxSelections, addOption } = useMaxSelections(valueComputed, ref(props.maxSelections), emit)\n\n        const isSelected = checkIsOptionSelected(getValue(option))\n\n        if (isSelected) {\n          // Unselect\n          valueComputed.value = valueComputed.value.filter((optionSelected) => !compareOptions(getValue(option), getValue(optionSelected)))\n        } else {\n          if (exceedsMaxSelections()) { return }\n          addOption(getValue(option))\n        }\n      } else {\n        valueComputed.value = typeof option === 'string' || typeof option === 'number' ? option : { ...option }\n        hideAndFocus()\n      }\n    }\n\n    const addNewOption = () => {\n      // Do not emit if option already exist and allow create is `unique`\n      const hasAddedOption = props.options?.some((option: SelectableOption) => getText(option) === searchInput.value)\n\n      if (!(props.allowCreate === 'unique' && hasAddedOption)) {\n        emit('create-new', searchInput.value)\n        searchInput.value = ''\n      }\n    }\n\n    // Hovered options\n\n    const hoveredOption = ref<SelectableOption | null>(null)\n\n    const selectHoveredOption = () => {\n      if (!hoveredOption.value) { return }\n\n      if (!showDropdownContent.value) {\n        // We can not select options if they are hidden\n        showDropdown()\n        return\n      }\n\n      selectOption(hoveredOption.value)\n    }\n\n    const selectOrAddOption = () => {\n      const allowedToCreate = !!props.allowCreate && searchInput.value !== ''\n\n      if (hoveredOption.value !== null) {\n        selectHoveredOption()\n      } else if (allowedToCreate) {\n        addNewOption()\n      }\n    }\n\n    const hoverPreviousOption = () => {\n      optionList.value?.hoverPreviousOption()\n    }\n\n    const hoverNextOption = () => {\n      optionList.value?.hoverNextOption()\n    }\n\n    // Dropdown content\n\n    const showDropdownContent = ref(false)\n\n    const showDropdownContentComputed = computed({\n      get: () => showDropdownContent.value,\n      set: (show: boolean) => {\n        show ? showDropdown() : hideDropdown()\n      },\n    })\n\n    const closeOnContentClick = computed(() => {\n      return !(props.multiple || props.searchable || props.allowCreate)\n    })\n\n    const showDropdown = () => {\n      if (props.disabled || props.readonly) { return }\n\n      showDropdownContent.value = true\n      scrollToSelected()\n      focusSearchOrOptions()\n    }\n\n    const hideDropdown = () => {\n      showDropdownContent.value = false\n      searchInput.value = ''\n      validate()\n    }\n\n    const toggleDropdown = () => {\n      if (showDropdownContent.value) {\n        hideAndFocus()\n      } else {\n        showDropdown()\n      }\n    }\n\n    const onSelectClick = () => {\n      if (props.disabled || props.readonly) { return }\n      toggleDropdown()\n    }\n\n    const hideAndFocus = () => {\n      hideDropdown()\n      input.value?.focus()\n    }\n\n    const focusSearchBar = () => {\n      searchBar.value?.focus()\n    }\n\n    const focusOptionList = () => {\n      optionList.value?.focus()\n      !props.modelValue && optionList.value?.hoverFirstOption()\n    }\n\n    const focusSearchOrOptions = () => nextTick(() => {\n      if (showSearchInput.value) {\n        focusSearchBar()\n      } else {\n        focusOptionList()\n      }\n    })\n\n    const onInputFocus = () => {\n      isFocused.value = true\n      onFocus()\n    }\n\n    const onInputBlur = () => {\n      if (showDropdownContentComputed.value) { return }\n\n      onBlur()\n\n      isFocused.value\n        ? isFocused.value = false\n        : validate()\n    }\n\n    /** @public */\n    const focus = () => {\n      if (props.disabled) { return }\n      input.value?.focus()\n    }\n\n    /** @public */\n    const blur = () => {\n      if (showDropdownContentComputed.value) {\n        showDropdownContentComputed.value = false\n      }\n\n      nextTick(input.value?.blur)\n    }\n\n    /** @public */\n    const reset = () => {\n      if (props.multiple) {\n        valueComputed.value = Array.isArray(props.clearValue) ? props.clearValue : []\n      } else {\n        valueComputed.value = props.clearValue\n      }\n\n      searchInput.value = ''\n      emit('clear')\n    }\n\n    const tabIndexComputed = computed(() => props.disabled ? -1 : props.tabindex)\n\n    const scrollToSelected = () => {\n      const selected = valueComputed.value\n      const nothingSelected = typeof selected !== 'object' && Array.isArray(selected) && !selected.length\n\n      if (nothingSelected) { return }\n\n      const scrollTo = Array.isArray(selected) ? selected[selected.length - 1] : selected\n      hoveredOption.value = scrollTo\n      nextTick(() => optionList.value?.scrollToOption(scrollTo))\n    }\n\n    // Hinted search\n\n    let hintedSearchQuery = ''\n    let hintedSearchQueryTimeoutIndex!: ReturnType<typeof setTimeout>\n    const navigationKeys = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'Enter', ' ']\n\n    // Hinted search - hover option if you typing it's value on select without search-bar\n    const onHintedSearch = (event: KeyboardEvent) => {\n      if (navigationKeys.some(key => key === event.key)) {\n        return\n      }\n\n      const isLetter: boolean = event.key.length === 1\n      const isDeleteKey: boolean = event.key === 'Backspace' || event.key === 'Delete'\n\n      clearTimeout(hintedSearchQueryTimeoutIndex)\n\n      if (isDeleteKey) {\n        // Remove last letter from query\n        hintedSearchQuery = hintedSearchQuery ? hintedSearchQuery.slice(0, -1) : ''\n      } else if (isLetter) {\n        // Add every new letter to the query\n        hintedSearchQuery += event.key\n      }\n\n      if (showSearchInput.value) {\n        searchInput.value = hintedSearchQuery\n        return\n      }\n\n      // Search for an option that matches the query\n      if (hintedSearchQuery) {\n        const appropriateOption = props.options.find(option => getText(option).toLowerCase().startsWith(hintedSearchQuery.toLowerCase()))\n        if (appropriateOption) {\n          hoveredOption.value = appropriateOption\n        }\n      }\n\n      hintedSearchQueryTimeoutIndex = setTimeout(() => { hintedSearchQuery = '' }, 1000)\n    }\n\n    return {\n      input,\n      optionList,\n      searchBar,\n\n      // while we have problem with 'withConfigTransport'\n      // focus,\n      // blur,\n\n      onInputFocus,\n      onInputBlur,\n      focusOptionList,\n      reset,\n      onSelectClick,\n      focusSearchBar,\n      searchInput,\n      showSearchInput,\n      hoveredOption,\n      tabIndexComputed,\n      valueComputed,\n      valueComputedString,\n      showClearIcon,\n      toggleIcon,\n      computedErrorMessages,\n      computedError,\n      filteredOptions,\n      checkIsOptionSelected,\n      closeOnContentClick,\n      selectOption,\n      selectOrAddOption,\n      selectHoveredOption,\n      hoverPreviousOption,\n      hoverNextOption,\n      showDropdownContentComputed,\n      showDropdown,\n      hideDropdown,\n      hideAndFocus,\n      toggleDropdown,\n      toggleIconColor,\n      onHintedSearch,\n      getText,\n      getTrackBy,\n      getGroupBy,\n      onScrollBottom,\n      clearIconProps,\n    }\n  },\n  // we will use this while we have problem with 'withConfigTransport'\n  methods: {\n    focus () {\n      if (this.$props.disabled) { return }\n      this.input?.focus()\n    },\n    blur () {\n      if (this.showDropdownContentComputed) {\n        this.showDropdownContentComputed = false\n      }\n\n      nextTick(this.input?.blur)\n    },\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"../../styles/resources\";\n@import \"variables\";\n\n.va-select {\n  cursor: var(--va-select-cursor);\n\n  .va-input {\n    cursor: var(--va-select-cursor);\n  }\n}\n\n.va-select-dropdown {\n  .va-dropdown__anchor {\n    display: block;\n  }\n\n  &__content {\n    overflow: hidden;\n    border-bottom-right-radius: var(--va-select-dropdown-border-radius);\n    border-bottom-left-radius: var(--va-select-dropdown-border-radius);\n    border-top-right-radius: 0;\n    border-top-left-radius: 0;\n    box-shadow: var(--va-select-box-shadow);\n    padding: 0;\n  }\n\n  &__options-wrapper {\n    background: var(--va-select-dropdown-background);\n    overflow-y: auto;\n\n    @include va-scroll();\n  }\n}\n</style>\n","import withConfigTransport from '../../services/config-transport/withConfigTransport'\nimport VaSelect from './VaSelect.vue'\nimport VaSelectOptionListBase from './VaSelectOptionList/VaSelectOptionList.vue'\n\nexport const VaSelectOptionList = withConfigTransport(VaSelectOptionListBase)\n\nexport default withConfigTransport(VaSelect)\n"],"names":["useMaxSelectionsProps","maxSelections","type","Number","String","default","undefined","defineComponent","name","components","VaIcon","emits","props","useColorProps","options","Array","noOptionsText","getSelectedState","Function","required","getText","getTrackBy","getGroupBy","multiple","Boolean","search","tabindex","hoveredOption","Object","setup","emit","getColor","useColors","itemRefs","ref","rootElement","hoveredOptionComputed","computed","get","set","value","filteredOptions","filter","option","optionText","toString","toUpperCase","includes","optionGroups","reduce","groups","group","groupBy","push","_noGroup","isHovered","updateHoveredOption","hoveredOptionIndex","findIndex","scrollToOption","element","scrollTarget","parentElement","verticalAlignment","smooth","top","viewHeight","offsetHeight","currentPosition","scrollTop","offsetTop","getTopCoordinate","center","getCenterCoordinate","bottom","getBottomCoordinate","getScrollTop","scroll","behavior","scrollToElement","watch","newOption","publicMethods","hoverPreviousOption","length","at","hoverNextOption","hoverFirstOption","focus","preventScroll","onScroll","event","target","clientHeight","scrollHeight","beforeUpdate","setItemRef","el","selectOption","getOptionIcon","icon","getOptionClass","getOptionStyle","color","backgroundColor","getHoverColor","methods","this","_mergeProps","class","_ctx","groupName","size","withConfigTransport","VaSelectOptionList","VaDropdown","VaDropdownContent","VaInput","useValidationEmits","useClearableEmits","useSelectableListProps","useValidationProps","useLoadingProps","useClearableProps","useFormProps","modelValue","placement","validator","allowCreate","mode","searchable","separator","width","maxHeight","fixed","hideSelected","dropdownIcon","open","close","isOpenIconString","isCloseIconString","outline","bordered","label","placeholder","requiredMark","optionList","input","searchBar","isFocused","useFocus","getOptionByValue","getValue","useSelectableList","validate","computedError","computedErrorMessages","useValidation","reset","colorComputed","useColor","toggleIconColor","readonly","searchInput","showSearchInput","valueComputed","isArray","warn","map","valueComputedString","join","clearValue","canBeCleared","clearIconProps","onFocus","onBlur","useClearable","showClearIcon","toggleIcon","showDropdownContent","checkIsOptionSelected","find","valueItem","compareOptions","option1","option2","one","two","v","exceedsMaxSelections","addOption","useMaxSelections","selections","isNaN","optionToAdd","newSelectedOptions","optionSelected","hideAndFocus","selectHoveredOption","showDropdown","showDropdownContentComputed","show","hideDropdown","closeOnContentClick","disabled","scrollToSelected","focusSearchOrOptions","toggleDropdown","focusSearchBar","focusOptionList","nextTick","tabIndexComputed","selected","scrollTo","hintedSearchQueryTimeoutIndex","hintedSearchQuery","navigationKeys","onInputFocus","onInputBlur","onSelectClick","selectOrAddOption","allowedToCreate","hasAddedOption","some","addNewOption","onHintedSearch","key","isLetter","isDeleteKey","clearTimeout","slice","appropriateOption","toLowerCase","startsWith","setTimeout","onScrollBottom","$props","blur","trigger","anchorSelector","stateful","offset","anchor","_createVNode","success","error","loading","messages","_createBlock","onClick","appendInner","_renderSlot","style","onKeyup","onKeydown","onSelectOption","onNoPreviousOptionToHover","VaSelectOptionListBase","VaSelect"],"mappings":"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"}