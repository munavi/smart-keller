{"version":3,"file":"index55.js","sources":["../../src/components/va-counter/VaCounter.vue","../../src/components/va-counter/VaCounter.vue?vue&type=template&id=09d88868&lang.js","../../src/components/va-counter/index.ts"],"sourcesContent":["<template>\n  <VaInputWrapper\n    class=\"va-counter\"\n    v-bind=\"{ ...fieldListeners, ...inputWrapperPropsComputed }\"\n    :class=\"classComputed\"\n    :style=\"styleComputed\"\n    :focused=\"isFocused\"\n    @click=\"focus()\"\n    @keydown.up.prevent=\"increaseCount()\"\n    @keydown.down.prevent=\"decreaseCount()\"\n  >\n    <template v-if=\"$props.buttons\" #prepend=\"slotScope\">\n      <div class=\"va-counter__prepend-wrapper\"\n        :style=\"{ marginRight: marginComputed }\"\n        @mousedown.prevent=\"focus()\"\n      >\n        <slot name=\"decreaseAction\" v-bind=\"{ ...slotScope, decreaseCount }\">\n          <va-button\n            class=\"va-counter__button-decrease\"\n            v-bind=\"decreaseButtonProps\"\n            @click=\"decreaseCount()\"\n          />\n        </slot>\n      </div>\n    </template>\n\n    <template v-else #prependInner=\"slotScope\">\n      <div @mousedown.prevent=\"focus()\">\n        <slot name=\"decreaseAction\" v-bind=\"{ ...slotScope, decreaseCount }\">\n          <va-icon\n            class=\"va-counter__icon-decrease\"\n            v-bind=\"decreaseIconProps\"\n          />\n        </slot>\n      </div>\n    </template>\n\n    <template v-if=\"$props.buttons\"  #append=\"slotScope\">\n      <div class=\"va-counter__append-wrapper\"\n        :style=\"{ marginLeft: marginComputed }\"\n        @mousedown.prevent=\"focus()\"\n      >\n        <slot name=\"increaseAction\" v-bind=\"{ ...slotScope, increaseCount }\">\n          <va-button\n            class=\"va-counter__button-increase\"\n            v-bind=\"increaseButtonProps\"\n            @click=\"increaseCount()\"\n          />\n        </slot>\n      </div>\n    </template>\n\n    <template v-else #appendInner=\"slotScope\">\n      <div @mousedown.prevent=\"focus()\">\n        <slot name=\"increaseAction\" v-bind=\"{ ...slotScope, increaseCount }\">\n          <va-icon\n            class=\"va-counter__icon-increase\"\n            v-bind=\"increaseIconProps\"\n          />\n        </slot>\n      </div>\n    </template>\n\n    <template v-if=\"$slots.content\" #content=\"slotScope\">\n      <div ref=\"input\" tabindex=\"0\">\n        <slot name=\"content\" v-bind=\"{ ...slotScope, value: Number(valueComputed) }\" />\n      </div>\n    </template>\n\n    <input\n      v-if=\"!$slots.content\"\n      class=\"va-input__content__input\"\n      ref=\"input\"\n      type=\"number\"\n      inputmode=\"decimal\"\n      v-bind=\"{ ...inputAttributesComputed, ...inputListeners }\"\n      :value=\"valueComputed\"\n      @input=\"setCountInput\"\n      @change=\"setCountChange\"\n    >\n  </VaInputWrapper>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, InputHTMLAttributes, ref, PropType, ComputedRef } from 'vue'\nimport omit from 'lodash/omit'\nimport pick from 'lodash/pick'\nimport { useFormProps } from '../../composables/useForm'\nimport { useEmitProxy } from '../../composables/useEmitProxy'\nimport { useFocus, useFocusEmits } from '../../composables/useFocus'\nimport { useStatefulProps, useStateful } from '../../composables/useStateful'\nimport { useColor } from '../../composables/useColor'\nimport { safeCSSLength } from '../../utils/css-utils'\nimport VaInputWrapper from '../va-input/components/VaInputWrapper.vue'\nimport VaIcon from '../va-icon/VaIcon.vue'\nimport VaButton from '../va-button/VaButton.vue'\n\nconst { createEmits: createInputEmits, createListeners: createInputListeners } = useEmitProxy(\n  ['change'],\n)\n\nconst { createEmits: createFieldEmits, createListeners: createFieldListeners } = useEmitProxy([\n  { listen: 'click-prepend', emit: 'click:decrease-button' },\n  { listen: 'click-append', emit: 'click:increase-button' },\n  { listen: 'click-prepend-inner', emit: 'click:decrease-icon' },\n  { listen: 'click-append-inner', emit: 'click:increase-icon' },\n])\n\nexport default defineComponent({\n  name: 'VaCounter',\n\n  components: { VaInputWrapper, VaIcon, VaButton },\n\n  props: {\n    ...useFormProps,\n    ...useStatefulProps,\n    // input\n    modelValue: { type: [String, Number] as PropType<string | number>, default: 0 },\n    manualInput: { type: Boolean as PropType<boolean>, default: false },\n    stateful: { type: Boolean as PropType<boolean>, default: false },\n    min: { type: Number as PropType<number>, default: undefined },\n    max: { type: Number as PropType<number>, default: undefined },\n    step: { type: Number as PropType<number>, default: 1 },\n    label: { type: String as PropType<string>, default: '' },\n    // hint\n    messages: { type: [Array, String] as PropType<string[] | string>, default: () => [] },\n    // style\n    width: { type: [String, Number] as PropType<string | number>, default: '160px' },\n    color: { type: String as PropType<string>, default: 'primary' },\n    outline: { type: Boolean as PropType<boolean> },\n    bordered: { type: Boolean as PropType<boolean> },\n    // icons & buttons\n    increaseIcon: { type: String as PropType<string>, default: 'add' },\n    decreaseIcon: { type: String as PropType<string>, default: 'remove' },\n    buttons: { type: Boolean as PropType<boolean>, default: false },\n    flat: { type: Boolean as PropType<boolean>, default: true },\n    rounded: { type: Boolean as PropType<boolean>, default: false },\n    margins: { type: [String, Number] as PropType<string | number>, default: '4px' },\n    textColor: { type: String as PropType<string | undefined>, default: undefined },\n  },\n\n  emits: [\n    'update:modelValue',\n    ...createInputEmits(),\n    ...createFieldEmits(),\n    ...useFocusEmits,\n  ],\n\n  inheritAttrs: false,\n\n  setup (props, { emit, attrs }) {\n    const input = ref<HTMLInputElement | HTMLDivElement | undefined>()\n\n    const {\n      isFocused,\n      // will be useful when we resolve problem with 'withConfigTransport'\n      focus,\n      blur,\n    } = useFocus(input, emit)\n\n    const { valueComputed } = useStateful(props, emit)\n\n    const setCountInput = ({ target }: Event) => {\n      valueComputed.value = Number((target as HTMLInputElement | null)?.value)\n    }\n\n    const setCountChange = ({ target } : Event) => {\n      calculateCounterValue(Number((target as HTMLInputElement | null)?.value))\n    }\n\n    const getRoundDownWithStep = (value: number) => {\n      if (!props.min || !props.step) { return value }\n\n      // If the user enters a value manually, then we must round it to the nearest valid value,\n      // taking into account the initial value (`props.min`) and the step size (`props.step`)\n      return props.min + props.step * Math.floor((value - props.min) / props.step)\n    }\n\n    const calculateCounterValue = (counterValue: number) => {\n      if (props.min && counterValue < props.min) {\n        valueComputed.value = props.min\n        return\n      }\n\n      if (props.max && (counterValue > props.max)) {\n        // since the `props.step` may not be a multiple of `(props.max - props.min)`,\n        // we must round the result taking into account the allowable value\n        valueComputed.value = getRoundDownWithStep(props.max)\n        return\n      }\n\n      valueComputed.value = getRoundDownWithStep(counterValue)\n    }\n\n    const isMinReached = computed(() => {\n      if (!props.min) { return false }\n      return Number(valueComputed.value) <= props.min\n    })\n\n    const isMaxReached = computed(() => {\n      if (!props.max) { return false }\n\n      return props.step\n        ? Number(valueComputed.value) > (props.max - props.step)\n        : Number(valueComputed.value) >= props.max\n    })\n\n    const isDecreaseActionDisabled = computed(() => (\n      isMinReached.value || props.readonly || props.disabled\n    ))\n\n    const isIncreaseActionDisabled = computed(() => (\n      isMaxReached.value || props.readonly || props.disabled\n    ))\n\n    const decreaseCount = () => {\n      if (isDecreaseActionDisabled.value) { return }\n      calculateCounterValue(Number(valueComputed.value) - props.step)\n    }\n\n    const increaseCount = () => {\n      if (isIncreaseActionDisabled.value) { return }\n      calculateCounterValue(Number(valueComputed.value) + props.step)\n    }\n\n    const { colorComputed } = useColor(props)\n\n    const decreaseIconProps = computed(() => ({\n      class: { 'va-counter__icon--inactive': isDecreaseActionDisabled.value },\n      color: colorComputed.value,\n      name: props.decreaseIcon,\n      ...(!isDecreaseActionDisabled.value && { onClick: decreaseCount }),\n    }))\n\n    const increaseIconProps = computed(() => ({\n      class: { 'va-counter__icon--inactive': isIncreaseActionDisabled.value },\n      color: colorComputed.value,\n      name: props.increaseIcon,\n      ...(!isIncreaseActionDisabled.value && { onClick: increaseCount }),\n    }))\n\n    const isSquareCorners = computed(() => (\n      (typeof props.margins === 'string' ? parseFloat(props.margins) : props.margins) === 0\n    ))\n\n    const buttonProps = computed(() => ({\n      ...pick(props, ['rounded', 'color', 'textColor']),\n      flat: props.flat && !props.outline,\n      outline: props.flat && props.outline,\n    }))\n\n    const decreaseButtonProps = computed(() => ({\n      ...buttonProps.value,\n      icon: props.decreaseIcon,\n      disabled: isDecreaseActionDisabled.value,\n    }))\n\n    const increaseButtonProps = computed(() => ({\n      ...buttonProps.value,\n      icon: props.increaseIcon,\n      disabled: isIncreaseActionDisabled.value,\n    }))\n\n    const inputAttributesComputed = computed(() => ({\n      ariaLabel: props.label,\n      ...omit(attrs, ['class', 'style']),\n      ...pick(props, ['disabled', 'min', 'max', 'step']),\n      readonly: props.readonly || !props.manualInput,\n    }) as InputHTMLAttributes)\n\n    const inputWrapperPropsComputed = computed(() => ({\n      ...pick(props, ['color', 'readonly', 'disabled', 'messages', 'label', 'bordered', 'outline']),\n    }))\n\n    const classComputed = computed(() => ([\n      attrs.class,\n      { 'va-counter--input-square': isSquareCorners.value },\n    ]))\n\n    const styleComputed: ComputedRef<Partial<CSSStyleDeclaration>> = computed(() => ({\n      width: safeCSSLength(props.width),\n      ...((attrs.style as Partial<CSSStyleDeclaration>) || {}),\n    }))\n\n    const marginComputed = computed(() => safeCSSLength(props.margins))\n\n    return {\n      input,\n      valueComputed,\n      isFocused,\n\n      fieldListeners: createFieldListeners(emit),\n      inputListeners: createInputListeners(emit),\n      inputAttributesComputed,\n      inputWrapperPropsComputed,\n      setCountInput,\n      setCountChange,\n\n      decreaseCount,\n      increaseCount,\n\n      decreaseIconProps,\n      increaseIconProps,\n      decreaseButtonProps,\n      increaseButtonProps,\n\n      colorComputed,\n      classComputed,\n      styleComputed,\n      marginComputed,\n\n      // while we have problem with 'withConfigTransport'\n      // focus,\n      // blur,\n    }\n  },\n\n  // we will use this while we have problem with 'withConfigTransport'\n  methods: {\n    focus () { this.input?.focus() },\n    blur () { this.input?.blur() },\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"variables\";\n\n.va-counter {\n  &.va-counter--input-square {\n    .va-input__container {\n      border-radius: 0;\n      border-left: none;\n      border-right: none;\n    }\n\n    .va-counter__prepend-wrapper {\n      .va-counter__button-decrease {\n        border-top-right-radius: 0;\n        border-bottom-right-radius: 0;\n      }\n\n      .va-counter__button-decrease:not(.va-button--square) {\n        width: unset;\n\n        .va-button__content {\n          padding-right: var(--va-counter-button-padding--inner);\n          padding-left: var(--va-counter-button-padding--outer);\n        }\n      }\n    }\n\n    .va-counter__append-wrapper {\n      .va-counter__button-increase {\n        border-top-left-radius: 0;\n        border-bottom-left-radius: 0;\n      }\n\n      .va-counter__button-increase:not(.va-button--square) {\n        width: unset;\n\n        .va-button__content {\n          padding-left: var(--va-counter-button-padding--inner);\n          padding-right: var(--va-counter-button-padding--outer);\n        }\n      }\n    }\n  }\n\n  &:not(.va-counter--input-square) {\n    .va-counter__prepend-wrapper,\n    .va-counter__append-wrapper {\n      .va-counter__button-decrease,\n      .va-counter__button-increase {\n        .va-button__content {\n          padding: unset;\n        }\n      }\n    }\n  }\n\n  .va-input__content__input {\n    text-align: center;\n\n    // Chrome, Safari, Edge, Opera\n    &::-webkit-outer-spin-button,\n    &::-webkit-inner-spin-button {\n      -webkit-appearance: none;\n      margin: 0;\n    }\n    // Firefox\n    &[type=number] {\n      -moz-appearance: textfield;\n    }\n  }\n\n  .va-counter__icon--inactive {\n    cursor: inherit;\n    user-select: none;\n    opacity: 0.4;\n  }\n}\n</style>\n","<template>\n  <VaInputWrapper\n    class=\"va-counter\"\n    v-bind=\"{ ...fieldListeners, ...inputWrapperPropsComputed }\"\n    :class=\"classComputed\"\n    :style=\"styleComputed\"\n    :focused=\"isFocused\"\n    @click=\"focus()\"\n    @keydown.up.prevent=\"increaseCount()\"\n    @keydown.down.prevent=\"decreaseCount()\"\n  >\n    <template v-if=\"$props.buttons\" #prepend=\"slotScope\">\n      <div class=\"va-counter__prepend-wrapper\"\n        :style=\"{ marginRight: marginComputed }\"\n        @mousedown.prevent=\"focus()\"\n      >\n        <slot name=\"decreaseAction\" v-bind=\"{ ...slotScope, decreaseCount }\">\n          <va-button\n            class=\"va-counter__button-decrease\"\n            v-bind=\"decreaseButtonProps\"\n            @click=\"decreaseCount()\"\n          />\n        </slot>\n      </div>\n    </template>\n\n    <template v-else #prependInner=\"slotScope\">\n      <div @mousedown.prevent=\"focus()\">\n        <slot name=\"decreaseAction\" v-bind=\"{ ...slotScope, decreaseCount }\">\n          <va-icon\n            class=\"va-counter__icon-decrease\"\n            v-bind=\"decreaseIconProps\"\n          />\n        </slot>\n      </div>\n    </template>\n\n    <template v-if=\"$props.buttons\"  #append=\"slotScope\">\n      <div class=\"va-counter__append-wrapper\"\n        :style=\"{ marginLeft: marginComputed }\"\n        @mousedown.prevent=\"focus()\"\n      >\n        <slot name=\"increaseAction\" v-bind=\"{ ...slotScope, increaseCount }\">\n          <va-button\n            class=\"va-counter__button-increase\"\n            v-bind=\"increaseButtonProps\"\n            @click=\"increaseCount()\"\n          />\n        </slot>\n      </div>\n    </template>\n\n    <template v-else #appendInner=\"slotScope\">\n      <div @mousedown.prevent=\"focus()\">\n        <slot name=\"increaseAction\" v-bind=\"{ ...slotScope, increaseCount }\">\n          <va-icon\n            class=\"va-counter__icon-increase\"\n            v-bind=\"increaseIconProps\"\n          />\n        </slot>\n      </div>\n    </template>\n\n    <template v-if=\"$slots.content\" #content=\"slotScope\">\n      <div ref=\"input\" tabindex=\"0\">\n        <slot name=\"content\" v-bind=\"{ ...slotScope, value: Number(valueComputed) }\" />\n      </div>\n    </template>\n\n    <input\n      v-if=\"!$slots.content\"\n      class=\"va-input__content__input\"\n      ref=\"input\"\n      type=\"number\"\n      inputmode=\"decimal\"\n      v-bind=\"{ ...inputAttributesComputed, ...inputListeners }\"\n      :value=\"valueComputed\"\n      @input=\"setCountInput\"\n      @change=\"setCountChange\"\n    >\n  </VaInputWrapper>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, InputHTMLAttributes, ref, PropType, ComputedRef } from 'vue'\nimport omit from 'lodash/omit'\nimport pick from 'lodash/pick'\nimport { useFormProps } from '../../composables/useForm'\nimport { useEmitProxy } from '../../composables/useEmitProxy'\nimport { useFocus, useFocusEmits } from '../../composables/useFocus'\nimport { useStatefulProps, useStateful } from '../../composables/useStateful'\nimport { useColor } from '../../composables/useColor'\nimport { safeCSSLength } from '../../utils/css-utils'\nimport VaInputWrapper from '../va-input/components/VaInputWrapper.vue'\nimport VaIcon from '../va-icon/VaIcon.vue'\nimport VaButton from '../va-button/VaButton.vue'\n\nconst { createEmits: createInputEmits, createListeners: createInputListeners } = useEmitProxy(\n  ['change'],\n)\n\nconst { createEmits: createFieldEmits, createListeners: createFieldListeners } = useEmitProxy([\n  { listen: 'click-prepend', emit: 'click:decrease-button' },\n  { listen: 'click-append', emit: 'click:increase-button' },\n  { listen: 'click-prepend-inner', emit: 'click:decrease-icon' },\n  { listen: 'click-append-inner', emit: 'click:increase-icon' },\n])\n\nexport default defineComponent({\n  name: 'VaCounter',\n\n  components: { VaInputWrapper, VaIcon, VaButton },\n\n  props: {\n    ...useFormProps,\n    ...useStatefulProps,\n    // input\n    modelValue: { type: [String, Number] as PropType<string | number>, default: 0 },\n    manualInput: { type: Boolean as PropType<boolean>, default: false },\n    stateful: { type: Boolean as PropType<boolean>, default: false },\n    min: { type: Number as PropType<number>, default: undefined },\n    max: { type: Number as PropType<number>, default: undefined },\n    step: { type: Number as PropType<number>, default: 1 },\n    label: { type: String as PropType<string>, default: '' },\n    // hint\n    messages: { type: [Array, String] as PropType<string[] | string>, default: () => [] },\n    // style\n    width: { type: [String, Number] as PropType<string | number>, default: '160px' },\n    color: { type: String as PropType<string>, default: 'primary' },\n    outline: { type: Boolean as PropType<boolean> },\n    bordered: { type: Boolean as PropType<boolean> },\n    // icons & buttons\n    increaseIcon: { type: String as PropType<string>, default: 'add' },\n    decreaseIcon: { type: String as PropType<string>, default: 'remove' },\n    buttons: { type: Boolean as PropType<boolean>, default: false },\n    flat: { type: Boolean as PropType<boolean>, default: true },\n    rounded: { type: Boolean as PropType<boolean>, default: false },\n    margins: { type: [String, Number] as PropType<string | number>, default: '4px' },\n    textColor: { type: String as PropType<string | undefined>, default: undefined },\n  },\n\n  emits: [\n    'update:modelValue',\n    ...createInputEmits(),\n    ...createFieldEmits(),\n    ...useFocusEmits,\n  ],\n\n  inheritAttrs: false,\n\n  setup (props, { emit, attrs }) {\n    const input = ref<HTMLInputElement | HTMLDivElement | undefined>()\n\n    const {\n      isFocused,\n      // will be useful when we resolve problem with 'withConfigTransport'\n      focus,\n      blur,\n    } = useFocus(input, emit)\n\n    const { valueComputed } = useStateful(props, emit)\n\n    const setCountInput = ({ target }: Event) => {\n      valueComputed.value = Number((target as HTMLInputElement | null)?.value)\n    }\n\n    const setCountChange = ({ target } : Event) => {\n      calculateCounterValue(Number((target as HTMLInputElement | null)?.value))\n    }\n\n    const getRoundDownWithStep = (value: number) => {\n      if (!props.min || !props.step) { return value }\n\n      // If the user enters a value manually, then we must round it to the nearest valid value,\n      // taking into account the initial value (`props.min`) and the step size (`props.step`)\n      return props.min + props.step * Math.floor((value - props.min) / props.step)\n    }\n\n    const calculateCounterValue = (counterValue: number) => {\n      if (props.min && counterValue < props.min) {\n        valueComputed.value = props.min\n        return\n      }\n\n      if (props.max && (counterValue > props.max)) {\n        // since the `props.step` may not be a multiple of `(props.max - props.min)`,\n        // we must round the result taking into account the allowable value\n        valueComputed.value = getRoundDownWithStep(props.max)\n        return\n      }\n\n      valueComputed.value = getRoundDownWithStep(counterValue)\n    }\n\n    const isMinReached = computed(() => {\n      if (!props.min) { return false }\n      return Number(valueComputed.value) <= props.min\n    })\n\n    const isMaxReached = computed(() => {\n      if (!props.max) { return false }\n\n      return props.step\n        ? Number(valueComputed.value) > (props.max - props.step)\n        : Number(valueComputed.value) >= props.max\n    })\n\n    const isDecreaseActionDisabled = computed(() => (\n      isMinReached.value || props.readonly || props.disabled\n    ))\n\n    const isIncreaseActionDisabled = computed(() => (\n      isMaxReached.value || props.readonly || props.disabled\n    ))\n\n    const decreaseCount = () => {\n      if (isDecreaseActionDisabled.value) { return }\n      calculateCounterValue(Number(valueComputed.value) - props.step)\n    }\n\n    const increaseCount = () => {\n      if (isIncreaseActionDisabled.value) { return }\n      calculateCounterValue(Number(valueComputed.value) + props.step)\n    }\n\n    const { colorComputed } = useColor(props)\n\n    const decreaseIconProps = computed(() => ({\n      class: { 'va-counter__icon--inactive': isDecreaseActionDisabled.value },\n      color: colorComputed.value,\n      name: props.decreaseIcon,\n      ...(!isDecreaseActionDisabled.value && { onClick: decreaseCount }),\n    }))\n\n    const increaseIconProps = computed(() => ({\n      class: { 'va-counter__icon--inactive': isIncreaseActionDisabled.value },\n      color: colorComputed.value,\n      name: props.increaseIcon,\n      ...(!isIncreaseActionDisabled.value && { onClick: increaseCount }),\n    }))\n\n    const isSquareCorners = computed(() => (\n      (typeof props.margins === 'string' ? parseFloat(props.margins) : props.margins) === 0\n    ))\n\n    const buttonProps = computed(() => ({\n      ...pick(props, ['rounded', 'color', 'textColor']),\n      flat: props.flat && !props.outline,\n      outline: props.flat && props.outline,\n    }))\n\n    const decreaseButtonProps = computed(() => ({\n      ...buttonProps.value,\n      icon: props.decreaseIcon,\n      disabled: isDecreaseActionDisabled.value,\n    }))\n\n    const increaseButtonProps = computed(() => ({\n      ...buttonProps.value,\n      icon: props.increaseIcon,\n      disabled: isIncreaseActionDisabled.value,\n    }))\n\n    const inputAttributesComputed = computed(() => ({\n      ariaLabel: props.label,\n      ...omit(attrs, ['class', 'style']),\n      ...pick(props, ['disabled', 'min', 'max', 'step']),\n      readonly: props.readonly || !props.manualInput,\n    }) as InputHTMLAttributes)\n\n    const inputWrapperPropsComputed = computed(() => ({\n      ...pick(props, ['color', 'readonly', 'disabled', 'messages', 'label', 'bordered', 'outline']),\n    }))\n\n    const classComputed = computed(() => ([\n      attrs.class,\n      { 'va-counter--input-square': isSquareCorners.value },\n    ]))\n\n    const styleComputed: ComputedRef<Partial<CSSStyleDeclaration>> = computed(() => ({\n      width: safeCSSLength(props.width),\n      ...((attrs.style as Partial<CSSStyleDeclaration>) || {}),\n    }))\n\n    const marginComputed = computed(() => safeCSSLength(props.margins))\n\n    return {\n      input,\n      valueComputed,\n      isFocused,\n\n      fieldListeners: createFieldListeners(emit),\n      inputListeners: createInputListeners(emit),\n      inputAttributesComputed,\n      inputWrapperPropsComputed,\n      setCountInput,\n      setCountChange,\n\n      decreaseCount,\n      increaseCount,\n\n      decreaseIconProps,\n      increaseIconProps,\n      decreaseButtonProps,\n      increaseButtonProps,\n\n      colorComputed,\n      classComputed,\n      styleComputed,\n      marginComputed,\n\n      // while we have problem with 'withConfigTransport'\n      // focus,\n      // blur,\n    }\n  },\n\n  // we will use this while we have problem with 'withConfigTransport'\n  methods: {\n    focus () { this.input?.focus() },\n    blur () { this.input?.blur() },\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"variables\";\n\n.va-counter {\n  &.va-counter--input-square {\n    .va-input__container {\n      border-radius: 0;\n      border-left: none;\n      border-right: none;\n    }\n\n    .va-counter__prepend-wrapper {\n      .va-counter__button-decrease {\n        border-top-right-radius: 0;\n        border-bottom-right-radius: 0;\n      }\n\n      .va-counter__button-decrease:not(.va-button--square) {\n        width: unset;\n\n        .va-button__content {\n          padding-right: var(--va-counter-button-padding--inner);\n          padding-left: var(--va-counter-button-padding--outer);\n        }\n      }\n    }\n\n    .va-counter__append-wrapper {\n      .va-counter__button-increase {\n        border-top-left-radius: 0;\n        border-bottom-left-radius: 0;\n      }\n\n      .va-counter__button-increase:not(.va-button--square) {\n        width: unset;\n\n        .va-button__content {\n          padding-left: var(--va-counter-button-padding--inner);\n          padding-right: var(--va-counter-button-padding--outer);\n        }\n      }\n    }\n  }\n\n  &:not(.va-counter--input-square) {\n    .va-counter__prepend-wrapper,\n    .va-counter__append-wrapper {\n      .va-counter__button-decrease,\n      .va-counter__button-increase {\n        .va-button__content {\n          padding: unset;\n        }\n      }\n    }\n  }\n\n  .va-input__content__input {\n    text-align: center;\n\n    // Chrome, Safari, Edge, Opera\n    &::-webkit-outer-spin-button,\n    &::-webkit-inner-spin-button {\n      -webkit-appearance: none;\n      margin: 0;\n    }\n    // Firefox\n    &[type=number] {\n      -moz-appearance: textfield;\n    }\n  }\n\n  .va-counter__icon--inactive {\n    cursor: inherit;\n    user-select: none;\n    opacity: 0.4;\n  }\n}\n</style>\n","import withConfigTransport from '../../services/config-transport/withConfigTransport'\nimport VaCounter from './VaCounter.vue'\n\nexport default withConfigTransport(VaCounter)\n"],"names":["createEmits","createInputEmits","createListeners","createInputListeners","useEmitProxy","createFieldEmits","createFieldListeners","listen","emit","defineComponent","name","components","VaInputWrapper","VaIcon","VaButton","props","useFormProps","useStatefulProps","modelValue","type","String","Number","default","manualInput","Boolean","stateful","min","undefined","max","step","label","messages","Array","width","color","outline","bordered","increaseIcon","decreaseIcon","buttons","flat","rounded","margins","textColor","emits","useFocusEmits","inheritAttrs","setup","attrs","input","ref","isFocused","focus","blur","useFocus","valueComputed","useStateful","getRoundDownWithStep","value","Math","floor","calculateCounterValue","counterValue","isMinReached","computed","isMaxReached","isDecreaseActionDisabled","readonly","disabled","isIncreaseActionDisabled","decreaseCount","increaseCount","colorComputed","useColor","decreaseIconProps","class","onClick","increaseIconProps","isSquareCorners","parseFloat","buttonProps","pick","decreaseButtonProps","icon","increaseButtonProps","inputAttributesComputed","ariaLabel","omit","inputWrapperPropsComputed","classComputed","styleComputed","safeCSSLength","style","marginComputed","fieldListeners","inputListeners","setCountInput","target","setCountChange","methods","this","_mergeProps","_ctx","focused","content","_createBlock","inputmode","onInput","onChange","slotScope","_createVNode","onMousedown","_renderSlot","tabindex","withConfigTransport","VaCounter"],"mappings":"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"}