{"version":3,"file":"index35.js","sources":["../../src/components/va-pagination/VaPagination.vue","../../src/components/va-pagination/setPaginationRange.ts","../../src/components/va-pagination/VaPagination.vue?vue&type=template&id=51c93e08&lang.js","../../src/components/va-pagination/index.ts"],"sourcesContent":["<template>\n  <va-button-group\n    v-if=\"showPagination\"\n    class=\"va-pagination\"\n    :flat=\"$props.flat\"\n    :size=\"$props.size\"\n    :color=\"$props.color\"\n    outline\n  >\n    <va-button\n      v-if=\"showBoundaryLinks\"\n      :disabled=\"$props.disabled || currentValue === 1\"\n      :icon=\"$props.boundaryIconLeft\"\n      @click=\"onUserInput(1)\"\n    />\n    <va-button\n      v-if=\"showDirectionLinks\"\n      outline\n      :disabled=\"$props.disabled || currentValue === 1\"\n      :icon=\"$props.directionIconLeft\"\n      @click=\"onUserInput(currentValue - 1)\"\n    />\n    <slot v-if=\"!$props.input\">\n      <va-button\n        v-for=\"(n, i) in paginationRange\"\n        :key=\"i\"\n        :style=\"activeButtonStyle(n)\"\n        :disabled=\"$props.disabled || n === '...'\"\n        :class=\"{ 'va-button--ellipsis': n === '...'}\"\n        @click=\"onUserInput(n)\"\n        outline\n      >\n        {{ n }}\n      </va-button>\n    </slot>\n    <input\n      v-else\n      ref=\"htmlInput\"\n      class=\"va-pagination__input va-button\"\n      :style=\"{\n        cursor: 'default',\n        color: getColor($props.color),\n        opacity: $props.disabled ? 0.4 : 1\n      }\"\n      :class=\"{ 'va-pagination__input--flat': $props.flat }\"\n      @keydown.enter=\"changeValue\"\n      @focus=\"focusInput\"\n      @blur=\"changeValue\"\n      :disabled=\"$props.disabled\"\n      :placeholder=\"`${currentValue}/${lastPage}`\"\n      v-model=\"inputValue\"\n    />\n    <va-button\n      v-if=\"showDirectionLinks\"\n      outline\n      :disabled=\"$props.disabled || currentValue === lastPage\"\n      :icon=\"$props.directionIconRight\"\n      @click=\"onUserInput(currentValue + 1)\"\n    />\n    <va-button\n      v-if=\"showBoundaryLinks\"\n      outline\n      :disabled=\"$props.disabled || currentValue === lastPage\"\n      :icon=\"$props.boundaryIconRight\"\n      @click=\"onUserInput(lastPage)\"\n    />\n  </va-button-group>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, watch, PropType, ref, Ref, computed, nextTick } from 'vue'\n\nimport { __DEV__ } from '../../utils/global-utils'\nimport { useColors } from '../../composables/useColor'\nimport { useStateful, useStatefulProps, useStatefulEmits } from '../../composables/useStateful'\nimport { useTextColor } from '../../composables/useTextColor'\n\nimport VaButtonGroup from '../va-button-group'\nimport VaButton from '../va-button'\n\nimport { setPaginationRange } from './setPaginationRange'\n\nexport default defineComponent({\n  name: 'VaPagination',\n  components: { VaButtonGroup, VaButton },\n  emits: useStatefulEmits,\n  props: {\n    ...useStatefulProps,\n    modelValue: { type: Number as PropType<number>, default: 1 },\n    visiblePages: { type: Number as PropType<number>, default: 0 },\n    pages: { type: Number as PropType<number>, default: 0 },\n    disabled: { type: Boolean as PropType<boolean>, default: false },\n    color: { type: String as PropType<string>, default: 'primary' },\n    size: {\n      type: String as PropType<'medium' | 'small' | 'large'>,\n      default: 'medium',\n      validator: (v: string) => ['medium', 'small', 'large'].includes(v),\n    },\n\n    boundaryLinks: { type: Boolean as PropType<boolean>, default: true },\n    boundaryNumbers: { type: Boolean as PropType<boolean>, default: false },\n    directionLinks: { type: Boolean as PropType<boolean>, default: true },\n    input: { type: Boolean as PropType<boolean>, default: false },\n    hideOnSinglePage: { type: Boolean as PropType<boolean>, default: false },\n    flat: { type: Boolean as PropType<boolean>, default: false },\n    total: { type: Number as PropType<number>, default: null },\n    pageSize: { type: Number as PropType<number>, default: null },\n    boundaryIconLeft: { type: String as PropType<string>, default: 'first_page' },\n    boundaryIconRight: { type: String as PropType<string>, default: 'last_page' },\n    directionIconLeft: { type: String as PropType<string>, default: 'chevron_left' },\n    directionIconRight: { type: String as PropType<string>, default: 'chevron_right' },\n  },\n  setup (props, { emit }) {\n    const inputValue = ref('')\n    const htmlInput: Ref<HTMLInputElement | null> = ref(null)\n\n    const usedTotal = computed(() => !!((props.total || props.pageSize === 0) && props.pageSize))\n\n    const { valueComputed } = useStateful<number>(props, emit)\n\n    const { textColorComputed } = useTextColor(props.color)\n\n    const currentValue = computed({\n      get: () => usedTotal.value ? Math.ceil(valueComputed.value / props.pageSize) || 1 : valueComputed.value,\n      set: (value) => { valueComputed.value = value },\n    })\n\n    const paginationRange = computed(() => {\n      const { visiblePages, total, pageSize, boundaryNumbers, pages } = props\n\n      const value = currentValue.value || 1\n      const totalPages = usedTotal.value ? Math.ceil(total / pageSize) : pages\n\n      return setPaginationRange(value, visiblePages, totalPages, boundaryNumbers)\n    })\n\n    const lastPage = computed(() => usedTotal.value ? Math.ceil(props.total / props.pageSize) || 1 : props.pages)\n\n    const IsLstPageNotVisible = computed(() => (!!props.visiblePages && lastPage.value > props.visiblePages))\n\n    const showBoundaryLinks = computed(() => {\n      const { boundaryLinks, boundaryNumbers, input } = props\n\n      return input || (IsLstPageNotVisible.value && boundaryLinks && !boundaryNumbers)\n    })\n\n    const showDirectionLinks = computed(() => props.input || (IsLstPageNotVisible.value && props.directionLinks))\n\n    const showPagination = computed(() => lastPage.value > 1 || (!props.hideOnSinglePage && lastPage.value <= 1))\n\n    const focusInput = () => {\n      inputValue.value = `${currentValue.value}`\n\n      nextTick(() => htmlInput.value?.setSelectionRange(0, htmlInput.value.value.length))\n    }\n\n    const onUserInput = (pageNum: number | '...') => {\n      if (pageNum === '...' || pageNum < 1 || pageNum > lastPage.value) { return }\n\n      currentValue.value = usedTotal.value ? (pageNum - 1) * props.pageSize + 1 : pageNum\n    }\n\n    const resetInput = () => {\n      inputValue.value = ''\n      htmlInput.value?.blur()\n    }\n\n    const changeValue = () => {\n      if (+inputValue.value === currentValue.value) {\n        resetInput()\n      }\n\n      if (!inputValue.value.length) { return }\n\n      let pageNum = Number.parseInt(inputValue.value)\n\n      switch (true) {\n        case pageNum < 1:\n          pageNum = 1; break\n        case pageNum > lastPage.value:\n          pageNum = lastPage.value; break\n        case isNaN(pageNum):\n          pageNum = currentValue.value; break\n        default: break\n      }\n\n      onUserInput(pageNum)\n      resetInput()\n    }\n\n    const { getColor } = useColors()\n\n    const activeButtonStyle = (buttonValue: number | '...') => {\n      if (buttonValue === currentValue.value) {\n        return {\n          backgroundColor: getColor(props.color),\n          color: textColorComputed.value,\n        }\n      }\n\n      return {\n        color: getColor(props.color),\n      }\n    }\n\n    watch([usedTotal, () => props.pages], () => {\n      if (__DEV__ && usedTotal.value && props.pages) {\n        throw new Error('Please, use either `total` and `page-size` props, or `pages`.')\n      }\n    })\n\n    return {\n      getColor,\n      currentValue,\n      lastPage,\n      changeValue,\n      inputValue,\n      showPagination,\n      showBoundaryLinks,\n      onUserInput,\n      activeButtonStyle,\n      showDirectionLinks,\n      paginationRange,\n      focusInput,\n    }\n  },\n})\n</script>\n\n<style lang='scss'>\n@import \"../../styles/resources\";\n@import \"variables\";\n\n.va-pagination {\n  font-family: var(--va-font-family);\n\n  &__input {\n    border-style: var(--va-pagination-input-border-style);\n    border-width: var(--va-pagination-input-border-width);\n    text-align: var(--va-pagination-input-text-align);\n    font-size: var(--va-pagination-input-font-size);\n\n    &--flat {\n      border-top-width: var(--va-pagination-input-flat-border-top-width);\n    }\n  }\n\n  .va-button {\n    &.va-input {\n      cursor: default;\n    }\n\n    &--ellipsis {\n      cursor: default;\n      opacity: 1;\n    }\n\n    &--ellipsis > .va-button__content {\n      opacity: 0.4;\n    }\n\n    &--outline.va-button--disabled {\n      opacity: 1;\n    }\n\n    &--outline.va-button--disabled > .va-button__content {\n      opacity: 0.4;\n    }\n  }\n}\n</style>\n","export const setPaginationRange = (value = 1, visiblePages: number, pages: number, includeBoundary = false) => {\n  let start = 0\n\n  if (pages === 0) {\n    pages = 1\n  }\n\n  if (visiblePages > pages) {\n    visiblePages = pages\n  }\n  if (visiblePages === 0) {\n    start = 1\n    visiblePages = pages\n  } else {\n    const paginationMiddlePage = visiblePages / 2\n    if (value - paginationMiddlePage <= 0 || value > pages) {\n      start = 1\n    } else {\n      start = value + paginationMiddlePage > pages\n        ? pages - visiblePages + 1\n        : Math.ceil(value - paginationMiddlePage)\n    }\n  }\n\n  const range: Array<'...' | number> = []\n\n  for (let i = 0; i < visiblePages; i++) {\n    range.push(start + i)\n  }\n\n  if (includeBoundary) {\n    start !== 1 && range.splice(0, 2, 1, '...')\n    range[range.length - 1] !== pages && range.splice(-2, 2, '...', pages)\n  }\n\n  return range\n}\n","<template>\n  <va-button-group\n    v-if=\"showPagination\"\n    class=\"va-pagination\"\n    :flat=\"$props.flat\"\n    :size=\"$props.size\"\n    :color=\"$props.color\"\n    outline\n  >\n    <va-button\n      v-if=\"showBoundaryLinks\"\n      :disabled=\"$props.disabled || currentValue === 1\"\n      :icon=\"$props.boundaryIconLeft\"\n      @click=\"onUserInput(1)\"\n    />\n    <va-button\n      v-if=\"showDirectionLinks\"\n      outline\n      :disabled=\"$props.disabled || currentValue === 1\"\n      :icon=\"$props.directionIconLeft\"\n      @click=\"onUserInput(currentValue - 1)\"\n    />\n    <slot v-if=\"!$props.input\">\n      <va-button\n        v-for=\"(n, i) in paginationRange\"\n        :key=\"i\"\n        :style=\"activeButtonStyle(n)\"\n        :disabled=\"$props.disabled || n === '...'\"\n        :class=\"{ 'va-button--ellipsis': n === '...'}\"\n        @click=\"onUserInput(n)\"\n        outline\n      >\n        {{ n }}\n      </va-button>\n    </slot>\n    <input\n      v-else\n      ref=\"htmlInput\"\n      class=\"va-pagination__input va-button\"\n      :style=\"{\n        cursor: 'default',\n        color: getColor($props.color),\n        opacity: $props.disabled ? 0.4 : 1\n      }\"\n      :class=\"{ 'va-pagination__input--flat': $props.flat }\"\n      @keydown.enter=\"changeValue\"\n      @focus=\"focusInput\"\n      @blur=\"changeValue\"\n      :disabled=\"$props.disabled\"\n      :placeholder=\"`${currentValue}/${lastPage}`\"\n      v-model=\"inputValue\"\n    />\n    <va-button\n      v-if=\"showDirectionLinks\"\n      outline\n      :disabled=\"$props.disabled || currentValue === lastPage\"\n      :icon=\"$props.directionIconRight\"\n      @click=\"onUserInput(currentValue + 1)\"\n    />\n    <va-button\n      v-if=\"showBoundaryLinks\"\n      outline\n      :disabled=\"$props.disabled || currentValue === lastPage\"\n      :icon=\"$props.boundaryIconRight\"\n      @click=\"onUserInput(lastPage)\"\n    />\n  </va-button-group>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, watch, PropType, ref, Ref, computed, nextTick } from 'vue'\n\nimport { __DEV__ } from '../../utils/global-utils'\nimport { useColors } from '../../composables/useColor'\nimport { useStateful, useStatefulProps, useStatefulEmits } from '../../composables/useStateful'\nimport { useTextColor } from '../../composables/useTextColor'\n\nimport VaButtonGroup from '../va-button-group'\nimport VaButton from '../va-button'\n\nimport { setPaginationRange } from './setPaginationRange'\n\nexport default defineComponent({\n  name: 'VaPagination',\n  components: { VaButtonGroup, VaButton },\n  emits: useStatefulEmits,\n  props: {\n    ...useStatefulProps,\n    modelValue: { type: Number as PropType<number>, default: 1 },\n    visiblePages: { type: Number as PropType<number>, default: 0 },\n    pages: { type: Number as PropType<number>, default: 0 },\n    disabled: { type: Boolean as PropType<boolean>, default: false },\n    color: { type: String as PropType<string>, default: 'primary' },\n    size: {\n      type: String as PropType<'medium' | 'small' | 'large'>,\n      default: 'medium',\n      validator: (v: string) => ['medium', 'small', 'large'].includes(v),\n    },\n\n    boundaryLinks: { type: Boolean as PropType<boolean>, default: true },\n    boundaryNumbers: { type: Boolean as PropType<boolean>, default: false },\n    directionLinks: { type: Boolean as PropType<boolean>, default: true },\n    input: { type: Boolean as PropType<boolean>, default: false },\n    hideOnSinglePage: { type: Boolean as PropType<boolean>, default: false },\n    flat: { type: Boolean as PropType<boolean>, default: false },\n    total: { type: Number as PropType<number>, default: null },\n    pageSize: { type: Number as PropType<number>, default: null },\n    boundaryIconLeft: { type: String as PropType<string>, default: 'first_page' },\n    boundaryIconRight: { type: String as PropType<string>, default: 'last_page' },\n    directionIconLeft: { type: String as PropType<string>, default: 'chevron_left' },\n    directionIconRight: { type: String as PropType<string>, default: 'chevron_right' },\n  },\n  setup (props, { emit }) {\n    const inputValue = ref('')\n    const htmlInput: Ref<HTMLInputElement | null> = ref(null)\n\n    const usedTotal = computed(() => !!((props.total || props.pageSize === 0) && props.pageSize))\n\n    const { valueComputed } = useStateful<number>(props, emit)\n\n    const { textColorComputed } = useTextColor(props.color)\n\n    const currentValue = computed({\n      get: () => usedTotal.value ? Math.ceil(valueComputed.value / props.pageSize) || 1 : valueComputed.value,\n      set: (value) => { valueComputed.value = value },\n    })\n\n    const paginationRange = computed(() => {\n      const { visiblePages, total, pageSize, boundaryNumbers, pages } = props\n\n      const value = currentValue.value || 1\n      const totalPages = usedTotal.value ? Math.ceil(total / pageSize) : pages\n\n      return setPaginationRange(value, visiblePages, totalPages, boundaryNumbers)\n    })\n\n    const lastPage = computed(() => usedTotal.value ? Math.ceil(props.total / props.pageSize) || 1 : props.pages)\n\n    const IsLstPageNotVisible = computed(() => (!!props.visiblePages && lastPage.value > props.visiblePages))\n\n    const showBoundaryLinks = computed(() => {\n      const { boundaryLinks, boundaryNumbers, input } = props\n\n      return input || (IsLstPageNotVisible.value && boundaryLinks && !boundaryNumbers)\n    })\n\n    const showDirectionLinks = computed(() => props.input || (IsLstPageNotVisible.value && props.directionLinks))\n\n    const showPagination = computed(() => lastPage.value > 1 || (!props.hideOnSinglePage && lastPage.value <= 1))\n\n    const focusInput = () => {\n      inputValue.value = `${currentValue.value}`\n\n      nextTick(() => htmlInput.value?.setSelectionRange(0, htmlInput.value.value.length))\n    }\n\n    const onUserInput = (pageNum: number | '...') => {\n      if (pageNum === '...' || pageNum < 1 || pageNum > lastPage.value) { return }\n\n      currentValue.value = usedTotal.value ? (pageNum - 1) * props.pageSize + 1 : pageNum\n    }\n\n    const resetInput = () => {\n      inputValue.value = ''\n      htmlInput.value?.blur()\n    }\n\n    const changeValue = () => {\n      if (+inputValue.value === currentValue.value) {\n        resetInput()\n      }\n\n      if (!inputValue.value.length) { return }\n\n      let pageNum = Number.parseInt(inputValue.value)\n\n      switch (true) {\n        case pageNum < 1:\n          pageNum = 1; break\n        case pageNum > lastPage.value:\n          pageNum = lastPage.value; break\n        case isNaN(pageNum):\n          pageNum = currentValue.value; break\n        default: break\n      }\n\n      onUserInput(pageNum)\n      resetInput()\n    }\n\n    const { getColor } = useColors()\n\n    const activeButtonStyle = (buttonValue: number | '...') => {\n      if (buttonValue === currentValue.value) {\n        return {\n          backgroundColor: getColor(props.color),\n          color: textColorComputed.value,\n        }\n      }\n\n      return {\n        color: getColor(props.color),\n      }\n    }\n\n    watch([usedTotal, () => props.pages], () => {\n      if (__DEV__ && usedTotal.value && props.pages) {\n        throw new Error('Please, use either `total` and `page-size` props, or `pages`.')\n      }\n    })\n\n    return {\n      getColor,\n      currentValue,\n      lastPage,\n      changeValue,\n      inputValue,\n      showPagination,\n      showBoundaryLinks,\n      onUserInput,\n      activeButtonStyle,\n      showDirectionLinks,\n      paginationRange,\n      focusInput,\n    }\n  },\n})\n</script>\n\n<style lang='scss'>\n@import \"../../styles/resources\";\n@import \"variables\";\n\n.va-pagination {\n  font-family: var(--va-font-family);\n\n  &__input {\n    border-style: var(--va-pagination-input-border-style);\n    border-width: var(--va-pagination-input-border-width);\n    text-align: var(--va-pagination-input-text-align);\n    font-size: var(--va-pagination-input-font-size);\n\n    &--flat {\n      border-top-width: var(--va-pagination-input-flat-border-top-width);\n    }\n  }\n\n  .va-button {\n    &.va-input {\n      cursor: default;\n    }\n\n    &--ellipsis {\n      cursor: default;\n      opacity: 1;\n    }\n\n    &--ellipsis > .va-button__content {\n      opacity: 0.4;\n    }\n\n    &--outline.va-button--disabled {\n      opacity: 1;\n    }\n\n    &--outline.va-button--disabled > .va-button__content {\n      opacity: 0.4;\n    }\n  }\n}\n</style>\n","import withConfigTransport from '../../services/config-transport/withConfigTransport'\nimport VaPagination from './VaPagination.vue'\n\nexport default withConfigTransport(VaPagination)\n"],"names":["defineComponent","name","components","VaButtonGroup","VaButton","emits","useStatefulEmits","props","useStatefulProps","modelValue","type","Number","default","visiblePages","pages","disabled","Boolean","color","String","size","validator","v","includes","boundaryLinks","boundaryNumbers","directionLinks","input","hideOnSinglePage","flat","total","pageSize","boundaryIconLeft","boundaryIconRight","directionIconLeft","directionIconRight","setup","emit","inputValue","ref","htmlInput","usedTotal","computed","valueComputed","useStateful","textColorComputed","useTextColor","currentValue","get","value","Math","ceil","set","paginationRange","includeBoundary","start","paginationMiddlePage","range","i","push","splice","length","setPaginationRange","lastPage","IsLstPageNotVisible","showBoundaryLinks","showDirectionLinks","showPagination","onUserInput","pageNum","resetInput","blur","getColor","useColors","watch","__DEV__","Error","changeValue","parseInt","isNaN","activeButtonStyle","buttonValue","backgroundColor","focusInput","nextTick","setSelectionRange","_ctx","_mergeProps","class","outline","_createBlock","icon","onClick","style","onKeydown","onFocus","onBlur","placeholder","_renderSlot","n","key","withConfigTransport","VaPagination"],"mappings":"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"}