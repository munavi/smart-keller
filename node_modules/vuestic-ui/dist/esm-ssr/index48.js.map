{"version":3,"file":"index48.js","sources":["../../src/components/va-tree-view/types/index.ts","../../src/components/va-tree-view/VaTreeView.vue","../../src/components/va-tree-view/VaTreeView.vue?vue&type=template&id=5f8eab4b&lang.js","../../src/components/va-tree-view/VaTreeNode/VaTreeNode.vue","../../src/components/va-tree-view/VaTreeNode/VaTreeNode.vue?vue&type=template&id=55056222&lang.js","../../src/components/va-tree-view/VaTreeNode/index.ts","../../src/components/va-tree-view/SquareWithIcon/SquareWithIcon.vue","../../src/components/va-tree-view/SquareWithIcon/SquareWithIcon.vue?vue&type=template&id=2cbaf102&lang.js","../../src/components/va-tree-view/VaTreeCategory/VaTreeCategory.vue","../../src/components/va-tree-view/VaTreeCategory/VaTreeCategory.vue?vue&type=template&id=5e011da2&lang.js","../../src/components/va-tree-view/VaTreeCategory/index.ts","../../src/components/va-tree-view/index.ts"],"sourcesContent":["import { ComponentPublicInstance } from 'vue'\nimport VaTreeNode from '../VaTreeNode/VaTreeNode.vue'\n\nexport const TreeViewKey = Symbol('TreeView')\nexport const TreeCategoryKey = Symbol('TreeCategory')\nexport const TreeNodeKey = Symbol('TreeNode')\n\nexport interface TreeNodeCommon<T> {\n  onChildMounted: (value: T) => void,\n  onChildUnmounted: (value: T) => void,\n}\n\nexport interface TreeCategoryProps {\n  label: string | number,\n  isOpen: boolean,\n  icon: string,\n  color: string,\n}\n\nexport interface TreeViewMethods<T> {\n  onChildMounted: (value: T) => void,\n  onChildUnmounted: (value: T) => void,\n}\n\nexport interface TreeCategory {\n  treeView: TreeViewMethods<TreeCategory>,\n  nodes: ComponentPublicInstance<TreeCategory | typeof VaTreeNode>[],\n  isOpenCached: boolean | undefined,\n  collapse: () => void,\n  expand: () => void,\n  toggle: (e: MouseEvent) => void,\n  onChildMounted: (node: ComponentPublicInstance<TreeCategory | typeof VaTreeNode>) => void,\n  onChildUnmounted: (removableNode: ComponentPublicInstance<TreeCategory | typeof VaTreeNode>) => void,\n}\n\nexport type TreeNodeComponent = ComponentPublicInstance<TreeCategory | typeof VaTreeNode>\n\nexport interface ITreeNodeProps {\n  highlighted: boolean,\n  icon: string,\n  iconRight: string,\n  color: string,\n}\n\nexport interface TreeViewProps {\n  color: string\n}\n\nexport interface TreeView {\n  collapse: () => void,\n  expand: () => void,\n}\n\nexport interface TreeViewProvide extends TreeViewProps {\n  onChildMounted: (category: TreeCategory) => void\n  onChildUnmounted: (removableCategory: TreeCategory) => void\n}\n","<template>\n  <div class=\"va-tree-view\">\n    <slot />\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, nextTick, provide, ref } from 'vue'\nimport { useColor } from '../../composables/useColor'\nimport { TreeCategory, TreeViewKey, TreeViewProvide } from './types'\n\nexport default defineComponent({\n  name: 'VaTreeView',\n  props: {\n    color: {\n      type: String,\n      default: '',\n    },\n  },\n  setup: (props) => {\n    const categories = ref<TreeCategory[]>([])\n\n    const collapse = () => {\n      nextTick(() => {\n        categories.value.forEach((child: TreeCategory) => {\n          child.collapse()\n        })\n      })\n    }\n\n    const expand = () => {\n      nextTick(() => {\n        categories.value.forEach((child: TreeCategory) => {\n          child.expand()\n        })\n      })\n    }\n\n    const onChildMounted = (category: TreeCategory) => {\n      categories.value.push(category)\n    }\n\n    const onChildUnmounted = (removableCategory: TreeCategory) => {\n      categories.value = categories.value.filter((category: TreeCategory) => category !== removableCategory)\n    }\n\n    const treeView: TreeViewProvide = {\n      color: props.color,\n      onChildMounted,\n      onChildUnmounted,\n    }\n\n    provide(TreeViewKey, treeView)\n\n    return {\n      collapse,\n      expand,\n      ...useColor(props),\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import 'variables';\n\n.va-tree-view {\n  padding: var(--va-tree-view-padding);\n  font-family: var(--va-font-family);\n}\n</style>\n","<template>\n  <div class=\"va-tree-view\">\n    <slot />\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, nextTick, provide, ref } from 'vue'\nimport { useColor } from '../../composables/useColor'\nimport { TreeCategory, TreeViewKey, TreeViewProvide } from './types'\n\nexport default defineComponent({\n  name: 'VaTreeView',\n  props: {\n    color: {\n      type: String,\n      default: '',\n    },\n  },\n  setup: (props) => {\n    const categories = ref<TreeCategory[]>([])\n\n    const collapse = () => {\n      nextTick(() => {\n        categories.value.forEach((child: TreeCategory) => {\n          child.collapse()\n        })\n      })\n    }\n\n    const expand = () => {\n      nextTick(() => {\n        categories.value.forEach((child: TreeCategory) => {\n          child.expand()\n        })\n      })\n    }\n\n    const onChildMounted = (category: TreeCategory) => {\n      categories.value.push(category)\n    }\n\n    const onChildUnmounted = (removableCategory: TreeCategory) => {\n      categories.value = categories.value.filter((category: TreeCategory) => category !== removableCategory)\n    }\n\n    const treeView: TreeViewProvide = {\n      color: props.color,\n      onChildMounted,\n      onChildUnmounted,\n    }\n\n    provide(TreeViewKey, treeView)\n\n    return {\n      collapse,\n      expand,\n      ...useColor(props),\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import 'variables';\n\n.va-tree-view {\n  padding: var(--va-tree-view-padding);\n  font-family: var(--va-font-family);\n}\n</style>\n","<template>\n  <div\n    class=\"va-tree-node\"\n    :class=\"{ 'va-tree-node--highlighted': $props.highlighted }\"\n  >\n    <div\n      class=\"va-tree-node__checkbox\"\n      v-if=\"$slots.checkbox\"\n    >\n      <slot name=\"checkbox\" />\n    </div>\n    <div\n      class=\"va-tree-node__icon\"\n      v-if=\"$props.icon\"\n    >\n      <va-icon\n        :name=\"$props.icon\"\n        :color=\"theme.getColor('info')\"\n        :size=\"24\"\n      />\n    </div>\n    <div class=\"va-tree-node__label\">\n      <slot />\n    </div>\n    <div\n      class=\"va-tree-node__icon-right\"\n      v-if=\"$props.iconRight\"\n      :size=\"24\"\n    >\n      <va-icon\n        :name=\"$props.iconRight\"\n        :color=\"theme.getColor('info')\"\n      />\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, inject, onBeforeUnmount, onMounted, provide } from 'vue'\nimport { useColor } from '../../../composables/useColor'\nimport VaIcon from '../../va-icon'\nimport { TreeNodeCommon, TreeCategoryKey, TreeNodeKey } from '../types'\n\nexport default defineComponent({\n  name: 'VaTreeNode',\n  components: { VaIcon },\n  props: {\n    highlighted: {\n      type: Boolean,\n      default: false,\n    },\n    icon: {\n      type: String,\n      default: '',\n    },\n    iconRight: {\n      type: String,\n      default: '',\n    },\n    color: {\n      type: String,\n      default: 'primary',\n    },\n  },\n  setup (props) {\n    const { theme } = useColor(props)\n    const treeCategory: TreeNodeCommon<typeof TreeNodeKey> = inject(TreeCategoryKey, {\n      onChildMounted: (value: typeof TreeNodeKey) => undefined,\n      onChildUnmounted: (value: typeof TreeNodeKey) => undefined,\n    })\n\n    provide(TreeNodeKey, {\n      props: computed(() => props),\n    })\n\n    onMounted(() => treeCategory && treeCategory.onChildMounted(TreeNodeKey))\n    onBeforeUnmount(() => treeCategory && treeCategory.onChildUnmounted(TreeNodeKey))\n\n    return {\n      treeCategory,\n      theme,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"../../../styles/resources\";\n@import 'variables.scss';\n\n.va-tree-node {\n  display: var(--va-tree-node-display);\n  align-items: var(--va-tree-node-align-items);\n  font-family: var(--va-font-family);\n\n  .form-group {\n    margin-bottom: 0;\n  }\n\n  &__icon {\n    margin-right: var(--va-tree-node-icon-margin-right);\n  }\n\n  &__icon-right {\n    margin-left: var(--va-tree-node-icon-margin-right);\n  }\n\n  &__label {\n    flex-grow: var(--va-tree-node-label-flex-grow);\n    word-wrap: var(--va-tree-node-label-word-wrap);\n    overflow: var(--va-tree-node-label-overflow);\n    line-height: var(--va-tree-node-label-line-height);\n  }\n\n  &--highlighted #{&}__label {\n    background-color: var(--va-tree-node-label-highlighted-bg);\n  }\n}\n</style>\n","<template>\n  <div\n    class=\"va-tree-node\"\n    :class=\"{ 'va-tree-node--highlighted': $props.highlighted }\"\n  >\n    <div\n      class=\"va-tree-node__checkbox\"\n      v-if=\"$slots.checkbox\"\n    >\n      <slot name=\"checkbox\" />\n    </div>\n    <div\n      class=\"va-tree-node__icon\"\n      v-if=\"$props.icon\"\n    >\n      <va-icon\n        :name=\"$props.icon\"\n        :color=\"theme.getColor('info')\"\n        :size=\"24\"\n      />\n    </div>\n    <div class=\"va-tree-node__label\">\n      <slot />\n    </div>\n    <div\n      class=\"va-tree-node__icon-right\"\n      v-if=\"$props.iconRight\"\n      :size=\"24\"\n    >\n      <va-icon\n        :name=\"$props.iconRight\"\n        :color=\"theme.getColor('info')\"\n      />\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, inject, onBeforeUnmount, onMounted, provide } from 'vue'\nimport { useColor } from '../../../composables/useColor'\nimport VaIcon from '../../va-icon'\nimport { TreeNodeCommon, TreeCategoryKey, TreeNodeKey } from '../types'\n\nexport default defineComponent({\n  name: 'VaTreeNode',\n  components: { VaIcon },\n  props: {\n    highlighted: {\n      type: Boolean,\n      default: false,\n    },\n    icon: {\n      type: String,\n      default: '',\n    },\n    iconRight: {\n      type: String,\n      default: '',\n    },\n    color: {\n      type: String,\n      default: 'primary',\n    },\n  },\n  setup (props) {\n    const { theme } = useColor(props)\n    const treeCategory: TreeNodeCommon<typeof TreeNodeKey> = inject(TreeCategoryKey, {\n      onChildMounted: (value: typeof TreeNodeKey) => undefined,\n      onChildUnmounted: (value: typeof TreeNodeKey) => undefined,\n    })\n\n    provide(TreeNodeKey, {\n      props: computed(() => props),\n    })\n\n    onMounted(() => treeCategory && treeCategory.onChildMounted(TreeNodeKey))\n    onBeforeUnmount(() => treeCategory && treeCategory.onChildUnmounted(TreeNodeKey))\n\n    return {\n      treeCategory,\n      theme,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"../../../styles/resources\";\n@import 'variables.scss';\n\n.va-tree-node {\n  display: var(--va-tree-node-display);\n  align-items: var(--va-tree-node-align-items);\n  font-family: var(--va-font-family);\n\n  .form-group {\n    margin-bottom: 0;\n  }\n\n  &__icon {\n    margin-right: var(--va-tree-node-icon-margin-right);\n  }\n\n  &__icon-right {\n    margin-left: var(--va-tree-node-icon-margin-right);\n  }\n\n  &__label {\n    flex-grow: var(--va-tree-node-label-flex-grow);\n    word-wrap: var(--va-tree-node-label-word-wrap);\n    overflow: var(--va-tree-node-label-overflow);\n    line-height: var(--va-tree-node-label-line-height);\n  }\n\n  &--highlighted #{&}__label {\n    background-color: var(--va-tree-node-label-highlighted-bg);\n  }\n}\n</style>\n","import withConfigTransport from '../../../services/config-transport/withConfigTransport'\nimport VaTreeNode from './VaTreeNode.vue'\n\nexport default withConfigTransport(VaTreeNode as any)\n","<template>\n  <div\n    class=\"square-with-icon\"\n    :style=\"{ backgroundColor: colorComputed }\"\n  >\n    <va-icon :name=\"$props.icon\" />\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport { useColor } from '../../../composables/useColor'\n\n// Components\nimport VaIcon from '../../va-icon'\n\nexport default defineComponent({\n  name: 'SquareWithIcon',\n  components: { VaIcon },\n  props: {\n    icon: {\n      type: String,\n      default: '',\n      required: true,\n    },\n    color: {\n      type: String,\n      default: 'primary',\n    },\n  },\n  setup (props) {\n    const { colorComputed } = useColor(props)\n\n    return {\n      colorComputed,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"../../../styles/resources\";\n@import 'variables';\n\n.square-with-icon {\n  display: var(--square-with-icon-display);\n  justify-content: var(--square-with-icon-justify-content);\n  align-items: var(--square-with-icon-align-items);\n  color: var(--square-with-icon-color);\n  background-color: var(--square-with-icon-background-color);\n  border-radius: var(--square-with-icon-border-radius);\n  width: var(--square-with-icon-width);\n  height: var(--square-with-icon-height);\n}\n</style>\n","<template>\n  <div\n    class=\"square-with-icon\"\n    :style=\"{ backgroundColor: colorComputed }\"\n  >\n    <va-icon :name=\"$props.icon\" />\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport { useColor } from '../../../composables/useColor'\n\n// Components\nimport VaIcon from '../../va-icon'\n\nexport default defineComponent({\n  name: 'SquareWithIcon',\n  components: { VaIcon },\n  props: {\n    icon: {\n      type: String,\n      default: '',\n      required: true,\n    },\n    color: {\n      type: String,\n      default: 'primary',\n    },\n  },\n  setup (props) {\n    const { colorComputed } = useColor(props)\n\n    return {\n      colorComputed,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"../../../styles/resources\";\n@import 'variables';\n\n.square-with-icon {\n  display: var(--square-with-icon-display);\n  justify-content: var(--square-with-icon-justify-content);\n  align-items: var(--square-with-icon-align-items);\n  color: var(--square-with-icon-color);\n  background-color: var(--square-with-icon-background-color);\n  border-radius: var(--square-with-icon-border-radius);\n  width: var(--square-with-icon-width);\n  height: var(--square-with-icon-height);\n}\n</style>\n","<template>\n  <div class=\"va-tree-category\">\n    <div\n      class=\"va-tree-category__header\"\n      @click=\"toggle\"\n    >\n      <div class=\"va-tree-category__header-switcher\">\n        <square-with-icon\n          :icon=\"isOpenCached ? 'remove' : 'add'\"\n          :color=\"colorComputed\"\n        />\n      </div>\n      <div\n        class=\"va-tree-category__header-checkbox\"\n        v-if=\"$slots.checkbox\"\n      >\n        <slot name=\"checkbox\" />\n      </div>\n      <div\n        class=\"va-tree-category__header-icon\"\n        v-if=\"$props.icon\"\n      >\n        <va-icon\n          :name=\"$props.icon\"\n          :color=\"theme.getColor('info')\"\n        />\n      </div>\n      <div class=\"va-tree-category__header-label\">\n        {{ $props.label }}\n      </div>\n    </div>\n\n    <div\n      class=\"va-tree-category__list-container\"\n      v-if=\"isOpenCached\"\n    >\n      <div class=\"va-tree-category__list-internal-container\">\n        <slot />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {\n  ComponentPublicInstance,\n  defineComponent,\n  inject,\n  nextTick,\n  onBeforeUnmount,\n  onMounted,\n  provide,\n  ref,\n  Ref,\n  watch,\n} from 'vue'\nimport SquareWithIcon from '../SquareWithIcon/SquareWithIcon.vue'\nimport VaIcon from '../../va-icon/VaIcon.vue'\nimport { useColor } from '../../../composables/useColor'\nimport { TreeCategory, TreeNodeCommon, TreeCategoryKey, TreeNodeComponent, TreeViewKey } from '../types'\nimport VaTreeNode from '../VaTreeNode/VaTreeNode.vue'\n\nexport default defineComponent({\n  name: 'VaTreeCategory',\n  components: {\n    SquareWithIcon,\n    VaIcon,\n  },\n  props: {\n    label: {\n      type: [String, Number],\n      default: '',\n    },\n    isOpen: {\n      type: Boolean,\n      default: false,\n    },\n    icon: {\n      type: String,\n      default: '',\n    },\n    color: {\n      type: String,\n      default: 'primary',\n    },\n  },\n  setup: (props) => {\n    const nodes: Ref<TreeNodeComponent[]> = ref([])\n    const isOpenCached = ref<boolean | undefined>(false)\n\n    const onChildMounted = (node: TreeNodeComponent) => {\n      nodes.value.push(node)\n    }\n\n    const onChildUnmounted = (removableNode: TreeNodeComponent) => {\n      nodes.value = nodes.value.filter((node: TreeNodeComponent) => node !== removableNode)\n    }\n\n    const treeView: TreeNodeCommon<TreeCategory | typeof VaTreeNode> = inject(TreeViewKey, {\n      onChildMounted: (value: TreeCategory | typeof VaTreeNode) => undefined,\n      onChildUnmounted: (value: TreeCategory | typeof VaTreeNode) => undefined,\n    })\n\n    const collapse = () => {\n      isOpenCached.value = false\n\n      nextTick(() => {\n        nodes.value.forEach((child: ComponentPublicInstance) => {\n          if (child.$options.name === 'va-tree-category') {\n            (child as ComponentPublicInstance<TreeCategory>).collapse()\n          }\n        })\n      })\n    }\n\n    const expand = () => {\n      isOpenCached.value = true\n\n      nextTick(() => {\n        nodes.value.forEach((child: TreeNodeComponent) => {\n          child.expand?.()\n        })\n      })\n    }\n\n    const toggle = (e: MouseEvent) => {\n      if (!(e.target as HTMLElement).classList.contains('va-checkbox__input')) {\n        isOpenCached.value = !isOpenCached.value\n      }\n    }\n\n    watch(\n      () => props.isOpen,\n      (isOpen) => {\n        isOpenCached.value = isOpen\n      },\n      { immediate: true })\n\n    const treeCategory: TreeCategory = {\n      treeView,\n      nodes: nodes.value,\n      isOpenCached: isOpenCached.value,\n      onChildMounted,\n      onChildUnmounted,\n      collapse,\n      expand,\n      toggle,\n    }\n\n    provide(TreeCategoryKey, treeCategory)\n    onMounted(() => treeView?.onChildMounted(treeCategory))\n    onBeforeUnmount(() => treeView?.onChildUnmounted(treeCategory))\n\n    return {\n      treeCategory,\n      treeView,\n      nodes,\n      isOpenCached,\n      collapse,\n      expand,\n      toggle,\n      ...useColor(props),\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"../../../styles/resources\";\n@import 'variables';\n\n.va-tree-category {\n  font-family: var(--va-font-family);\n\n  &__header {\n    cursor: var(--va-tree-category-header-cursor);\n    display: var(--va-tree-category-header-display);\n    align-items: var(--va-tree-category-header-align-items);\n  }\n\n  &__header-switcher {\n    margin-right: 0.5rem;\n  }\n\n  &__header-checkbox {\n    margin-right: var(--va-tree-category-header-checkbox-margin-right);\n    height: var(--va-tree-category-header-checkbox-height);\n    width: var(--va-tree-category-header-checkbox-width);\n    display: var(--va-tree-category-header-checkbox-display);\n    align-items: var(--va-tree-category-header-checkbox-align-items);\n    justify-content: var(--va-tree-category-header-checkbox-justify-content);\n\n    .va-checkbox__square {\n      width: 1.5rem;\n      height: 1.5rem;\n      flex: 0 0 1.5rem;\n    }\n  }\n\n  &__header-icon {\n    color: var(--va-tree-category-header-icon-color);\n    margin-right: var(--va-tree-category-header-icon-margin-right);\n    font-size: var(--va-tree-category-header-icon-font-size);\n    line-height: var(--va-tree-category-header-icon-line-height);\n  }\n\n  &__header-label {\n    word-wrap: var(--va-tree-category-header-label-word-wrap);\n    overflow: var(--va-tree-category-header-label-overflow);\n    line-height: var(--va-tree-category-header-label-line-height);\n  }\n\n  &__list-container {\n    margin-top: var(--va-tree-category-list-container-margin-top);\n    padding-left: var(--va-tree-category-list-container-padding-left);\n  }\n\n  &__list-internal-container {\n    background-image: linear-gradient(#adb3b9 33%, rgba(255, 255, 255, 0) 0%);\n    background-position: left;\n    background-size: 1px 3px;\n    background-repeat: repeat-y;\n    padding-left: 1.1875rem;\n  }\n\n  & + .va-tree-category,\n  .va-tree-node + .va-tree-node,\n  .va-tree-category + .va-tree-node,\n  .va-tree-node + .va-tree-category {\n    margin-top: 0.75rem;\n  }\n}\n</style>\n","<template>\n  <div class=\"va-tree-category\">\n    <div\n      class=\"va-tree-category__header\"\n      @click=\"toggle\"\n    >\n      <div class=\"va-tree-category__header-switcher\">\n        <square-with-icon\n          :icon=\"isOpenCached ? 'remove' : 'add'\"\n          :color=\"colorComputed\"\n        />\n      </div>\n      <div\n        class=\"va-tree-category__header-checkbox\"\n        v-if=\"$slots.checkbox\"\n      >\n        <slot name=\"checkbox\" />\n      </div>\n      <div\n        class=\"va-tree-category__header-icon\"\n        v-if=\"$props.icon\"\n      >\n        <va-icon\n          :name=\"$props.icon\"\n          :color=\"theme.getColor('info')\"\n        />\n      </div>\n      <div class=\"va-tree-category__header-label\">\n        {{ $props.label }}\n      </div>\n    </div>\n\n    <div\n      class=\"va-tree-category__list-container\"\n      v-if=\"isOpenCached\"\n    >\n      <div class=\"va-tree-category__list-internal-container\">\n        <slot />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {\n  ComponentPublicInstance,\n  defineComponent,\n  inject,\n  nextTick,\n  onBeforeUnmount,\n  onMounted,\n  provide,\n  ref,\n  Ref,\n  watch,\n} from 'vue'\nimport SquareWithIcon from '../SquareWithIcon/SquareWithIcon.vue'\nimport VaIcon from '../../va-icon/VaIcon.vue'\nimport { useColor } from '../../../composables/useColor'\nimport { TreeCategory, TreeNodeCommon, TreeCategoryKey, TreeNodeComponent, TreeViewKey } from '../types'\nimport VaTreeNode from '../VaTreeNode/VaTreeNode.vue'\n\nexport default defineComponent({\n  name: 'VaTreeCategory',\n  components: {\n    SquareWithIcon,\n    VaIcon,\n  },\n  props: {\n    label: {\n      type: [String, Number],\n      default: '',\n    },\n    isOpen: {\n      type: Boolean,\n      default: false,\n    },\n    icon: {\n      type: String,\n      default: '',\n    },\n    color: {\n      type: String,\n      default: 'primary',\n    },\n  },\n  setup: (props) => {\n    const nodes: Ref<TreeNodeComponent[]> = ref([])\n    const isOpenCached = ref<boolean | undefined>(false)\n\n    const onChildMounted = (node: TreeNodeComponent) => {\n      nodes.value.push(node)\n    }\n\n    const onChildUnmounted = (removableNode: TreeNodeComponent) => {\n      nodes.value = nodes.value.filter((node: TreeNodeComponent) => node !== removableNode)\n    }\n\n    const treeView: TreeNodeCommon<TreeCategory | typeof VaTreeNode> = inject(TreeViewKey, {\n      onChildMounted: (value: TreeCategory | typeof VaTreeNode) => undefined,\n      onChildUnmounted: (value: TreeCategory | typeof VaTreeNode) => undefined,\n    })\n\n    const collapse = () => {\n      isOpenCached.value = false\n\n      nextTick(() => {\n        nodes.value.forEach((child: ComponentPublicInstance) => {\n          if (child.$options.name === 'va-tree-category') {\n            (child as ComponentPublicInstance<TreeCategory>).collapse()\n          }\n        })\n      })\n    }\n\n    const expand = () => {\n      isOpenCached.value = true\n\n      nextTick(() => {\n        nodes.value.forEach((child: TreeNodeComponent) => {\n          child.expand?.()\n        })\n      })\n    }\n\n    const toggle = (e: MouseEvent) => {\n      if (!(e.target as HTMLElement).classList.contains('va-checkbox__input')) {\n        isOpenCached.value = !isOpenCached.value\n      }\n    }\n\n    watch(\n      () => props.isOpen,\n      (isOpen) => {\n        isOpenCached.value = isOpen\n      },\n      { immediate: true })\n\n    const treeCategory: TreeCategory = {\n      treeView,\n      nodes: nodes.value,\n      isOpenCached: isOpenCached.value,\n      onChildMounted,\n      onChildUnmounted,\n      collapse,\n      expand,\n      toggle,\n    }\n\n    provide(TreeCategoryKey, treeCategory)\n    onMounted(() => treeView?.onChildMounted(treeCategory))\n    onBeforeUnmount(() => treeView?.onChildUnmounted(treeCategory))\n\n    return {\n      treeCategory,\n      treeView,\n      nodes,\n      isOpenCached,\n      collapse,\n      expand,\n      toggle,\n      ...useColor(props),\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"../../../styles/resources\";\n@import 'variables';\n\n.va-tree-category {\n  font-family: var(--va-font-family);\n\n  &__header {\n    cursor: var(--va-tree-category-header-cursor);\n    display: var(--va-tree-category-header-display);\n    align-items: var(--va-tree-category-header-align-items);\n  }\n\n  &__header-switcher {\n    margin-right: 0.5rem;\n  }\n\n  &__header-checkbox {\n    margin-right: var(--va-tree-category-header-checkbox-margin-right);\n    height: var(--va-tree-category-header-checkbox-height);\n    width: var(--va-tree-category-header-checkbox-width);\n    display: var(--va-tree-category-header-checkbox-display);\n    align-items: var(--va-tree-category-header-checkbox-align-items);\n    justify-content: var(--va-tree-category-header-checkbox-justify-content);\n\n    .va-checkbox__square {\n      width: 1.5rem;\n      height: 1.5rem;\n      flex: 0 0 1.5rem;\n    }\n  }\n\n  &__header-icon {\n    color: var(--va-tree-category-header-icon-color);\n    margin-right: var(--va-tree-category-header-icon-margin-right);\n    font-size: var(--va-tree-category-header-icon-font-size);\n    line-height: var(--va-tree-category-header-icon-line-height);\n  }\n\n  &__header-label {\n    word-wrap: var(--va-tree-category-header-label-word-wrap);\n    overflow: var(--va-tree-category-header-label-overflow);\n    line-height: var(--va-tree-category-header-label-line-height);\n  }\n\n  &__list-container {\n    margin-top: var(--va-tree-category-list-container-margin-top);\n    padding-left: var(--va-tree-category-list-container-padding-left);\n  }\n\n  &__list-internal-container {\n    background-image: linear-gradient(#adb3b9 33%, rgba(255, 255, 255, 0) 0%);\n    background-position: left;\n    background-size: 1px 3px;\n    background-repeat: repeat-y;\n    padding-left: 1.1875rem;\n  }\n\n  & + .va-tree-category,\n  .va-tree-node + .va-tree-node,\n  .va-tree-category + .va-tree-node,\n  .va-tree-node + .va-tree-category {\n    margin-top: 0.75rem;\n  }\n}\n</style>\n","import withConfigTransport from '../../../services/config-transport/withConfigTransport'\nimport VaTreeCategory from './VaTreeCategory.vue'\n\nexport default withConfigTransport(VaTreeCategory as any)\n","import withConfigTransport from '../../services/config-transport/withConfigTransport'\nimport VaTreeView from './VaTreeView.vue'\n\nexport { default as VaTreeNode } from './VaTreeNode'\nexport { default as VaTreeCategory } from './VaTreeCategory'\n\nexport default withConfigTransport(VaTreeView as any)\n"],"names":["TreeViewKey","Symbol","TreeCategoryKey","TreeNodeKey","defineComponent","name","props","color","type","String","default","setup","categories","ref","treeView","onChildMounted","category","value","push","onChildUnmounted","removableCategory","filter","provide","collapse","nextTick","forEach","child","expand","useColor","_mergeProps","class","components","VaIcon","highlighted","Boolean","icon","iconRight","theme","treeCategory","inject","computed","onMounted","onBeforeUnmount","_ctx","checkbox","getColor","size","withConfigTransport","VaTreeNode","required","colorComputed","style","SquareWithIcon","label","Number","isOpen","nodes","isOpenCached","$options","toggle","e","target","classList","contains","watch","immediate","node","removableNode","VaTreeCategory","VaTreeView"],"mappings":"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"}