{"version":3,"file":"index12.js","sources":["../../src/components/va-button-toggle/VaButtonToggle.vue","../../src/components/va-button-toggle/VaButtonToggle.vue?vue&type=template&id=39f0c05a&lang.js","../../src/components/va-button-toggle/index.ts"],"sourcesContent":["<template>\n  <div class=\"va-button-toggle\">\n    <va-button-group\n      :color=\"color\"\n      :textColor=\"textColor\"\n      :rounded=\"rounded\"\n      :outline=\"outline\"\n      :flat=\"flat\"\n      :gradient=\"gradient\"\n    >\n      <va-button\n        v-for=\"option in options\"\n        v-bind=\"getButtonProps(option)\"\n        :key=\"option.value\"\n        :disabled=\"disabled\"\n        :size=\"size\"\n        :class=\"getButtonClass(option.value)\"\n        @click=\"changeValue(option.value)\"\n      >\n        {{ option.label }}\n      </va-button>\n    </va-button-group>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType, computed } from 'vue'\n\nimport { getTextColor, shiftHSLAColor } from '../../services/color-config/color-functions'\nimport { useColors } from '../../composables/useColor'\nimport VaButton from '../va-button'\nimport VaButtonGroup from '../va-button-group'\n\ntype ButtonOption = {\n  value: any,\n  label?: string,\n  icon?: string,\n  iconRight?: string\n}\n\nexport default defineComponent({\n  name: 'VaButtonToggle',\n  components: {\n    VaButtonGroup,\n    VaButton,\n  },\n  emits: ['update:modelValue'],\n  props: {\n    options: {\n      type: Array as PropType<ButtonOption[]>,\n      required: true,\n    },\n    color: { type: String, default: 'primary' },\n    textColor: { type: String, default: undefined },\n    activeButtonTextColor: { type: String },\n    modelValue: { type: [String, Number] as PropType<string | number>, default: '' },\n    outline: { type: Boolean, default: false },\n    flat: { type: Boolean, default: false },\n    rounded: { type: Boolean, default: true },\n    disabled: { type: Boolean, default: false },\n    size: {\n      type: String as PropType<'medium' | 'small' | 'large'>,\n      default: 'medium',\n      validator: (modelValue: 'medium' | 'small' | 'large') => ['medium', 'small', 'large'].includes(modelValue),\n    },\n\n    toggleColor: { type: String, default: '' },\n    gradient: { type: Boolean, default: false },\n  },\n  setup (props, { emit }) {\n    const { getColor } = useColors()\n    const colorComputed = computed(() => getColor(props.color))\n    const toggleColorComputed = computed(() => getColor(props.toggleColor))\n\n    const isFlatOrOutline = computed(() => props.outline || props.flat)\n    const color = computed(() => {\n      if (props.toggleColor) {\n        return toggleColorComputed.value\n      } else {\n        return isFlatOrOutline.value ? colorComputed.value : shiftHSLAColor(colorComputed.value, { l: -6 })\n      }\n    })\n    const textColor = computed(() => props.activeButtonTextColor || getTextColor(colorComputed.value))\n\n    const getButtonProps = (option: ButtonOption = {} as ButtonOption) => {\n      const iconsProps = {\n        icon: option.icon,\n        iconRight: option.iconRight,\n      }\n\n      if (option.value !== props.modelValue) { return iconsProps }\n\n      return {\n        textColor: textColor.value,\n        color: color.value,\n        ...iconsProps,\n        ...(isFlatOrOutline.value && { outline: false, flat: false }),\n      }\n    }\n\n    const getButtonClass = (buttonValue: any) => ({ 'va-button--active': buttonValue === props.modelValue })\n\n    const changeValue = (value: any) => emit('update:modelValue', value)\n\n    return {\n      getButtonProps,\n      getButtonClass,\n      changeValue,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n.va-button-toggle {\n  .va-button {\n    &:focus,\n    &:hover {\n      box-shadow: none !important;\n    }\n  }\n}\n</style>\n","<template>\n  <div class=\"va-button-toggle\">\n    <va-button-group\n      :color=\"color\"\n      :textColor=\"textColor\"\n      :rounded=\"rounded\"\n      :outline=\"outline\"\n      :flat=\"flat\"\n      :gradient=\"gradient\"\n    >\n      <va-button\n        v-for=\"option in options\"\n        v-bind=\"getButtonProps(option)\"\n        :key=\"option.value\"\n        :disabled=\"disabled\"\n        :size=\"size\"\n        :class=\"getButtonClass(option.value)\"\n        @click=\"changeValue(option.value)\"\n      >\n        {{ option.label }}\n      </va-button>\n    </va-button-group>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType, computed } from 'vue'\n\nimport { getTextColor, shiftHSLAColor } from '../../services/color-config/color-functions'\nimport { useColors } from '../../composables/useColor'\nimport VaButton from '../va-button'\nimport VaButtonGroup from '../va-button-group'\n\ntype ButtonOption = {\n  value: any,\n  label?: string,\n  icon?: string,\n  iconRight?: string\n}\n\nexport default defineComponent({\n  name: 'VaButtonToggle',\n  components: {\n    VaButtonGroup,\n    VaButton,\n  },\n  emits: ['update:modelValue'],\n  props: {\n    options: {\n      type: Array as PropType<ButtonOption[]>,\n      required: true,\n    },\n    color: { type: String, default: 'primary' },\n    textColor: { type: String, default: undefined },\n    activeButtonTextColor: { type: String },\n    modelValue: { type: [String, Number] as PropType<string | number>, default: '' },\n    outline: { type: Boolean, default: false },\n    flat: { type: Boolean, default: false },\n    rounded: { type: Boolean, default: true },\n    disabled: { type: Boolean, default: false },\n    size: {\n      type: String as PropType<'medium' | 'small' | 'large'>,\n      default: 'medium',\n      validator: (modelValue: 'medium' | 'small' | 'large') => ['medium', 'small', 'large'].includes(modelValue),\n    },\n\n    toggleColor: { type: String, default: '' },\n    gradient: { type: Boolean, default: false },\n  },\n  setup (props, { emit }) {\n    const { getColor } = useColors()\n    const colorComputed = computed(() => getColor(props.color))\n    const toggleColorComputed = computed(() => getColor(props.toggleColor))\n\n    const isFlatOrOutline = computed(() => props.outline || props.flat)\n    const color = computed(() => {\n      if (props.toggleColor) {\n        return toggleColorComputed.value\n      } else {\n        return isFlatOrOutline.value ? colorComputed.value : shiftHSLAColor(colorComputed.value, { l: -6 })\n      }\n    })\n    const textColor = computed(() => props.activeButtonTextColor || getTextColor(colorComputed.value))\n\n    const getButtonProps = (option: ButtonOption = {} as ButtonOption) => {\n      const iconsProps = {\n        icon: option.icon,\n        iconRight: option.iconRight,\n      }\n\n      if (option.value !== props.modelValue) { return iconsProps }\n\n      return {\n        textColor: textColor.value,\n        color: color.value,\n        ...iconsProps,\n        ...(isFlatOrOutline.value && { outline: false, flat: false }),\n      }\n    }\n\n    const getButtonClass = (buttonValue: any) => ({ 'va-button--active': buttonValue === props.modelValue })\n\n    const changeValue = (value: any) => emit('update:modelValue', value)\n\n    return {\n      getButtonProps,\n      getButtonClass,\n      changeValue,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n.va-button-toggle {\n  .va-button {\n    &:focus,\n    &:hover {\n      box-shadow: none !important;\n    }\n  }\n}\n</style>\n","import withConfigTransport from '../../services/config-transport/withConfigTransport'\nimport VaButtonToggle from './VaButtonToggle.vue'\n\nexport default withConfigTransport(VaButtonToggle)\n"],"names":["defineComponent","name","components","VaButtonGroup","VaButton","emits","props","options","type","Array","required","color","String","default","textColor","undefined","activeButtonTextColor","modelValue","Number","outline","Boolean","flat","rounded","disabled","size","validator","includes","toggleColor","gradient","setup","emit","getColor","useColors","colorComputed","computed","toggleColorComputed","isFlatOrOutline","value","shiftHSLAColor","l","getTextColor","getButtonProps","option","iconsProps","icon","iconRight","getButtonClass","buttonValue","changeValue","class","_createElementBlock","_hoisted_1","_createVNode","_ctx","_createBlock","_mergeProps","key","onClick","label","withConfigTransport","VaButtonToggle"],"mappings":"yvBAwCA,MAAeA,EAAgB,CAC7BC,KAAM,iBACNC,WAAY,CACVC,cAAAA,EACAC,SAAAA,GAEFC,MAAO,CAAC,qBACRC,MAAO,CACLC,QAAS,CACPC,KAAMC,MACNC,UAAU,GAEZC,MAAO,CAAEH,KAAMI,OAAQC,QAAS,WAChCC,UAAW,CAAEN,KAAMI,OAAQC,aAASE,GACpCC,sBAAuB,CAAER,KAAMI,QAC/BK,WAAY,CAAET,KAAM,CAACI,OAAQM,QAAsCL,QAAS,IAC5EM,QAAS,CAAEX,KAAMY,QAASP,SAAS,GACnCQ,KAAM,CAAEb,KAAMY,QAASP,SAAS,GAChCS,QAAS,CAAEd,KAAMY,QAASP,SAAS,GACnCU,SAAU,CAAEf,KAAMY,QAASP,SAAS,GACpCW,KAAM,CACJhB,KAAMI,OACNC,QAAS,SACTY,UAAYR,GAA6C,CAAC,SAAU,QAAS,SAASS,SAAST,IAGjGU,YAAa,CAAEnB,KAAMI,OAAQC,QAAS,IACtCe,SAAU,CAAEpB,KAAMY,QAASP,SAAS,IAEtCgB,MAAOvB,GAAOwB,KAAEA,IACd,MAAMC,SAAEA,GAAaC,IACfC,EAAgBC,GAAS,IAAMH,EAASzB,EAAMK,SAC9CwB,EAAsBD,GAAS,IAAMH,EAASzB,EAAMqB,eAEpDS,EAAkBF,GAAS,IAAM5B,EAAMa,SAAWb,EAAMe,OACxDV,EAAQuB,GAAS,IACjB5B,EAAMqB,YACDQ,EAAoBE,MAEpBD,EAAgBC,MAAQJ,EAAcI,MAAQC,EAAeL,EAAcI,MAAO,CAAEE,GAAI,MAG7FzB,EAAYoB,GAAS,IAAM5B,EAAMU,uBAAyBwB,EAAaP,EAAcI,SAsB3F,MAAO,CACLI,eArBqB,CAACC,EAAuB,MAC7C,MAAMC,EAAa,CACjBC,KAAMF,EAAOE,KACbC,UAAWH,EAAOG,WAGpB,OAAIH,EAAOL,QAAU/B,EAAMW,WAAqB0B,EAEzC,CACL7B,UAAWA,EAAUuB,MACrB1B,MAAOA,EAAM0B,SACVM,KACCP,EAAgBC,OAAS,CAAElB,SAAS,EAAOE,MAAM,KAUvDyB,eANsBC,KAAwB,oBAAqBA,IAAgBzC,EAAMW,aAOzF+B,YALmBX,GAAeP,EAAK,oBAAqBO,gBCrG3DY,MAAM,mHAAXC,QAAAC,GACEC,KACGzC,MAAO0C,QACPvC,UAAWuC,YACX/B,QAAS+B,UACTlC,QAASkC,UACThC,KAAMgC,OACNzB,SAAUyB,wBAGT,YADFH,WACmBG,WAAVX,QADTY,IAAAC,EAEUF,iBAAeX,IACtBc,IAAKd,EAAOL,MACZd,SAAU8B,WACV7B,KAAM6B,OACNJ,MAAOI,iBAAeX,EAAOL,OAC7BoB,WAAOJ,cAAYX,EAAOL,qBAE3B,SAAGK,EAAOgB,+MChBlB,MAAeC,EAAoBC"}