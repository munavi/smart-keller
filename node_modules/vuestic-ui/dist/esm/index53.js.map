{"version":3,"file":"index53.js","sources":["../../src/components/va-time-input/hooks/time-text-parser.ts","../../src/components/va-time-input/VaTimeInput.vue","../../src/components/va-time-input/hooks/time-text-formatter.ts","../../src/components/va-time-input/VaTimeInput.vue?vue&type=template&id=64bfaeaf&lang.js","../../src/components/va-time-input/index.ts"],"sourcesContent":["import { Ref, ref } from 'vue'\n\nconst parse = (text: string) => {\n  const m = text.match(/[0-9]{1,2}/g)\n\n  if (!m) { return [] }\n\n  return m.map((s) => Number(s))\n}\n\nconst parsePeriod = (text: string) => {\n  const m = text.match(/pm|am/i)\n\n  if (!m) { return null }\n\n  return Number(m[0].toLowerCase() === 'pm')\n}\n\nconst defaultParseDateFunction = (text: string) => {\n  const d = new Date()\n\n  const [h, m, s] = parse(text)\n  const period = parsePeriod(text)\n\n  if (!h) { return null }\n\n  const is12format = period !== null && h <= 12\n  const isPM = is12format && !!period\n  // Switch 12 to 0, because of 12h format\n  const fh = is12format ? (h === 12 ? 0 : h) : h\n\n  d.setHours(Math.min((fh || 0), is12format ? 12 : 24) + (isPM ? 12 : 0))\n  d.setMinutes(Math.min(m || 0, 60))\n  d.setSeconds(Math.min(s || 0, 60))\n\n  return d\n}\n\nexport const useTimeParser = (props: {\n  parse?: (input: string, isValidRef?: Ref<boolean>) => Date,\n}) => {\n  // const isTextIsMultipleDates = (text: string) => text.includes(props.delimiter)\n  // const isTextIsDateRange = (text: string) => text.includes(props.rangeDelimiter)\n\n  const getParseDateFn = () => props.parse || defaultParseDateFunction\n\n  const isValid = ref(true)\n\n  const parseDate = (text: string) => {\n    const parse = getParseDateFn()\n\n    const result = parse(text)\n\n    if (!result) { isValid.value = false }\n\n    return result\n  }\n\n  const parse = (text: string) => {\n    isValid.value = true\n\n    // if (props.parse) {\n    //   return props.parse(text, isValid)\n    // }\n\n    // if (isTextIsMultipleDates(text)) {\n    //   return text.split(props.delimiter).map((dateText) => parseDate(dateText))\n    // }\n\n    // if (isTextIsDateRange(text)) {\n    //   const [start, end] = text.split(props.rangeDelimiter).map((dateText) => parseDate(dateText))\n    //   return { start, end }\n    // }\n\n    return parseDate(text)\n  }\n\n  return {\n    parse,\n    isValid,\n  }\n}\n","<template>\n  <va-dropdown\n    class=\"va-time-input\"\n    :class=\"$attrs.class\"\n    :style=\"$attrs.style\"\n    v-model=\"isOpenSync\"\n    placement=\"bottom-start\"\n    :offset=\"[2, 0]\"\n    :close-on-content-click=\"false\"\n    :disabled=\"$props.disabled\"\n    anchorSelector=\".va-input__container\"\n    :stateful=\"false\"\n    trigger=\"none\"\n    @keydown.up.prevent=\"showDropdown()\"\n    @keydown.down.prevent=\"showDropdown()\"\n    @keydown.space.prevent=\"showDropdown()\"\n    @click=\"handleComponentClick\"\n  >\n    <template #anchor>\n      <va-input\n        ref=\"input\"\n        v-bind=\"{ ...computedInputProps, ...computedInputAttrs }\"\n        v-on=\"computedInputListeners\"\n        :modelValue=\"valueText\"\n        @change=\"onInputTextChanged($event.target.value)\"\n        @update:modelValue=\"onValueInput\"\n      >\n        <template\n          v-for=\"name in filterSlots\"\n          v-slot:[name]=\"slotScope\"\n          :key=\"name\"\n        >\n          <slot\n            :name=\"name\"\n            v-bind=\"{ ...slotScope, dropdownToggle, showDropdown, hideDropdown, isOpen: isOpenSync, focus }\"\n          />\n        </template>\n\n        <template #prependInner=\"slotScope\">\n          <slot\n            name=\"prependInner\"\n            v-bind=\"{ ...slotScope, dropdownToggle, showDropdown, hideDropdown, isOpen: isOpenSync, focus }\"\n          />\n          <va-icon\n            :id=\"componentIconId\"\n            v-if=\"$props.leftIcon\"\n            v-bind=\"iconProps\"\n            @click=\"dropdownToggle()\"\n          />\n        </template>\n\n        <template #icon>\n          <va-icon\n            :id=\"clearIconId\"\n            v-if=\"canBeCleared\"\n            v-bind=\"clearIconProps\"\n            @click=\"reset()\"\n          />\n          <va-icon\n            :id=\"componentIconId\"\n            v-else-if=\"!$props.leftIcon\"\n            v-bind=\"iconProps\"\n            @click=\"dropdownToggle()\"\n          />\n        </template>\n      </va-input>\n    </template>\n\n    <va-dropdown-content\n      no-padding\n      @keydown.esc.prevent=\"hideDropdown()\"\n    >\n      <va-time-picker\n        ref=\"timePicker\"\n        v-bind=\"timePickerProps\"\n        v-model=\"modelValueSync\"\n      />\n    </va-dropdown-content>\n  </va-dropdown>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, PropType, watch, shallowRef, nextTick } from 'vue'\nimport omit from 'lodash/omit.js'\nimport VaTimePicker from '../va-time-picker/VaTimePicker.vue'\nimport VaInput from '../va-input/VaInput.vue'\nimport VaIcon from '../va-icon/VaIcon.vue'\nimport VaDropdown, { VaDropdownContent } from '../va-dropdown/'\nimport { useSyncProp } from '../../composables/useSyncProp'\nimport { useValidation, useValidationEmits } from '../../composables/useValidation'\nimport { useClearable, useClearableEmits } from '../../composables/useClearable'\nimport { useTimeParser } from './hooks/time-text-parser'\nimport { useTimeFormatter } from './hooks/time-text-formatter'\nimport { extractComponentProps, filterComponentProps } from '../../utils/child-props'\nimport { generateUniqueId } from '../../services/utils'\n\nconst slotsSelectors = [\n  '.va-input-wrapper__prepend-inner',\n  '.va-input__prepend-inner',\n  '.va-input__append-inner',\n  '.va-input-wrapper__append-inner',\n]\n\nconst VaInputProps = extractComponentProps(VaInput, [\n  'mask', 'returnRaw', 'autosize', 'minRows', 'maxRows', 'type', 'inputmode',\n])\n\nexport default defineComponent({\n  name: 'VaTimeInput',\n\n  components: { VaDropdown, VaDropdownContent, VaTimePicker, VaIcon, VaInput },\n\n  emits: [...useValidationEmits, ...useClearableEmits, 'update:modelValue', 'update:isOpen'],\n\n  props: {\n    ...VaInputProps,\n    ...extractComponentProps(VaTimePicker),\n\n    isOpen: { type: Boolean, default: undefined },\n    modelValue: { type: Date, default: undefined },\n    clearValue: { type: String, default: undefined },\n\n    format: { type: Function as PropType<(date: Date) => string> },\n\n    parse: { type: Function as PropType<(input: string) => Date> },\n    manualInput: { type: Boolean, default: false },\n    leftIcon: { type: Boolean, default: false },\n    icon: { type: String, default: 'schedule' },\n  },\n\n  inheritAttrs: false,\n\n  setup (props, { emit, attrs, slots }) {\n    const input = shallowRef<typeof VaInput | undefined>()\n    const timePicker = shallowRef<typeof VaTimePicker | undefined>()\n\n    const clearIconId = generateUniqueId()\n    const componentIconId = generateUniqueId()\n\n    const [isOpenSync] = useSyncProp('isOpen', props, emit, false)\n    const [modelValueSync] = useSyncProp('modelValue', props, emit)\n\n    const { parse, isValid } = useTimeParser(props)\n    const { format } = useTimeFormatter(props)\n\n    const valueText = computed<string | undefined>(() => {\n      if (!isValid.value) { return props.clearValue }\n      if (!modelValueSync.value) { return props.clearValue }\n\n      if (props.format) { return props.format(modelValueSync.value) }\n\n      return format(modelValueSync.value)\n    })\n\n    const onInputTextChanged = (val: string) => {\n      const v = parse(val)\n\n      if (isValid.value && v) {\n        modelValueSync.value = v\n      }\n    }\n\n    const changePeriod = (isPM: boolean) => {\n      if (!modelValueSync.value) { return }\n\n      const halfDayPeriod = 12\n      const h = modelValueSync.value.getHours()\n\n      if (isPM && h <= halfDayPeriod) {\n        modelValueSync.value = new Date(modelValueSync.value.setHours(h + halfDayPeriod))\n      } else if (!isPM && h >= halfDayPeriod) {\n        modelValueSync.value = new Date(modelValueSync.value.setHours(h - halfDayPeriod))\n      }\n    }\n\n    const changePeriodToPm = () => changePeriod(true)\n    const changePeriodToAm = () => changePeriod(false)\n\n    const reset = (): void => {\n      emit('update:modelValue', props.clearValue)\n      emit('clear')\n    }\n\n    const focus = (): void => {\n      input.value?.focus()\n    }\n\n    const blur = (): void => {\n      input.value?.blur()\n    }\n\n    const onValueInput = (val: string) => {\n      !val && reset()\n    }\n\n    const { computedError, computedErrorMessages, listeners } = useValidation(props, emit, reset, focus)\n\n    const hasError = computed(() => (!isValid.value && valueText.value !== props.clearValue) || computedError.value)\n\n    const {\n      canBeCleared,\n      clearIconProps,\n      onFocus,\n      onBlur,\n    } = useClearable(props, valueText)\n\n    const iconProps = computed(() => ({\n      name: props.icon,\n      color: props.color,\n      size: 'small',\n    }))\n\n    const computedInputProps = computed(() => ({\n      ...filterComponentProps(props, VaInputProps).value,\n      clearable: false,\n      rules: [],\n      error: hasError.value,\n      errorMessages: computedErrorMessages.value,\n      readonly: props.readonly || !props.manualInput,\n    }))\n\n    const computedInputListeners = computed(() => ({\n      focus: () => {\n        onFocus()\n        listeners.onFocus()\n      },\n      blur: () => {\n        onBlur()\n        listeners.onBlur()\n      },\n    }))\n\n    const computedInputAttrs = computed(() => ({\n      ariaLabel: props.label,\n      ...omit(attrs, ['class', 'style']),\n    }))\n\n    const filterSlots = computed(() => {\n      const slotsWithIcons = [\n        props.leftIcon && 'prependInner',\n        (!props.leftIcon || props.clearable) && 'icon',\n      ]\n      return Object.keys(slots).filter(slot => !slotsWithIcons.includes(slot))\n    })\n\n    watch(modelValueSync, () => {\n      isValid.value = true\n    })\n\n    const hideDropdown = () => {\n      isOpenSync.value = false\n      focus()\n    }\n\n    const showDropdown = () => {\n      if (props.disabled || props.readonly) { return }\n      isOpenSync.value = true\n      nextTick(() => {\n        timePicker.value?.focus()\n      })\n    }\n\n    const dropdownToggle = () => {\n      isOpenSync.value ? hideDropdown() : showDropdown()\n    }\n\n    // we use the global handler to prevent the toggle dropdown on any click and execute additional logic\n    // we don't want to use `event.stopPropagation()` on clicks because it breaks closing the dropdown\n    const handleComponentClick = (e: Event & { target: { id: string | undefined }}) => {\n      const id = e.target?.id\n\n      // (here and below) we have to use `id` instead of `ref`\n      // because the icon disappears after the click and `ref` becomes `null`\n      if (id === clearIconId) {\n        return focus()\n      }\n\n      if (id === componentIconId) {\n        return timePicker.value?.focus()\n      }\n\n      // here we check that the slots have been clicked and prevent the dropdown from opening\n      // the user decides to open or hide the dropdown itself\n      const isClickInSlot = slotsSelectors.some(selector => !!(e.target as HTMLElement)?.closest(selector))\n      if (isClickInSlot) {\n        return\n      }\n\n      if (props.manualInput) {\n        return isOpenSync.value && hideDropdown()\n      }\n\n      dropdownToggle()\n    }\n\n    return {\n      input,\n      timePicker,\n      clearIconId,\n      componentIconId,\n\n      timePickerProps: filterComponentProps(props, extractComponentProps(VaTimePicker)),\n      computedInputProps,\n      computedInputAttrs,\n      computedInputListeners,\n      isOpenSync,\n      modelValueSync,\n      valueText,\n      onInputTextChanged,\n      onValueInput,\n      canBeCleared,\n      iconProps,\n      clearIconProps,\n      filterSlots,\n\n      hideDropdown,\n      showDropdown,\n      dropdownToggle,\n\n      handleComponentClick,\n\n      reset,\n      focus,\n      blur,\n    }\n  },\n})\n</script>\n","export const useTimeFormatter = (props: {\n  ampm?: boolean,\n  view?: 'hours' | 'minutes' | 'seconds'\n}) => {\n  const formatDate = (date: Date) => {\n    if (!date) { return '' }\n\n    if (props.ampm) {\n      return date.toLocaleTimeString('en-US')\n    }\n\n    return date.toLocaleTimeString('en-GB')\n  }\n\n  const sliceTime = (time: string, start: number, end: number) => time.split(':').slice(start, end).join(':')\n\n  const formatWithView = (date: Date) => {\n    if (props.view === 'seconds') {\n      return formatDate(date)\n    }\n\n    const [time, period] = formatDate(date).split(' ')\n\n    if (props.view === 'minutes') {\n      if (!period) { return sliceTime(time, 0, 2) }\n\n      return [sliceTime(time, 0, 2), period].join(' ')\n    }\n\n    if (props.view === 'hours') {\n      if (!period) { return sliceTime(time, 0, 1) }\n\n      return [sliceTime(time, 0, 1), period].join(' ')\n    }\n\n    return ''\n  }\n\n  return {\n    format: formatWithView,\n  }\n}\n","<template>\n  <va-dropdown\n    class=\"va-time-input\"\n    :class=\"$attrs.class\"\n    :style=\"$attrs.style\"\n    v-model=\"isOpenSync\"\n    placement=\"bottom-start\"\n    :offset=\"[2, 0]\"\n    :close-on-content-click=\"false\"\n    :disabled=\"$props.disabled\"\n    anchorSelector=\".va-input__container\"\n    :stateful=\"false\"\n    trigger=\"none\"\n    @keydown.up.prevent=\"showDropdown()\"\n    @keydown.down.prevent=\"showDropdown()\"\n    @keydown.space.prevent=\"showDropdown()\"\n    @click=\"handleComponentClick\"\n  >\n    <template #anchor>\n      <va-input\n        ref=\"input\"\n        v-bind=\"{ ...computedInputProps, ...computedInputAttrs }\"\n        v-on=\"computedInputListeners\"\n        :modelValue=\"valueText\"\n        @change=\"onInputTextChanged($event.target.value)\"\n        @update:modelValue=\"onValueInput\"\n      >\n        <template\n          v-for=\"name in filterSlots\"\n          v-slot:[name]=\"slotScope\"\n          :key=\"name\"\n        >\n          <slot\n            :name=\"name\"\n            v-bind=\"{ ...slotScope, dropdownToggle, showDropdown, hideDropdown, isOpen: isOpenSync, focus }\"\n          />\n        </template>\n\n        <template #prependInner=\"slotScope\">\n          <slot\n            name=\"prependInner\"\n            v-bind=\"{ ...slotScope, dropdownToggle, showDropdown, hideDropdown, isOpen: isOpenSync, focus }\"\n          />\n          <va-icon\n            :id=\"componentIconId\"\n            v-if=\"$props.leftIcon\"\n            v-bind=\"iconProps\"\n            @click=\"dropdownToggle()\"\n          />\n        </template>\n\n        <template #icon>\n          <va-icon\n            :id=\"clearIconId\"\n            v-if=\"canBeCleared\"\n            v-bind=\"clearIconProps\"\n            @click=\"reset()\"\n          />\n          <va-icon\n            :id=\"componentIconId\"\n            v-else-if=\"!$props.leftIcon\"\n            v-bind=\"iconProps\"\n            @click=\"dropdownToggle()\"\n          />\n        </template>\n      </va-input>\n    </template>\n\n    <va-dropdown-content\n      no-padding\n      @keydown.esc.prevent=\"hideDropdown()\"\n    >\n      <va-time-picker\n        ref=\"timePicker\"\n        v-bind=\"timePickerProps\"\n        v-model=\"modelValueSync\"\n      />\n    </va-dropdown-content>\n  </va-dropdown>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, PropType, watch, shallowRef, nextTick } from 'vue'\nimport omit from 'lodash/omit.js'\nimport VaTimePicker from '../va-time-picker/VaTimePicker.vue'\nimport VaInput from '../va-input/VaInput.vue'\nimport VaIcon from '../va-icon/VaIcon.vue'\nimport VaDropdown, { VaDropdownContent } from '../va-dropdown/'\nimport { useSyncProp } from '../../composables/useSyncProp'\nimport { useValidation, useValidationEmits } from '../../composables/useValidation'\nimport { useClearable, useClearableEmits } from '../../composables/useClearable'\nimport { useTimeParser } from './hooks/time-text-parser'\nimport { useTimeFormatter } from './hooks/time-text-formatter'\nimport { extractComponentProps, filterComponentProps } from '../../utils/child-props'\nimport { generateUniqueId } from '../../services/utils'\n\nconst slotsSelectors = [\n  '.va-input-wrapper__prepend-inner',\n  '.va-input__prepend-inner',\n  '.va-input__append-inner',\n  '.va-input-wrapper__append-inner',\n]\n\nconst VaInputProps = extractComponentProps(VaInput, [\n  'mask', 'returnRaw', 'autosize', 'minRows', 'maxRows', 'type', 'inputmode',\n])\n\nexport default defineComponent({\n  name: 'VaTimeInput',\n\n  components: { VaDropdown, VaDropdownContent, VaTimePicker, VaIcon, VaInput },\n\n  emits: [...useValidationEmits, ...useClearableEmits, 'update:modelValue', 'update:isOpen'],\n\n  props: {\n    ...VaInputProps,\n    ...extractComponentProps(VaTimePicker),\n\n    isOpen: { type: Boolean, default: undefined },\n    modelValue: { type: Date, default: undefined },\n    clearValue: { type: String, default: undefined },\n\n    format: { type: Function as PropType<(date: Date) => string> },\n\n    parse: { type: Function as PropType<(input: string) => Date> },\n    manualInput: { type: Boolean, default: false },\n    leftIcon: { type: Boolean, default: false },\n    icon: { type: String, default: 'schedule' },\n  },\n\n  inheritAttrs: false,\n\n  setup (props, { emit, attrs, slots }) {\n    const input = shallowRef<typeof VaInput | undefined>()\n    const timePicker = shallowRef<typeof VaTimePicker | undefined>()\n\n    const clearIconId = generateUniqueId()\n    const componentIconId = generateUniqueId()\n\n    const [isOpenSync] = useSyncProp('isOpen', props, emit, false)\n    const [modelValueSync] = useSyncProp('modelValue', props, emit)\n\n    const { parse, isValid } = useTimeParser(props)\n    const { format } = useTimeFormatter(props)\n\n    const valueText = computed<string | undefined>(() => {\n      if (!isValid.value) { return props.clearValue }\n      if (!modelValueSync.value) { return props.clearValue }\n\n      if (props.format) { return props.format(modelValueSync.value) }\n\n      return format(modelValueSync.value)\n    })\n\n    const onInputTextChanged = (val: string) => {\n      const v = parse(val)\n\n      if (isValid.value && v) {\n        modelValueSync.value = v\n      }\n    }\n\n    const changePeriod = (isPM: boolean) => {\n      if (!modelValueSync.value) { return }\n\n      const halfDayPeriod = 12\n      const h = modelValueSync.value.getHours()\n\n      if (isPM && h <= halfDayPeriod) {\n        modelValueSync.value = new Date(modelValueSync.value.setHours(h + halfDayPeriod))\n      } else if (!isPM && h >= halfDayPeriod) {\n        modelValueSync.value = new Date(modelValueSync.value.setHours(h - halfDayPeriod))\n      }\n    }\n\n    const changePeriodToPm = () => changePeriod(true)\n    const changePeriodToAm = () => changePeriod(false)\n\n    const reset = (): void => {\n      emit('update:modelValue', props.clearValue)\n      emit('clear')\n    }\n\n    const focus = (): void => {\n      input.value?.focus()\n    }\n\n    const blur = (): void => {\n      input.value?.blur()\n    }\n\n    const onValueInput = (val: string) => {\n      !val && reset()\n    }\n\n    const { computedError, computedErrorMessages, listeners } = useValidation(props, emit, reset, focus)\n\n    const hasError = computed(() => (!isValid.value && valueText.value !== props.clearValue) || computedError.value)\n\n    const {\n      canBeCleared,\n      clearIconProps,\n      onFocus,\n      onBlur,\n    } = useClearable(props, valueText)\n\n    const iconProps = computed(() => ({\n      name: props.icon,\n      color: props.color,\n      size: 'small',\n    }))\n\n    const computedInputProps = computed(() => ({\n      ...filterComponentProps(props, VaInputProps).value,\n      clearable: false,\n      rules: [],\n      error: hasError.value,\n      errorMessages: computedErrorMessages.value,\n      readonly: props.readonly || !props.manualInput,\n    }))\n\n    const computedInputListeners = computed(() => ({\n      focus: () => {\n        onFocus()\n        listeners.onFocus()\n      },\n      blur: () => {\n        onBlur()\n        listeners.onBlur()\n      },\n    }))\n\n    const computedInputAttrs = computed(() => ({\n      ariaLabel: props.label,\n      ...omit(attrs, ['class', 'style']),\n    }))\n\n    const filterSlots = computed(() => {\n      const slotsWithIcons = [\n        props.leftIcon && 'prependInner',\n        (!props.leftIcon || props.clearable) && 'icon',\n      ]\n      return Object.keys(slots).filter(slot => !slotsWithIcons.includes(slot))\n    })\n\n    watch(modelValueSync, () => {\n      isValid.value = true\n    })\n\n    const hideDropdown = () => {\n      isOpenSync.value = false\n      focus()\n    }\n\n    const showDropdown = () => {\n      if (props.disabled || props.readonly) { return }\n      isOpenSync.value = true\n      nextTick(() => {\n        timePicker.value?.focus()\n      })\n    }\n\n    const dropdownToggle = () => {\n      isOpenSync.value ? hideDropdown() : showDropdown()\n    }\n\n    // we use the global handler to prevent the toggle dropdown on any click and execute additional logic\n    // we don't want to use `event.stopPropagation()` on clicks because it breaks closing the dropdown\n    const handleComponentClick = (e: Event & { target: { id: string | undefined }}) => {\n      const id = e.target?.id\n\n      // (here and below) we have to use `id` instead of `ref`\n      // because the icon disappears after the click and `ref` becomes `null`\n      if (id === clearIconId) {\n        return focus()\n      }\n\n      if (id === componentIconId) {\n        return timePicker.value?.focus()\n      }\n\n      // here we check that the slots have been clicked and prevent the dropdown from opening\n      // the user decides to open or hide the dropdown itself\n      const isClickInSlot = slotsSelectors.some(selector => !!(e.target as HTMLElement)?.closest(selector))\n      if (isClickInSlot) {\n        return\n      }\n\n      if (props.manualInput) {\n        return isOpenSync.value && hideDropdown()\n      }\n\n      dropdownToggle()\n    }\n\n    return {\n      input,\n      timePicker,\n      clearIconId,\n      componentIconId,\n\n      timePickerProps: filterComponentProps(props, extractComponentProps(VaTimePicker)),\n      computedInputProps,\n      computedInputAttrs,\n      computedInputListeners,\n      isOpenSync,\n      modelValueSync,\n      valueText,\n      onInputTextChanged,\n      onValueInput,\n      canBeCleared,\n      iconProps,\n      clearIconProps,\n      filterSlots,\n\n      hideDropdown,\n      showDropdown,\n      dropdownToggle,\n\n      handleComponentClick,\n\n      reset,\n      focus,\n      blur,\n    }\n  },\n})\n</script>\n","import withConfigTransport from '../../services/config-transport/withConfigTransport'\nimport Component from './VaTimeInput.vue'\nexport const VaTimeInput = withConfigTransport(Component)\n"],"names":["defaultParseDateFunction","text","d","Date","h","m","s","match","map","Number","parse","period","toLowerCase","parsePeriod","is12format","isPM","fh","setHours","Math","min","setMinutes","setSeconds","useTimeParser","props","isValid","ref","parseDate","result","value","slotsSelectors","VaInputProps","extractComponentProps","VaInput","defineComponent","name","components","VaDropdown","VaDropdownContent","VaTimePicker","VaIcon","emits","useValidationEmits","useClearableEmits","isOpen","type","Boolean","default","undefined","modelValue","clearValue","String","format","Function","manualInput","leftIcon","icon","inheritAttrs","setup","emit","attrs","slots","input","shallowRef","timePicker","clearIconId","generateUniqueId","componentIconId","isOpenSync","useSyncProp","modelValueSync","formatDate","date","ampm","toLocaleTimeString","sliceTime","time","start","end","split","slice","join","view","useTimeFormatter","valueText","computed","reset","focus","computedError","computedErrorMessages","listeners","useValidation","hasError","canBeCleared","clearIconProps","onFocus","onBlur","useClearable","iconProps","color","size","computedInputProps","filterComponentProps","clearable","rules","error","errorMessages","readonly","computedInputListeners","blur","computedInputAttrs","ariaLabel","label","omit","filterSlots","slotsWithIcons","Object","keys","filter","slot","includes","watch","hideDropdown","showDropdown","disabled","nextTick","dropdownToggle","timePickerProps","onInputTextChanged","val","v","onValueInput","handleComponentClick","e","id","target","some","selector","closest","_createBlock","class","_ctx","style","placement","offset","anchorSelector","stateful","trigger","onKeydown","onClick","anchor","_createVNode","_mergeProps","_toHandlers","onChange","$event","prependInner","_renderSlot","slotScope","VaTimeInput","withConfigTransport","Component"],"mappings":"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"}