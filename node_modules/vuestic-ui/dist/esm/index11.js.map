{"version":3,"file":"index11.js","sources":["../../src/components/va-button-group/VaButtonGroup.vue","../../src/components/va-button-group/VaButtonGroup.vue?vue&type=template&id=f503100e&lang.js","../../src/components/va-button-group/index.ts"],"sourcesContent":["<template>\n  <div class=\"va-button-group\" :style=\"computedStyle\" :class=\"computedClass\">\n    <va-config :components=\"buttonConfig\">\n      <slot />\n    </va-config>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, computed, PropType, reactive } from 'vue'\n\nimport VaConfig from '../va-config'\nimport { getGradientBackground } from '../../services/color-config/color-functions'\nimport { useColors } from '../../composables/useColor'\nimport { useTextColor } from '../../composables/useTextColor'\n\nexport default defineComponent({\n  name: 'VaButtonGroup',\n  components: { VaConfig },\n  props: {\n    color: { type: String as PropType<string>, default: 'primary' },\n    gradient: { type: Boolean as PropType<boolean>, default: undefined },\n    textColor: { type: String as PropType<string>, default: undefined },\n    rounded: { type: Boolean as PropType<boolean>, default: true },\n    outline: { type: Boolean as PropType<boolean>, default: false },\n    flat: { type: Boolean as PropType<boolean>, default: false },\n    size: {\n      type: String as PropType<string>,\n      default: 'medium',\n      validator: (v: string) => ['medium', 'small', 'large'].includes(v),\n    },\n  },\n  setup (props) {\n    const { getColor } = useColors()\n    const colorComputed = computed(() => getColor(props.color))\n\n    const isTransparentBackground = computed(() => Boolean(props.outline || props.flat))\n    const { textColorComputed } = useTextColor(colorComputed, isTransparentBackground)\n\n    const computedBackground = computed(() => {\n      if (props.outline || props.flat) { return '' }\n\n      return props.gradient ? getGradientBackground(colorComputed.value) : colorComputed.value\n    })\n\n    const computedStyle = computed(() => {\n      const backgroundProperty = props.gradient ? 'background-image' : 'background'\n\n      return {\n        [backgroundProperty]: computedBackground.value,\n        color: textColorComputed.value,\n      }\n    })\n\n    const buttonConfig = reactive({\n      VaButton: {\n        ...props,\n        color: props.gradient ? '#00000000' : props.color,\n      },\n    })\n\n    const computedClass = computed(() => ({ 'va-button-group_square': !props.rounded }))\n\n    return {\n      buttonConfig,\n      computedStyle,\n      computedClass,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"variables\";\n\n.va-button-group {\n  display: flex;\n  justify-content: stretch;\n  width: max-content;\n  overflow: hidden;\n  border-radius: 9999999px;\n  font-family: var(--va-font-family);\n\n  &_square {\n    border-radius: var(--va-button-square-border-radius);\n  }\n\n  .va-button {\n    margin: var(--va-button-group-button-margin);\n    box-shadow: none !important;\n  }\n\n  & > .va-button:last-child {\n    width: auto;\n    padding-right: 1rem !important;\n\n    &.va-button--small {\n      padding-right: 0.75rem !important;\n    }\n\n    &.va-button--large {\n      padding-right: 1.5rem !important;\n    }\n  }\n\n  & > .va-button:first-child {\n    width: auto;\n    padding-left: 1rem;\n\n    &.va-button--small {\n      padding-left: 0.75rem;\n    }\n\n    &.va-button--large {\n      padding-left: 1.5rem;\n    }\n  }\n\n  & > .va-button:not(:last-child) {\n    border-top-right-radius: 0;\n    border-bottom-right-radius: 0;\n    padding-right: 0.5rem;\n    border-right: 0;\n\n    .va-button__content {\n      /**\n        We need to prevent minus margin because we had:\n          border-right: 2px;\n          maring-right: -2px;\n      */\n      margin-right: 0;\n    }\n  }\n\n  & > .va-button + .va-button {\n    border-top-left-radius: 0;\n    border-bottom-left-radius: 0;\n    padding-left: 0.5rem;\n    border-left: 0;\n\n    .va-button__content {\n      /**\n        We need to prevent minus margin because we had:\n          border-left: 2px;\n          maring-left: -2px;\n      */\n      margin-left: 0;\n    }\n  }\n}\n</style>\n","<template>\n  <div class=\"va-button-group\" :style=\"computedStyle\" :class=\"computedClass\">\n    <va-config :components=\"buttonConfig\">\n      <slot />\n    </va-config>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, computed, PropType, reactive } from 'vue'\n\nimport VaConfig from '../va-config'\nimport { getGradientBackground } from '../../services/color-config/color-functions'\nimport { useColors } from '../../composables/useColor'\nimport { useTextColor } from '../../composables/useTextColor'\n\nexport default defineComponent({\n  name: 'VaButtonGroup',\n  components: { VaConfig },\n  props: {\n    color: { type: String as PropType<string>, default: 'primary' },\n    gradient: { type: Boolean as PropType<boolean>, default: undefined },\n    textColor: { type: String as PropType<string>, default: undefined },\n    rounded: { type: Boolean as PropType<boolean>, default: true },\n    outline: { type: Boolean as PropType<boolean>, default: false },\n    flat: { type: Boolean as PropType<boolean>, default: false },\n    size: {\n      type: String as PropType<string>,\n      default: 'medium',\n      validator: (v: string) => ['medium', 'small', 'large'].includes(v),\n    },\n  },\n  setup (props) {\n    const { getColor } = useColors()\n    const colorComputed = computed(() => getColor(props.color))\n\n    const isTransparentBackground = computed(() => Boolean(props.outline || props.flat))\n    const { textColorComputed } = useTextColor(colorComputed, isTransparentBackground)\n\n    const computedBackground = computed(() => {\n      if (props.outline || props.flat) { return '' }\n\n      return props.gradient ? getGradientBackground(colorComputed.value) : colorComputed.value\n    })\n\n    const computedStyle = computed(() => {\n      const backgroundProperty = props.gradient ? 'background-image' : 'background'\n\n      return {\n        [backgroundProperty]: computedBackground.value,\n        color: textColorComputed.value,\n      }\n    })\n\n    const buttonConfig = reactive({\n      VaButton: {\n        ...props,\n        color: props.gradient ? '#00000000' : props.color,\n      },\n    })\n\n    const computedClass = computed(() => ({ 'va-button-group_square': !props.rounded }))\n\n    return {\n      buttonConfig,\n      computedStyle,\n      computedClass,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"variables\";\n\n.va-button-group {\n  display: flex;\n  justify-content: stretch;\n  width: max-content;\n  overflow: hidden;\n  border-radius: 9999999px;\n  font-family: var(--va-font-family);\n\n  &_square {\n    border-radius: var(--va-button-square-border-radius);\n  }\n\n  .va-button {\n    margin: var(--va-button-group-button-margin);\n    box-shadow: none !important;\n  }\n\n  & > .va-button:last-child {\n    width: auto;\n    padding-right: 1rem !important;\n\n    &.va-button--small {\n      padding-right: 0.75rem !important;\n    }\n\n    &.va-button--large {\n      padding-right: 1.5rem !important;\n    }\n  }\n\n  & > .va-button:first-child {\n    width: auto;\n    padding-left: 1rem;\n\n    &.va-button--small {\n      padding-left: 0.75rem;\n    }\n\n    &.va-button--large {\n      padding-left: 1.5rem;\n    }\n  }\n\n  & > .va-button:not(:last-child) {\n    border-top-right-radius: 0;\n    border-bottom-right-radius: 0;\n    padding-right: 0.5rem;\n    border-right: 0;\n\n    .va-button__content {\n      /**\n        We need to prevent minus margin because we had:\n          border-right: 2px;\n          maring-right: -2px;\n      */\n      margin-right: 0;\n    }\n  }\n\n  & > .va-button + .va-button {\n    border-top-left-radius: 0;\n    border-bottom-left-radius: 0;\n    padding-left: 0.5rem;\n    border-left: 0;\n\n    .va-button__content {\n      /**\n        We need to prevent minus margin because we had:\n          border-left: 2px;\n          maring-left: -2px;\n      */\n      margin-left: 0;\n    }\n  }\n}\n</style>\n","import withConfigTransport from '../../services/config-transport/withConfigTransport'\nimport VaButtonGroup from './VaButtonGroup.vue'\n\nexport * from './VaButtonGroup.vue'\n\nexport default withConfigTransport(VaButtonGroup)\n"],"names":["defineComponent","name","components","VaConfig","props","color","type","String","default","gradient","Boolean","undefined","textColor","rounded","outline","flat","size","validator","v","includes","setup","getColor","useColors","colorComputed","computed","isTransparentBackground","textColorComputed","useTextColor","computedBackground","getGradientBackground","value","computedStyle","buttonConfig","reactive","VaButton","computedClass","_createElementBlock","class","_ctx","style","_createVNode","_renderSlot","withConfigTransport","VaButtonGroup"],"mappings":"0aAgBA,MAAeA,EAAgB,CAC7BC,KAAM,gBACNC,WAAY,CAAEC,SAAAA,GACdC,MAAO,CACLC,MAAO,CAAEC,KAAMC,OAA4BC,QAAS,WACpDC,SAAU,CAAEH,KAAMI,QAA8BF,aAASG,GACzDC,UAAW,CAAEN,KAAMC,OAA4BC,aAASG,GACxDE,QAAS,CAAEP,KAAMI,QAA8BF,SAAS,GACxDM,QAAS,CAAER,KAAMI,QAA8BF,SAAS,GACxDO,KAAM,CAAET,KAAMI,QAA8BF,SAAS,GACrDQ,KAAM,CACJV,KAAMC,OACNC,QAAS,SACTS,UAAYC,GAAc,CAAC,SAAU,QAAS,SAASC,SAASD,KAGpEE,MAAOhB,GACL,MAAMiB,SAAEA,GAAaC,IACfC,EAAgBC,GAAS,IAAMH,EAASjB,EAAMC,SAE9CoB,EAA0BD,GAAS,IAAMd,QAAQN,EAAMU,SAAWV,EAAMW,SACxEW,kBAAEA,GAAsBC,EAAaJ,EAAeE,GAEpDG,EAAqBJ,GAAS,IAC9BpB,EAAMU,SAAWV,EAAMW,KAAe,GAEnCX,EAAMK,SAAWoB,EAAsBN,EAAcO,OAASP,EAAcO,QAG/EC,EAAgBP,GAAS,KAGtB,CACL,CAHyBpB,EAAMK,SAAW,mBAAqB,cAGzCmB,EAAmBE,MACzCzB,MAAOqB,EAAkBI,UAa7B,MAAO,CACLE,aAVmBC,EAAS,CAC5BC,SAAU,IACL9B,EACHC,MAAOD,EAAMK,SAAW,YAAcL,EAAMC,SAQ9C0B,cAAAA,EACAI,cALoBX,GAAS,MAAS,0BAA2BpB,EAAMS,wFC5D3EuB,SAAKC,SAAM,kBAAiDC,kBAA9BC,QAAOD,mBACnCE,KAAYtC,WAAYoC,4BACtB,KAAAG,iHCEN,MAAeC,EAAoBC"}