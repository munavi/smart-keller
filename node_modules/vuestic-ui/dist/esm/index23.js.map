{"version":3,"file":"index23.js","sources":["../../../../node_modules/lodash/isNil.js","../../src/components/va-date-input/hooks/input-text-parser.ts","../../src/components/va-date-input/hooks/model-value-parser.ts","../../src/components/va-date-input/hooks/range-model-value-guard.ts","../../src/components/va-date-input/VaDateInput.vue","../../src/components/va-date-picker/hooks/sync-prop.ts","../../src/components/va-date-input/VaDateInput.vue?vue&type=template&id=139365e2&lang.js","../../src/components/va-date-input/index.ts"],"sourcesContent":["/**\n * Checks if `value` is `null` or `undefined`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is nullish, else `false`.\n * @example\n *\n * _.isNil(null);\n * // => true\n *\n * _.isNil(void 0);\n * // => true\n *\n * _.isNil(NaN);\n * // => false\n */\nfunction isNil(value) {\n  return value == null;\n}\n\nmodule.exports = isNil;\n","import { Ref, ref } from 'vue'\nimport { VaDatePickerModelValue } from '../../va-date-picker/types'\n\nexport const defaultParseDateFunction = (text: string) => new Date(Date.parse(text))\n\nconst isValidDate = (d: Date) => d instanceof Date && !isNaN(d.getTime())\n\nexport const useDateParser = (props: {\n  parse?: (input: string, isValidRef?: Ref<boolean>) => VaDatePickerModelValue,\n  parseDate?: (input: string) => Date,\n  delimiter: string,\n  rangeDelimiter: string,\n}) => {\n  const isMultipleDates = (text: string) => text.includes(props.delimiter)\n  const isRange = (text: string) => text.includes(props.rangeDelimiter)\n\n  const isValid = ref(true)\n\n  const parseDate = (text: string) => {\n    const date = (props.parseDate || defaultParseDateFunction)(text)\n\n    isValid.value = isValidDate(date)\n\n    return date\n  }\n\n  const parseDateInputValue = (text: string) => {\n    isValid.value = true\n\n    if (props.parse) {\n      return props.parse(text, isValid)\n    }\n\n    if (isMultipleDates(text)) {\n      return text.split(props.delimiter).map(parseDate)\n    }\n\n    if (isRange(text)) {\n      const [start, end] = text.split(props.rangeDelimiter).map(parseDate)\n      return { start, end }\n    }\n\n    return parseDate(text)\n  }\n\n  return {\n    parseDateInputValue,\n    isValid,\n  }\n}\n","import isNil from 'lodash/isNil'\n\nimport { VaDatePickerModelValue } from '../../va-date-picker/types'\nimport { defaultParseDateFunction } from './input-text-parser'\nimport { VaDateInputRange, VaDateInputModelValue, VaDateInputDate } from '../types'\n\nexport const isRange = (date: VaDateInputModelValue): date is VaDateInputRange => {\n  return typeof date === 'object' && ('start' in date || 'end' in date)\n}\n\nexport const parseSingleDate = (date: VaDateInputDate) => typeof date === 'string'\n  ? defaultParseDateFunction(date)\n  : new Date(date)\n\nexport const parseModelValue = (date: VaDateInputModelValue): VaDatePickerModelValue => {\n  if (Array.isArray(date)) {\n    return date.map(parseSingleDate)\n  }\n\n  if (isRange(date)) {\n    return {\n      start: isNil(date.start) ? date.start : parseSingleDate(date.start),\n      end: isNil(date.end) ? date.end : parseSingleDate(date.end),\n    }\n  }\n\n  return parseSingleDate(date)\n}\n","import { computed, Ref, ref, watch } from 'vue'\nimport { VaDatePickerModelValue } from '../../va-date-picker/types'\nimport { parseModelValue, isRange } from './model-value-parser'\n\n/**\n * This guard is used to prevent updating modelValue if range end is not specified.\n * This guard provides reset method, that allow us to reset VaDateInput value if dropdown is closed.\n */\nexport const useRangeModelValueGuard = (\n  modelValue: Ref<VaDatePickerModelValue | undefined>,\n  disabled: Ref<boolean>,\n  parseValue = parseModelValue,\n) => {\n  const bufferValue = ref(modelValue.value && parseValue(modelValue.value))\n\n  const valueComputed = computed({\n    get: () => bufferValue.value,\n    set: (value) => {\n      if (disabled.value) {\n        modelValue.value = value\n      }\n\n      if (!value) {\n        modelValue.value = value\n        return\n      }\n\n      if (isRange(value)) {\n        if (value.end !== null) {\n          modelValue.value = value\n        }\n      } else {\n        modelValue.value = value\n      }\n\n      bufferValue.value = value\n    },\n  })\n\n  watch(modelValue, (newValue) => {\n    bufferValue.value = newValue\n  })\n\n  const reset = () => {\n    if (bufferValue.value && isRange(bufferValue.value)) {\n      bufferValue.value = modelValue.value && parseValue(modelValue.value)\n    }\n  }\n\n  return {\n    valueComputed,\n    reset,\n  }\n}\n","<template>\n  <div class=\"va-date-input\">\n    <va-dropdown\n      v-model=\"isOpenSync\"\n      :offset=\"[2, 0]\"\n      :close-on-content-click=\"false\"\n      :disabled=\"disabled\"\n      anchorSelector=\".va-input-wrapper__input\"\n    >\n      <template #anchor>\n        <slot name=\"input\" v-bind=\"{ valueText, inputProps, inputListeners }\">\n          <va-input\n            ref=\"input\"\n            class=\"va-date-input__input\"\n            v-bind=\"inputProps\"\n            v-on=\"inputListeners\"\n            :model-value=\"valueText\"\n            @change=\"onInputTextChanged\"\n          >\n            <template\n              v-for=\"name in filterSlots\"\n              v-slot:[name]=\"slotScope\"\n              :key=\"name\"\n            >\n              <slot :name=\"name\" v-bind=\"slotScope\" />\n            </template>\n\n            <template #prependInner=\"slotScope\">\n              <slot name=\"prependInner\" v-bind=\"slotScope\" />\n              <va-icon\n                v-if=\"$props.leftIcon\"\n                v-bind=\"iconProps\"\n              />\n            </template>\n\n            <template #icon>\n              <va-icon\n                v-if=\"canBeCleared\"\n                v-bind=\"clearIconProps\"\n                @click.stop=\"reset()\"\n              />\n              <va-icon\n                v-else-if=\"!$props.leftIcon\"\n                v-bind=\"iconProps\"\n              />\n            </template>\n          </va-input>\n        </slot>\n      </template>\n\n      <va-dropdown-content>\n        <va-date-picker\n            v-bind=\"datePickerProps\"\n            v-model=\"valueComputed\"\n            @click:day=\"$emit('click:day', $event)\"\n            @click:month=\"$emit('click:month', $event)\"\n            @click:year=\"$emit('click:year', $event)\"\n            @hover:day=\"$emit('hover:day', $event)\"\n            @hover:month=\"$emit('hover:month', $event)\"\n            @hover:year=\"$emit('hover:year', $event)\"\n            @update:view=\"$emit('update:view', $event)\"\n        >\n          <template v-for=\"(_, name) in $slots\" v-slot:[name]=\"bind\">\n            <slot :name=\"name\" v-bind=\"bind\" />\n          </template>\n        </va-date-picker>\n      </va-dropdown-content>\n    </va-dropdown>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, PropType, toRefs, watch, ref } from 'vue'\n\nimport { useClearableEmits, useClearable } from '../../composables/useClearable'\nimport { useValidation, useValidationEmits } from '../../composables/useValidation'\nimport { useStateful, useStatefulEmits } from '../../composables/useStateful'\nimport { useSyncProp } from '../va-date-picker/hooks/sync-prop'\nimport { isRange, isSingleDate, isDates } from '../va-date-picker/utils/date-utils'\nimport { filterComponentProps, extractComponentProps, extractComponentEmits } from '../../utils/child-props'\nimport { useRangeModelValueGuard } from './hooks/range-model-value-guard'\nimport { useDateParser } from './hooks/input-text-parser'\nimport { parseModelValue } from './hooks/model-value-parser'\n\nimport VaDatePicker from '../va-date-picker/VaDatePicker.vue'\nimport VaDropdown, { VaDropdownContent } from '../va-dropdown'\nimport VaInput from '../va-input'\nimport VaIcon from '../va-icon'\nimport { VaDatePickerModelValue } from '../va-date-picker/types'\n\nconst VaInputProps = extractComponentProps(VaInput, [\n  'mask', 'returnRaw', 'autosize', 'minRows', 'maxRows', 'type', 'inputmode',\n])\n\nexport default defineComponent({\n  name: 'VaDateInput',\n\n  components: {\n    VaDropdown,\n    VaDropdownContent,\n    VaDatePicker,\n    VaInput,\n    VaIcon,\n  },\n\n  props: {\n    ...VaInputProps,\n    ...extractComponentProps(VaDatePicker),\n\n    clearValue: { type: Date as PropType<VaDatePickerModelValue>, default: undefined },\n\n    resetOnClose: { type: Boolean, default: true },\n    isOpen: { type: Boolean as PropType<boolean | undefined>, default: undefined },\n\n    format: { type: Function as PropType<(date: VaDatePickerModelValue | undefined) => string> },\n    formatDate: { type: Function as PropType<(date: Date) => string>, default: (d: Date) => d.toLocaleDateString() },\n    parse: { type: Function as PropType<(input: string) => VaDatePickerModelValue> },\n    parseDate: { type: Function as PropType<(input: string) => Date> },\n    parseValue: { type: Function as PropType<typeof parseModelValue> },\n\n    delimiter: { type: String, default: ', ' },\n    rangeDelimiter: { type: String, default: ' ~ ' },\n    manualInput: { type: Boolean, default: false },\n\n    color: { type: String, default: 'primary' },\n    leftIcon: { type: Boolean, default: false },\n    icon: { type: String, default: 'calendar_today' },\n  },\n\n  emits: [\n    ...extractComponentEmits(VaDatePicker),\n    ...useClearableEmits,\n    ...useValidationEmits,\n    ...useStatefulEmits,\n    'update:is-open',\n    'update:text',\n  ],\n\n  setup (props, { emit, slots }) {\n    const { isOpen, resetOnClose } = toRefs(props)\n    const { valueComputed: statefulValue } = useStateful<VaDatePickerModelValue | undefined>(props, emit)\n    const { syncProp: isOpenSync } = useSyncProp(isOpen, 'is-open', emit, false)\n\n    const isRangeModelValueGuardDisabled = computed(() => !resetOnClose.value)\n\n    const {\n      valueComputed,\n      reset: resetInvalidRange,\n    } = useRangeModelValueGuard(statefulValue, isRangeModelValueGuardDisabled, props.parseValue)\n\n    watch(isOpenSync, (isOpened) => {\n      if (!isOpened && !isRangeModelValueGuardDisabled.value) { resetInvalidRange() }\n    })\n\n    const dateOrNothing = (date: Date | undefined | null) => date ? props.formatDate(date) : '...'\n\n    const input = ref<typeof VaInput | undefined>()\n\n    const { parseDateInputValue, isValid } = useDateParser(props)\n\n    const modelValueToString = (value: VaDatePickerModelValue): string => {\n      if (props.format) {\n        return props.format(valueComputed.value)\n      }\n\n      if (isDates(value)) {\n        return value.map((d) => props.formatDate(d)).join(props.delimiter)\n      }\n      if (isSingleDate(value)) {\n        return props.formatDate(value)\n      }\n      if (isRange(value)) {\n        return dateOrNothing(value.start) + props.rangeDelimiter + dateOrNothing(value.end)\n      }\n\n      throw new Error('VaDatePicker: Invalid model value. Value should be Date, Date[] or { start: Date, end: Date | null }')\n    }\n\n    const valueText = computed(() => {\n      if (!isValid.value) {\n        return ''\n      }\n\n      if (!valueComputed.value) {\n        if (!props.clearValue) { return '' }\n        return modelValueToString(props.clearValue)\n      }\n\n      return modelValueToString(valueComputed.value)\n    })\n\n    const onInputTextChanged = ({ target } : Event) => {\n      const parsedValue = parseDateInputValue((target as HTMLInputElement).value)\n\n      if (isValid.value) {\n        valueComputed.value = parsedValue\n      }\n    }\n\n    const reset = (): void => {\n      statefulValue.value = props.clearValue\n      emit('clear')\n    }\n\n    const focus = (): void => {\n      input.value?.focus()\n    }\n\n    const blur = (): void => {\n      input.value?.blur()\n    }\n\n    const { computedError, computedErrorMessages, listeners } = useValidation(props, emit, reset, focus)\n\n    const hasError = computed(() => (!isValid.value && valueComputed.value !== props.clearValue) || computedError.value)\n\n    const filterSlots = computed(() => {\n      const slotsWithIcons = [\n        props.leftIcon && 'prependInner',\n        (!props.leftIcon || props.clearable) && 'icon',\n      ]\n      return Object.keys(slots).filter(slot => !slotsWithIcons.includes(slot))\n    })\n\n    const {\n      canBeCleared,\n      clearIconProps,\n      onFocus,\n      onBlur,\n    } = useClearable(props, valueComputed)\n\n    const iconProps = computed(() => ({\n      name: props.icon,\n      color: props.color,\n      size: 'small',\n      class: 'va-date-input__icon',\n    }))\n\n    const computedInputProps = computed(() => ({\n      ...filterComponentProps(props, VaInputProps).value,\n      clearable: false,\n      rules: [],\n      error: hasError.value,\n      errorMessages: computedErrorMessages.value,\n      readonly: props.readonly || !props.manualInput,\n    }))\n\n    const computedInputListeners = computed(() => ({\n      focus: () => {\n        onFocus()\n        listeners.onFocus()\n      },\n      blur: () => {\n        onBlur()\n        listeners.onBlur()\n      },\n    }))\n\n    return {\n      valueText,\n      valueComputed,\n      isOpenSync,\n      onInputTextChanged,\n\n      input,\n      inputProps: computedInputProps,\n      inputListeners: computedInputListeners,\n      datePickerProps: filterComponentProps(props, extractComponentProps(VaDatePicker)),\n\n      filterSlots,\n      canBeCleared,\n      clearIconProps,\n      iconProps,\n\n      reset,\n      focus,\n      blur,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n.va-date-input {\n  display: flex;\n  font-family: var(--va-font-family);\n\n  &__icon {\n    cursor: pointer;\n  }\n\n  &__input.va-input_readonly {\n    cursor: pointer;\n  }\n\n  --va-date-picker-cell-size: 28px;\n\n  .va-dropdown {\n    width: 100%;\n  }\n}\n</style>\n","import { ref, computed, Ref, UnwrapRef } from 'vue'\n\nexport function useSyncProp<T, PropName extends string> (propRef: Ref<T> | undefined, propName: PropName, emit: (event: any, newValue: T) => any, defaultValue?: T) {\n  if (defaultValue === undefined) {\n    return {\n      syncProp: computed({\n        set (value: T) {\n          emit(`update:${propName}`, value)\n        },\n        get (): T {\n          return propRef!.value\n        },\n      }),\n    }\n  }\n\n  const statefulValue = ref<T>(defaultValue)\n\n  return {\n    syncProp: computed<NonNullable<T>>({\n      set (value: NonNullable<T>) {\n        statefulValue.value = value as UnwrapRef<NonNullable<T>>\n        emit(`update:${propName}`, value)\n      },\n      get (): NonNullable<T> {\n        return (propRef?.value === undefined ? (statefulValue.value) : propRef.value) as NonNullable<T>\n      },\n    }),\n  }\n}\n","<template>\n  <div class=\"va-date-input\">\n    <va-dropdown\n      v-model=\"isOpenSync\"\n      :offset=\"[2, 0]\"\n      :close-on-content-click=\"false\"\n      :disabled=\"disabled\"\n      anchorSelector=\".va-input-wrapper__input\"\n    >\n      <template #anchor>\n        <slot name=\"input\" v-bind=\"{ valueText, inputProps, inputListeners }\">\n          <va-input\n            ref=\"input\"\n            class=\"va-date-input__input\"\n            v-bind=\"inputProps\"\n            v-on=\"inputListeners\"\n            :model-value=\"valueText\"\n            @change=\"onInputTextChanged\"\n          >\n            <template\n              v-for=\"name in filterSlots\"\n              v-slot:[name]=\"slotScope\"\n              :key=\"name\"\n            >\n              <slot :name=\"name\" v-bind=\"slotScope\" />\n            </template>\n\n            <template #prependInner=\"slotScope\">\n              <slot name=\"prependInner\" v-bind=\"slotScope\" />\n              <va-icon\n                v-if=\"$props.leftIcon\"\n                v-bind=\"iconProps\"\n              />\n            </template>\n\n            <template #icon>\n              <va-icon\n                v-if=\"canBeCleared\"\n                v-bind=\"clearIconProps\"\n                @click.stop=\"reset()\"\n              />\n              <va-icon\n                v-else-if=\"!$props.leftIcon\"\n                v-bind=\"iconProps\"\n              />\n            </template>\n          </va-input>\n        </slot>\n      </template>\n\n      <va-dropdown-content>\n        <va-date-picker\n            v-bind=\"datePickerProps\"\n            v-model=\"valueComputed\"\n            @click:day=\"$emit('click:day', $event)\"\n            @click:month=\"$emit('click:month', $event)\"\n            @click:year=\"$emit('click:year', $event)\"\n            @hover:day=\"$emit('hover:day', $event)\"\n            @hover:month=\"$emit('hover:month', $event)\"\n            @hover:year=\"$emit('hover:year', $event)\"\n            @update:view=\"$emit('update:view', $event)\"\n        >\n          <template v-for=\"(_, name) in $slots\" v-slot:[name]=\"bind\">\n            <slot :name=\"name\" v-bind=\"bind\" />\n          </template>\n        </va-date-picker>\n      </va-dropdown-content>\n    </va-dropdown>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, PropType, toRefs, watch, ref } from 'vue'\n\nimport { useClearableEmits, useClearable } from '../../composables/useClearable'\nimport { useValidation, useValidationEmits } from '../../composables/useValidation'\nimport { useStateful, useStatefulEmits } from '../../composables/useStateful'\nimport { useSyncProp } from '../va-date-picker/hooks/sync-prop'\nimport { isRange, isSingleDate, isDates } from '../va-date-picker/utils/date-utils'\nimport { filterComponentProps, extractComponentProps, extractComponentEmits } from '../../utils/child-props'\nimport { useRangeModelValueGuard } from './hooks/range-model-value-guard'\nimport { useDateParser } from './hooks/input-text-parser'\nimport { parseModelValue } from './hooks/model-value-parser'\n\nimport VaDatePicker from '../va-date-picker/VaDatePicker.vue'\nimport VaDropdown, { VaDropdownContent } from '../va-dropdown'\nimport VaInput from '../va-input'\nimport VaIcon from '../va-icon'\nimport { VaDatePickerModelValue } from '../va-date-picker/types'\n\nconst VaInputProps = extractComponentProps(VaInput, [\n  'mask', 'returnRaw', 'autosize', 'minRows', 'maxRows', 'type', 'inputmode',\n])\n\nexport default defineComponent({\n  name: 'VaDateInput',\n\n  components: {\n    VaDropdown,\n    VaDropdownContent,\n    VaDatePicker,\n    VaInput,\n    VaIcon,\n  },\n\n  props: {\n    ...VaInputProps,\n    ...extractComponentProps(VaDatePicker),\n\n    clearValue: { type: Date as PropType<VaDatePickerModelValue>, default: undefined },\n\n    resetOnClose: { type: Boolean, default: true },\n    isOpen: { type: Boolean as PropType<boolean | undefined>, default: undefined },\n\n    format: { type: Function as PropType<(date: VaDatePickerModelValue | undefined) => string> },\n    formatDate: { type: Function as PropType<(date: Date) => string>, default: (d: Date) => d.toLocaleDateString() },\n    parse: { type: Function as PropType<(input: string) => VaDatePickerModelValue> },\n    parseDate: { type: Function as PropType<(input: string) => Date> },\n    parseValue: { type: Function as PropType<typeof parseModelValue> },\n\n    delimiter: { type: String, default: ', ' },\n    rangeDelimiter: { type: String, default: ' ~ ' },\n    manualInput: { type: Boolean, default: false },\n\n    color: { type: String, default: 'primary' },\n    leftIcon: { type: Boolean, default: false },\n    icon: { type: String, default: 'calendar_today' },\n  },\n\n  emits: [\n    ...extractComponentEmits(VaDatePicker),\n    ...useClearableEmits,\n    ...useValidationEmits,\n    ...useStatefulEmits,\n    'update:is-open',\n    'update:text',\n  ],\n\n  setup (props, { emit, slots }) {\n    const { isOpen, resetOnClose } = toRefs(props)\n    const { valueComputed: statefulValue } = useStateful<VaDatePickerModelValue | undefined>(props, emit)\n    const { syncProp: isOpenSync } = useSyncProp(isOpen, 'is-open', emit, false)\n\n    const isRangeModelValueGuardDisabled = computed(() => !resetOnClose.value)\n\n    const {\n      valueComputed,\n      reset: resetInvalidRange,\n    } = useRangeModelValueGuard(statefulValue, isRangeModelValueGuardDisabled, props.parseValue)\n\n    watch(isOpenSync, (isOpened) => {\n      if (!isOpened && !isRangeModelValueGuardDisabled.value) { resetInvalidRange() }\n    })\n\n    const dateOrNothing = (date: Date | undefined | null) => date ? props.formatDate(date) : '...'\n\n    const input = ref<typeof VaInput | undefined>()\n\n    const { parseDateInputValue, isValid } = useDateParser(props)\n\n    const modelValueToString = (value: VaDatePickerModelValue): string => {\n      if (props.format) {\n        return props.format(valueComputed.value)\n      }\n\n      if (isDates(value)) {\n        return value.map((d) => props.formatDate(d)).join(props.delimiter)\n      }\n      if (isSingleDate(value)) {\n        return props.formatDate(value)\n      }\n      if (isRange(value)) {\n        return dateOrNothing(value.start) + props.rangeDelimiter + dateOrNothing(value.end)\n      }\n\n      throw new Error('VaDatePicker: Invalid model value. Value should be Date, Date[] or { start: Date, end: Date | null }')\n    }\n\n    const valueText = computed(() => {\n      if (!isValid.value) {\n        return ''\n      }\n\n      if (!valueComputed.value) {\n        if (!props.clearValue) { return '' }\n        return modelValueToString(props.clearValue)\n      }\n\n      return modelValueToString(valueComputed.value)\n    })\n\n    const onInputTextChanged = ({ target } : Event) => {\n      const parsedValue = parseDateInputValue((target as HTMLInputElement).value)\n\n      if (isValid.value) {\n        valueComputed.value = parsedValue\n      }\n    }\n\n    const reset = (): void => {\n      statefulValue.value = props.clearValue\n      emit('clear')\n    }\n\n    const focus = (): void => {\n      input.value?.focus()\n    }\n\n    const blur = (): void => {\n      input.value?.blur()\n    }\n\n    const { computedError, computedErrorMessages, listeners } = useValidation(props, emit, reset, focus)\n\n    const hasError = computed(() => (!isValid.value && valueComputed.value !== props.clearValue) || computedError.value)\n\n    const filterSlots = computed(() => {\n      const slotsWithIcons = [\n        props.leftIcon && 'prependInner',\n        (!props.leftIcon || props.clearable) && 'icon',\n      ]\n      return Object.keys(slots).filter(slot => !slotsWithIcons.includes(slot))\n    })\n\n    const {\n      canBeCleared,\n      clearIconProps,\n      onFocus,\n      onBlur,\n    } = useClearable(props, valueComputed)\n\n    const iconProps = computed(() => ({\n      name: props.icon,\n      color: props.color,\n      size: 'small',\n      class: 'va-date-input__icon',\n    }))\n\n    const computedInputProps = computed(() => ({\n      ...filterComponentProps(props, VaInputProps).value,\n      clearable: false,\n      rules: [],\n      error: hasError.value,\n      errorMessages: computedErrorMessages.value,\n      readonly: props.readonly || !props.manualInput,\n    }))\n\n    const computedInputListeners = computed(() => ({\n      focus: () => {\n        onFocus()\n        listeners.onFocus()\n      },\n      blur: () => {\n        onBlur()\n        listeners.onBlur()\n      },\n    }))\n\n    return {\n      valueText,\n      valueComputed,\n      isOpenSync,\n      onInputTextChanged,\n\n      input,\n      inputProps: computedInputProps,\n      inputListeners: computedInputListeners,\n      datePickerProps: filterComponentProps(props, extractComponentProps(VaDatePicker)),\n\n      filterSlots,\n      canBeCleared,\n      clearIconProps,\n      iconProps,\n\n      reset,\n      focus,\n      blur,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n.va-date-input {\n  display: flex;\n  font-family: var(--va-font-family);\n\n  &__icon {\n    cursor: pointer;\n  }\n\n  &__input.va-input_readonly {\n    cursor: pointer;\n  }\n\n  --va-date-picker-cell-size: 28px;\n\n  .va-dropdown {\n    width: 100%;\n  }\n}\n</style>\n","import withConfigTransport from '../../services/config-transport/withConfigTransport'\nimport VaDateInputComponent from '../va-date-input/VaDateInput.vue'\n\nexport const VaDateInput = withConfigTransport(VaDateInputComponent)\n"],"names":["isNil_1","isNil","value","defaultParseDateFunction","text","Date","parse","useDateParser","props","isValid","ref","parseDate","date","d","isNaN","getTime","parseDateInputValue","includes","delimiter","isMultipleDates","split","map","rangeDelimiter","isRange","start","end","parseSingleDate","parseModelValue","Array","isArray","useRangeModelValueGuard","modelValue","disabled","parseValue","bufferValue","valueComputed","computed","get","set","watch","newValue","reset","VaInputProps","extractComponentProps","VaInput","defineComponent","name","components","VaDropdown","VaDropdownContent","VaDatePicker","VaIcon","clearValue","type","default","undefined","resetOnClose","Boolean","isOpen","format","Function","formatDate","toLocaleDateString","String","manualInput","color","leftIcon","icon","emits","extractComponentEmits","useClearableEmits","useValidationEmits","useStatefulEmits","setup","emit","slots","toRefs","statefulValue","useStateful","syncProp","isOpenSync","useSyncProp","propRef","propName","defaultValue","isRangeModelValueGuardDisabled","resetInvalidRange","isOpened","dateOrNothing","input","modelValueToString","isDates","join","isSingleDate","Error","valueText","focus","computedError","computedErrorMessages","listeners","useValidation","hasError","filterSlots","slotsWithIcons","clearable","Object","keys","filter","slot","canBeCleared","clearIconProps","onFocus","onBlur","useClearable","iconProps","size","class","computedInputProps","filterComponentProps","rules","error","errorMessages","readonly","computedInputListeners","blur","onInputTextChanged","target","parsedValue","inputProps","inputListeners","datePickerProps","_createElementBlock","_hoisted_1","_createVNode","_ctx","offset","anchorSelector","anchor","_renderSlot","_mergeProps","_toHandlers","onChange","prependInner","slotScope","_createBlock","onClick","$event","_","bind","VaDateInput","withConfigTransport","VaDateInputComponent"],"mappings":"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"}