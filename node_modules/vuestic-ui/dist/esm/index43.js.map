{"version":3,"file":"index43.js","sources":["../../src/components/va-sidebar/hooks/useSidebar.ts","../../src/components/va-sidebar/VaSidebar.vue","../../src/components/va-sidebar/VaSidebar.vue?vue&type=template&id=2d72e2e8&lang.js","../../src/components/va-sidebar/VaSidebarItem/VaSidebarItem.vue","../../src/components/va-sidebar/VaSidebarItem/VaSidebarItem.vue?vue&type=template&id=28c8df18&lang.js","../../src/components/va-sidebar/VaSidebarItem/VaSidebarItemContent.vue?vue&type=template&id=653c85d6&lang.js","../../src/components/va-sidebar/VaSidebarItem/VaSidebarItemTitle.vue?vue&type=template&id=357b7474&lang.js","../../src/components/va-sidebar/VaSidebarItem/index.ts","../../src/components/va-sidebar/index.ts"],"sourcesContent":["import { provide, inject, getCurrentInstance, toRef, ref } from 'vue'\n\nconst key = Symbol('VaSidebar')\n\nexport const useSidebar = () => {\n  const { props } = getCurrentInstance()!\n\n  provide(key, {\n    color: toRef(props, 'color'),\n  })\n}\n\nexport const useSidebarItem = () => {\n  const { color } = inject(key, { color: ref('white') })\n\n  return {\n    sidebarColor: color,\n  }\n}\n","<template>\n  <aside\n    :class=\"computedClass\"\n    :style=\"computedStyle\"\n    @mouseenter=\"updateHoverState(true)\"\n    @mouseleave=\"updateHoverState(false)\"\n  >\n    <div class=\"va-sidebar__menu\">\n      <slot />\n    </div>\n  </aside>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, computed, ref, PropType } from 'vue'\n\nimport { getGradientBackground } from '../../services/color-config/color-functions'\nimport { useColors } from '../../services/color-config/color-config'\nimport { useTextColor } from '../../composables/useTextColor'\nimport { useSidebar } from './hooks/useSidebar'\n\nexport default defineComponent({\n  name: 'VaSidebar',\n  props: {\n    color: { type: String, default: 'background' },\n    textColor: { type: String },\n    gradient: { type: Boolean, default: false },\n    minimized: { type: Boolean, default: false },\n    hoverable: { type: Boolean, default: false },\n    position: { type: String as PropType<'top' | 'bottom' | 'left' | 'right'>, default: 'left' },\n    width: { type: String, default: '16rem' },\n    minimizedWidth: { type: String, default: '2.5rem' },\n    modelValue: { type: Boolean, default: true },\n  },\n  setup (props) {\n    const { getColor } = useColors()\n    useSidebar()\n\n    const isHovered = ref(false)\n\n    const isMinimized = computed(() => props.minimized || (props.hoverable && !isHovered.value))\n\n    const computedWidth = computed(() => {\n      if (!props.modelValue) {\n        return 0\n      }\n\n      return isMinimized.value ? props.minimizedWidth : props.width\n    })\n\n    const { textColorComputed } = useTextColor(props.color)\n\n    const computedStyle = computed(() => {\n      const backgroundColor = getColor(props.color)\n      const background = props.gradient ? getGradientBackground(backgroundColor) : backgroundColor\n\n      const color = textColorComputed.value\n\n      return {\n        color,\n        background,\n        width: computedWidth.value,\n      }\n    })\n\n    const computedClass = computed(() => ({\n      'va-sidebar': true,\n      'va-sidebar--minimized': isMinimized.value,\n      'va-sidebar--hidden': !props.modelValue,\n      'va-sidebar--right': props.position === 'right',\n    }))\n\n    const updateHoverState = (newHoverState: boolean) => {\n      isHovered.value = props.hoverable && newHoverState\n    }\n\n    return {\n      computedClass,\n      computedStyle,\n      updateHoverState,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"../../styles/resources\";\n@import \"variables\";\n\n.va-sidebar {\n  min-height: var(--va-sidebar-min-height);\n  height: var(--va-sidebar-height);\n  position: var(--va-sidebar-position);\n  top: var(--va-sidebar-top);\n  left: var(--va-sidebar-left);\n  transition: var(--va-sidebar-transition);\n  z-index: var(--va-sidebar-z-index);\n  font-family: var(--va-font-family);\n\n  &__menu {\n    max-height: var(--va-sidebar-menu-max-height);\n    margin-bottom: var(--va-sidebar-menu-margin-bottom);\n    list-style: var(--va-sidebar-menu-list-style);\n    padding-left: var(--va-sidebar-menu-padding-left);\n    overflow-y: var(--va-sidebar-menu-overflow-y);\n    overflow-x: var(--va-sidebar-menu-overflow-x);\n  }\n\n  &--minimized {\n    left: 0;\n\n    .va-sidebar-link-group {\n      .va-sidebar-link__content {\n        padding-right: 0;\n      }\n    }\n\n    & + .content-wrap {\n      margin-left: $sidebar-width--hidden !important;\n    }\n  }\n\n  &--right {\n    left: auto;\n    right: 0;\n  }\n}\n</style>\n","<template>\n  <aside\n    :class=\"computedClass\"\n    :style=\"computedStyle\"\n    @mouseenter=\"updateHoverState(true)\"\n    @mouseleave=\"updateHoverState(false)\"\n  >\n    <div class=\"va-sidebar__menu\">\n      <slot />\n    </div>\n  </aside>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, computed, ref, PropType } from 'vue'\n\nimport { getGradientBackground } from '../../services/color-config/color-functions'\nimport { useColors } from '../../services/color-config/color-config'\nimport { useTextColor } from '../../composables/useTextColor'\nimport { useSidebar } from './hooks/useSidebar'\n\nexport default defineComponent({\n  name: 'VaSidebar',\n  props: {\n    color: { type: String, default: 'background' },\n    textColor: { type: String },\n    gradient: { type: Boolean, default: false },\n    minimized: { type: Boolean, default: false },\n    hoverable: { type: Boolean, default: false },\n    position: { type: String as PropType<'top' | 'bottom' | 'left' | 'right'>, default: 'left' },\n    width: { type: String, default: '16rem' },\n    minimizedWidth: { type: String, default: '2.5rem' },\n    modelValue: { type: Boolean, default: true },\n  },\n  setup (props) {\n    const { getColor } = useColors()\n    useSidebar()\n\n    const isHovered = ref(false)\n\n    const isMinimized = computed(() => props.minimized || (props.hoverable && !isHovered.value))\n\n    const computedWidth = computed(() => {\n      if (!props.modelValue) {\n        return 0\n      }\n\n      return isMinimized.value ? props.minimizedWidth : props.width\n    })\n\n    const { textColorComputed } = useTextColor(props.color)\n\n    const computedStyle = computed(() => {\n      const backgroundColor = getColor(props.color)\n      const background = props.gradient ? getGradientBackground(backgroundColor) : backgroundColor\n\n      const color = textColorComputed.value\n\n      return {\n        color,\n        background,\n        width: computedWidth.value,\n      }\n    })\n\n    const computedClass = computed(() => ({\n      'va-sidebar': true,\n      'va-sidebar--minimized': isMinimized.value,\n      'va-sidebar--hidden': !props.modelValue,\n      'va-sidebar--right': props.position === 'right',\n    }))\n\n    const updateHoverState = (newHoverState: boolean) => {\n      isHovered.value = props.hoverable && newHoverState\n    }\n\n    return {\n      computedClass,\n      computedStyle,\n      updateHoverState,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"../../styles/resources\";\n@import \"variables\";\n\n.va-sidebar {\n  min-height: var(--va-sidebar-min-height);\n  height: var(--va-sidebar-height);\n  position: var(--va-sidebar-position);\n  top: var(--va-sidebar-top);\n  left: var(--va-sidebar-left);\n  transition: var(--va-sidebar-transition);\n  z-index: var(--va-sidebar-z-index);\n  font-family: var(--va-font-family);\n\n  &__menu {\n    max-height: var(--va-sidebar-menu-max-height);\n    margin-bottom: var(--va-sidebar-menu-margin-bottom);\n    list-style: var(--va-sidebar-menu-list-style);\n    padding-left: var(--va-sidebar-menu-padding-left);\n    overflow-y: var(--va-sidebar-menu-overflow-y);\n    overflow-x: var(--va-sidebar-menu-overflow-x);\n  }\n\n  &--minimized {\n    left: 0;\n\n    .va-sidebar-link-group {\n      .va-sidebar-link__content {\n        padding-right: 0;\n      }\n    }\n\n    & + .content-wrap {\n      margin-left: $sidebar-width--hidden !important;\n    }\n  }\n\n  &--right {\n    left: auto;\n    right: 0;\n  }\n}\n</style>\n","<template>\n  <router-link custom :to=\"to\" v-slot=\"{ href, navigate }\">\n    <a\n      ref=\"anchor\"\n      v-bind=\"$attrs\"\n      class=\"va-sidebar__item va-sidebar-item\"\n      :class=\"{ 'va-sidebar-item--active': $props.active }\"\n      :style=\"computedStyle\"\n      :href=\"href\"\n      @click=\"navigate\"\n      v-on=\"keyboardFocusListeners\"\n    >\n      <slot />\n    </a>\n  </router-link>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType, ref, computed } from 'vue'\nimport { RouteLocationRaw } from 'vue-router'\nimport { useColors } from '../../../services/color-config/color-config'\nimport useKeyboardOnlyFocus from '../../../composables/useKeyboardOnlyFocus'\nimport { useHover } from '../../../composables/useHover'\nimport { useTextColor } from '../../../composables/useTextColor'\nimport { useSidebarItem } from '../hooks/useSidebar'\n\nexport default defineComponent({\n  name: 'VaSidebarItem',\n\n  inheritAttrs: false,\n\n  props: {\n    to: {\n      type: [String, Object] as PropType<RouteLocationRaw>,\n      default: () => ({}),\n    },\n    active: { type: Boolean, default: false },\n    textColor: { type: String, default: undefined },\n    activeColor: { type: String, default: 'primary' },\n    hoverColor: { type: String, default: undefined },\n    borderColor: { type: String, default: undefined },\n  },\n\n  setup (props) {\n    const anchor = ref<HTMLAnchorElement>()\n\n    const { isHovered } = useHover(anchor)\n    const { getColor, getHoverColor, getFocusColor } = useColors()\n    const { hasKeyboardFocus, keyboardFocusListeners } = useKeyboardOnlyFocus()\n    const { sidebarColor } = useSidebarItem()\n\n    const backgroundColorComputed = computed(() => {\n      if (isHovered.value) {\n        return getHoverColor(getColor(props.hoverColor || props.activeColor))\n      }\n\n      if (props.active) {\n        return getColor(props.activeColor)\n      }\n\n      if (hasKeyboardFocus.value) {\n        return getFocusColor(getColor(props.hoverColor || props.activeColor))\n      }\n\n      return getColor(sidebarColor.value)\n    })\n\n    const { textColorComputed } = useTextColor(backgroundColorComputed)\n\n    const computedStyle = computed(() => {\n      const style: Record<string, string> = {}\n\n      style.color = textColorComputed.value\n\n      if (isHovered.value || props.active || hasKeyboardFocus.value) {\n        style.backgroundColor = backgroundColorComputed.value\n      }\n\n      if (props.active) {\n        style.borderColor = getColor(props.borderColor || props.activeColor)\n      }\n\n      // Override default link color from VaContent\n      style.color = `${style.color} !important`\n\n      return style\n    })\n\n    return {\n      anchor,\n      computedStyle,\n      keyboardFocusListeners,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"../variables\";\n\n.va-sidebar__item {\n  border-left: var(--va-sidebar-item-active-border-size) solid transparent;\n  padding-right: var(--va-sidebar-item-active-border-size);\n  display: inline-block;\n  width: 100%;\n  color: inherit !important;\n  font-family: var(--va-font-family);\n}\n</style>\n","<template>\n  <router-link custom :to=\"to\" v-slot=\"{ href, navigate }\">\n    <a\n      ref=\"anchor\"\n      v-bind=\"$attrs\"\n      class=\"va-sidebar__item va-sidebar-item\"\n      :class=\"{ 'va-sidebar-item--active': $props.active }\"\n      :style=\"computedStyle\"\n      :href=\"href\"\n      @click=\"navigate\"\n      v-on=\"keyboardFocusListeners\"\n    >\n      <slot />\n    </a>\n  </router-link>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType, ref, computed } from 'vue'\nimport { RouteLocationRaw } from 'vue-router'\nimport { useColors } from '../../../services/color-config/color-config'\nimport useKeyboardOnlyFocus from '../../../composables/useKeyboardOnlyFocus'\nimport { useHover } from '../../../composables/useHover'\nimport { useTextColor } from '../../../composables/useTextColor'\nimport { useSidebarItem } from '../hooks/useSidebar'\n\nexport default defineComponent({\n  name: 'VaSidebarItem',\n\n  inheritAttrs: false,\n\n  props: {\n    to: {\n      type: [String, Object] as PropType<RouteLocationRaw>,\n      default: () => ({}),\n    },\n    active: { type: Boolean, default: false },\n    textColor: { type: String, default: undefined },\n    activeColor: { type: String, default: 'primary' },\n    hoverColor: { type: String, default: undefined },\n    borderColor: { type: String, default: undefined },\n  },\n\n  setup (props) {\n    const anchor = ref<HTMLAnchorElement>()\n\n    const { isHovered } = useHover(anchor)\n    const { getColor, getHoverColor, getFocusColor } = useColors()\n    const { hasKeyboardFocus, keyboardFocusListeners } = useKeyboardOnlyFocus()\n    const { sidebarColor } = useSidebarItem()\n\n    const backgroundColorComputed = computed(() => {\n      if (isHovered.value) {\n        return getHoverColor(getColor(props.hoverColor || props.activeColor))\n      }\n\n      if (props.active) {\n        return getColor(props.activeColor)\n      }\n\n      if (hasKeyboardFocus.value) {\n        return getFocusColor(getColor(props.hoverColor || props.activeColor))\n      }\n\n      return getColor(sidebarColor.value)\n    })\n\n    const { textColorComputed } = useTextColor(backgroundColorComputed)\n\n    const computedStyle = computed(() => {\n      const style: Record<string, string> = {}\n\n      style.color = textColorComputed.value\n\n      if (isHovered.value || props.active || hasKeyboardFocus.value) {\n        style.backgroundColor = backgroundColorComputed.value\n      }\n\n      if (props.active) {\n        style.borderColor = getColor(props.borderColor || props.activeColor)\n      }\n\n      // Override default link color from VaContent\n      style.color = `${style.color} !important`\n\n      return style\n    })\n\n    return {\n      anchor,\n      computedStyle,\n      keyboardFocusListeners,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"../variables\";\n\n.va-sidebar__item {\n  border-left: var(--va-sidebar-item-active-border-size) solid transparent;\n  padding-right: var(--va-sidebar-item-active-border-size);\n  display: inline-block;\n  width: 100%;\n  color: inherit !important;\n  font-family: var(--va-font-family);\n}\n</style>\n","<template>\n  <div class=\"va-sidebar__item__content va-sidebar-item-content\">\n    <slot />\n  </div>\n</template>\n\n<style lang=\"scss\">\n@import '../variables';\n\n.va-sidebar__item__content {\n  display: flex;\n  align-items: center;\n  padding: var(--va-sidebar-item-content-padding);\n\n  & > * {\n    margin-right: var(--va-sidebar-item-content-gap);\n\n    &:last-child {\n      margin-right: 0;\n    }\n  }\n}\n</style>\n","<template>\n  <div class=\"va-sidebar__title va-sidebar-item-title\">\n    <slot />\n  </div>\n</template>\n\n<style lang=\"scss\">\n@import '../_variables';\n\n.va-sidebar__title {\n  flex-grow: 1;\n  white-space: var(--va-sidebar-item-title-white-space);\n}\n</style>\n","import withConfigTransport from '../../../services/config-transport/withConfigTransport'\nimport VaSidebarItem from './VaSidebarItem.vue'\nimport VaSidebarItemContentComponent from './VaSidebarItemContent.vue'\nimport VaSidebarItemTitleComponent from './VaSidebarItemTitle.vue'\n\nexport const VaSidebarItemContent = withConfigTransport(VaSidebarItemContentComponent)\nexport const VaSidebarItemTitle = withConfigTransport(VaSidebarItemTitleComponent)\n\nexport default withConfigTransport(VaSidebarItem)\n","import withConfigTransport from '../../services/config-transport/withConfigTransport'\nimport VaSidebar from './VaSidebar.vue'\nexport { default as VaSidebarItem, VaSidebarItemContent, VaSidebarItemTitle } from './VaSidebarItem'\n\nexport default withConfigTransport(VaSidebar)\n"],"names":["key","Symbol","defineComponent","name","props","color","type","String","default","textColor","gradient","Boolean","minimized","hoverable","position","width","minimizedWidth","modelValue","setup","getColor","useColors","getCurrentInstance","provide","toRef","useSidebar","isHovered","ref","isMinimized","computed","value","computedWidth","textColorComputed","useTextColor","computedStyle","backgroundColor","background","getGradientBackground","computedClass","updateHoverState","newHoverState","class","_createElementBlock","_ctx","style","onMouseenter","onMouseleave","_createElementVNode","_hoisted_1","_renderSlot","inheritAttrs","to","Object","active","undefined","activeColor","hoverColor","borderColor","anchor","useHover","getHoverColor","getFocusColor","hasKeyboardFocus","keyboardFocusListeners","useKeyboardOnlyFocus","sidebarColor","inject","useSidebarItem","backgroundColorComputed","_createBlock","custom","href","navigate","_mergeProps","onClick","_toHandlers","VaSidebarItemContent","withConfigTransport","VaSidebarItemTitle","VaSidebarItemTitleComponent","VaSidebarItem","VaSidebar"],"mappings":"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"}