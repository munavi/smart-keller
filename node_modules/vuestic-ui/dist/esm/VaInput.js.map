{"version":3,"file":"VaInput.js","sources":["../../src/components/va-input/hooks/useCleave.ts","../../src/composables/useClearable.ts","../../src/components/va-input/components/VaTextarea/useTextareaRowHeight.ts","../../src/components/va-input/components/VaTextarea/VaTextarea.vue","../../src/components/va-input/components/VaTextarea/VaTextarea.vue?vue&type=template&id=150a9286&lang.js","../../src/components/va-input/VaInput.vue","../../src/components/va-input/VaInput.vue?vue&type=template&id=db73a230&lang.js"],"sourcesContent":["import Cleave from 'cleave.js'\nimport { CleaveOptions } from 'cleave.js/options'\nimport { computed, onBeforeUnmount, onMounted, ref, Ref, watch } from 'vue'\n\nconst DEFAULT_MASK_TOKENS: Record<string, Record<string, unknown>> = {\n  creditCard: {\n    creditCard: true,\n  },\n  date: {\n    date: true,\n    datePattern: ['d', 'm', 'Y'],\n  },\n  time: {\n    time: true,\n    timePattern: ['h', 'm'],\n    timeFormat: '24',\n  },\n  numeral: {\n    numeral: true,\n    numeralThousandsGroupStyle: 'thousand',\n  },\n}\n\nexport const useCleaveProps = {\n  mask: { type: [String, Object], default: '' },\n  returnRaw: { type: Boolean, default: true },\n  modelValue: { type: String },\n}\n\ntype Props = {\n  mask: string | Record<string, string>,\n  returnRaw: boolean,\n  modelValue: string | number,\n}\n\nexport const useCleave = (\n  element: Ref<HTMLInputElement | undefined>,\n  props: Props,\n  emit: (event: 'update:modelValue' | any, ...args: any[]) => any,\n) => {\n  const cleave = ref<Cleave>()\n\n  const getMask = (mask: CleaveOptions | string) => {\n    if (typeof mask === 'string') {\n      return DEFAULT_MASK_TOKENS[mask] ? { ...DEFAULT_MASK_TOKENS[mask] } : {}\n    }\n    return { ...mask }\n  }\n\n  const destroyCleave = () => {\n    if (cleave.value) { cleave.value.destroy() }\n  }\n\n  const initCleave = () => {\n    destroyCleave()\n\n    if (!element.value) { return }\n\n    cleave.value = new Cleave(element.value, getMask(props.mask))\n  }\n\n  onMounted(() => { initCleave() })\n  onBeforeUnmount(() => { destroyCleave() })\n\n  watch(() => [element.value, props.mask], () => { initCleave() })\n\n  const computedValue = computed<string | number>(() => {\n    if (cleave.value) {\n      if (props.returnRaw && props.modelValue === cleave.value.getRawValue()) {\n        return cleave.value.getFormattedValue()\n      }\n    }\n\n    return props.modelValue\n  })\n\n  const onInput = (event: Event) => {\n    const value = (event.target as HTMLInputElement).value\n\n    if (props.mask !== 'string' && !Object.keys(props.mask).length) {\n      emit('update:modelValue', value)\n      return\n    }\n\n    if (cleave.value) {\n      cleave.value.setRawValue(value)\n      if (props.returnRaw) {\n        emit('update:modelValue', cleave.value.getRawValue())\n        return\n      }\n    }\n\n    emit('update:modelValue', value)\n  }\n\n  return {\n    cleave,\n    computedValue,\n    onInput,\n  }\n}\n","import { computed, Ref } from 'vue'\nimport { useFocus } from './useFocus'\n\ninterface ClearableProps {\n  clearable: boolean\n  clearableIcon: string\n  clearValue: any\n  disabled?: boolean\n  readonly?: boolean\n  success?: boolean\n  color?: string\n}\n\nexport const useClearableProps = {\n  clearable: { type: Boolean, default: false },\n  clearableIcon: { type: String, default: 'highlight_off' },\n  clearValue: { type: String, default: '' },\n}\n\nexport const useClearableEmits = ['clear']\n\nexport const useClearable = (\n  props: ClearableProps,\n  inputValue: Ref<any>,\n  emit?: (event: 'focus' | 'blur', e?: Event) => void,\n  el?: Ref<any>,\n  hasError?: Ref<boolean>,\n) => {\n  const { isFocused, onFocus, onBlur } = useFocus(el, emit)\n\n  const clearedValues = [null, undefined, props.clearValue]\n\n  const canBeCleared = computed(() => (\n    props.clearable &&\n    !props.disabled &&\n    !props.readonly &&\n    !clearedValues.includes(inputValue.value)\n  ))\n\n  const clearIconColor = computed(() => {\n    if (isFocused?.value) { return props.color || 'primary' }\n    if (hasError?.value) { return 'danger' }\n    if (props.success) { return 'success' }\n\n    return 'gray'\n  })\n\n  const clearIconProps = computed(() => ({\n    name: props.clearableIcon,\n    color: clearIconColor.value,\n    size: 'small',\n  }))\n\n  return {\n    canBeCleared,\n    clearIconColor,\n    clearIconProps,\n    onFocus,\n    onBlur,\n  }\n}\n","import { Ref } from 'vue'\n\nconst HIDDEN_TEXTAREA_STYLE = `\n  min-height:0 !important;\n  max-height:none !important;\n  height:0 !important;\n  visibility:hidden !important;\n  overflow:hidden !important;\n  position:absolute !important;\n  z-index:-1000 !important;\n  top:0 !important;\n  right:0 !important';\n`\n\nconst SIZING_STYLE = [\n  'letter-spacing',\n  'line-height',\n  'padding-top',\n  'padding-bottom',\n  'font-family',\n  'font-weight',\n  'font-size',\n  'text-rendering',\n  'text-transform',\n  'width',\n  'text-indent',\n  'padding-left',\n  'padding-right',\n  'border-width',\n  'box-sizing',\n]\n\nconst getNodeHeightStyles = (node: HTMLElement) => {\n  const style = window.getComputedStyle(node)\n\n  return {\n    boxSizing:\n      style.getPropertyValue('box-sizing') ||\n      style.getPropertyValue('-moz-box-sizing') ||\n      style.getPropertyValue('-webkit-box-sizing'),\n    padding:\n      parseFloat(style.getPropertyValue('padding-bottom')) +\n      parseFloat(style.getPropertyValue('padding-top')),\n    border:\n      parseFloat(style.getPropertyValue('border-bottom-width')) +\n      parseFloat(style.getPropertyValue('border-top-width')),\n    styles:\n      SIZING_STYLE.map(name => `${name}:${style.getPropertyValue(name)}`).join(';') + ';',\n    lineHeight:\n      parseInt(style.getPropertyValue('line-height')),\n  }\n}\n\nlet textarea: null | HTMLTextAreaElement = null\n\nconst createHiddenTextarea = (original: HTMLTextAreaElement, styles: string) => {\n  if (!textarea) {\n    textarea = document.createElement('textarea')\n  }\n\n  textarea.setAttribute('style', styles + HIDDEN_TEXTAREA_STYLE)\n  textarea.value = original.value || original.placeholder || ''\n  const wrap = original.getAttribute('wrap')\n\n  if (wrap !== null) {\n    textarea.setAttribute('wrap', wrap)\n  } else {\n    textarea.removeAttribute('wrap')\n  }\n\n  return textarea\n}\n\nexport const useTextareaRowHeight = (textarea: Ref<HTMLTextAreaElement | undefined>) => {\n  const calculateRowHeight = () => {\n    if (!textarea.value) { return 0 }\n\n    return getNodeHeightStyles(textarea.value).lineHeight\n  }\n\n  const calculateHeight = () => {\n    if (!textarea.value) { return 0 }\n\n    const { boxSizing, padding, border, styles } = getNodeHeightStyles(textarea.value)\n    const hiddenTextarea = createHiddenTextarea(textarea.value, styles)\n    document.body.appendChild(hiddenTextarea)\n    let height = hiddenTextarea.scrollHeight\n\n    if (boxSizing === 'border-box') {\n      height += border\n    } else if (boxSizing === 'content-box') {\n      height -= padding\n    }\n\n    document.body.removeChild(hiddenTextarea)\n\n    return height\n  }\n\n  return {\n    calculateRowHeight,\n    calculateHeight,\n  }\n}\n","<template>\n  <textarea\n    ref=\"textarea\"\n    class=\"textarea\"\n    v-bind=\"{ ...computedProps, ...listeners }\"\n    :value=\"modelValue\"\n    :style=\"computedStyle\"\n  />\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, onMounted, ref, watch, nextTick, StyleValue, CSSProperties } from 'vue'\nimport pick from 'lodash/pick.js'\nimport { useFormProps } from '../../../../composables/useForm'\nimport { useTextareaRowHeight } from './useTextareaRowHeight'\nimport { useEmitProxy } from '../../../../composables/useEmitProxy'\n\nconst positiveNumberValidator = (val: number) => {\n  if (val > 0 && (val | 0) === val) {\n    return true\n  }\n  throw new Error(`\\`minRows|maxRows\\` must be a positive integer greater than 0, but ${val} is provided`)\n}\n\nconst { createEmits, createListeners } = useEmitProxy([\n  'input', 'change', 'click', 'update:modelValue',\n])\n\nexport default defineComponent({\n  name: 'VaTextarea',\n\n  props: {\n    ...useFormProps,\n    modelValue: { type: [String, Number], default: '' },\n    placeholder: { type: String },\n    autosize: { type: Boolean, default: false },\n    minRows: {\n      type: Number,\n      default: 1,\n      validator: positiveNumberValidator,\n    },\n\n    maxRows: {\n      type: Number,\n      validator: positiveNumberValidator,\n    },\n  },\n\n  emits: createEmits(),\n\n  setup (props, { emit }) {\n    const textarea = ref<HTMLTextAreaElement | undefined>()\n    const rowHeight = ref(-1)\n    const height = ref(-1)\n    const { calculateRowHeight, calculateHeight } = useTextareaRowHeight(textarea)\n\n    const isResizable = computed(() => {\n      return Boolean((props.autosize || props.maxRows || props.minRows !== 1) && textarea.value)\n    })\n\n    const updateRowHeight = () => {\n      if (isResizable.value) {\n        rowHeight.value = calculateRowHeight()\n      }\n    }\n\n    const updateHeight = () => {\n      if (isResizable.value) {\n        height.value = calculateHeight()\n      }\n    }\n\n    onMounted(() => {\n      updateRowHeight()\n      updateHeight()\n    })\n\n    watch(() => props.modelValue, () => {\n      nextTick(updateHeight)\n    })\n\n    const computedStyle = computed(() => ({\n      minHeight: rowHeight.value * props.minRows + 'px',\n      maxHeight: props.maxRows ? (rowHeight.value * props.maxRows + 'px') : undefined,\n      height: height.value + 'px',\n      resize: isResizable.value ? undefined : 'none',\n    }) as CSSProperties)\n\n    const computedProps = computed(() => ({\n      ...pick(props, ['disabled', 'readonly', 'placeholder']),\n    }))\n\n    const focus = () => {\n      textarea.value?.focus()\n    }\n\n    const blur = () => {\n      textarea.value?.blur()\n    }\n\n    return {\n      textarea,\n      computedStyle,\n      listeners: createListeners(emit),\n      computedProps,\n\n      // will used after fix 'useConfigTransport'\n      // focus,\n      // blur,\n    }\n  },\n\n  // we use this while we have problem with 'useConfigTransport'\n  methods: {\n    focus () { this.textarea?.focus() },\n    blur () { this.textarea?.blur() },\n  },\n})\n</script>\n\n<style lang=\"scss\">\n.textarea {\n  padding: 0;\n  border: 0;\n  font-family: var(--va-font-family);\n}\n</style>\n","<template>\n  <textarea\n    ref=\"textarea\"\n    class=\"textarea\"\n    v-bind=\"{ ...computedProps, ...listeners }\"\n    :value=\"modelValue\"\n    :style=\"computedStyle\"\n  />\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, onMounted, ref, watch, nextTick, StyleValue, CSSProperties } from 'vue'\nimport pick from 'lodash/pick.js'\nimport { useFormProps } from '../../../../composables/useForm'\nimport { useTextareaRowHeight } from './useTextareaRowHeight'\nimport { useEmitProxy } from '../../../../composables/useEmitProxy'\n\nconst positiveNumberValidator = (val: number) => {\n  if (val > 0 && (val | 0) === val) {\n    return true\n  }\n  throw new Error(`\\`minRows|maxRows\\` must be a positive integer greater than 0, but ${val} is provided`)\n}\n\nconst { createEmits, createListeners } = useEmitProxy([\n  'input', 'change', 'click', 'update:modelValue',\n])\n\nexport default defineComponent({\n  name: 'VaTextarea',\n\n  props: {\n    ...useFormProps,\n    modelValue: { type: [String, Number], default: '' },\n    placeholder: { type: String },\n    autosize: { type: Boolean, default: false },\n    minRows: {\n      type: Number,\n      default: 1,\n      validator: positiveNumberValidator,\n    },\n\n    maxRows: {\n      type: Number,\n      validator: positiveNumberValidator,\n    },\n  },\n\n  emits: createEmits(),\n\n  setup (props, { emit }) {\n    const textarea = ref<HTMLTextAreaElement | undefined>()\n    const rowHeight = ref(-1)\n    const height = ref(-1)\n    const { calculateRowHeight, calculateHeight } = useTextareaRowHeight(textarea)\n\n    const isResizable = computed(() => {\n      return Boolean((props.autosize || props.maxRows || props.minRows !== 1) && textarea.value)\n    })\n\n    const updateRowHeight = () => {\n      if (isResizable.value) {\n        rowHeight.value = calculateRowHeight()\n      }\n    }\n\n    const updateHeight = () => {\n      if (isResizable.value) {\n        height.value = calculateHeight()\n      }\n    }\n\n    onMounted(() => {\n      updateRowHeight()\n      updateHeight()\n    })\n\n    watch(() => props.modelValue, () => {\n      nextTick(updateHeight)\n    })\n\n    const computedStyle = computed(() => ({\n      minHeight: rowHeight.value * props.minRows + 'px',\n      maxHeight: props.maxRows ? (rowHeight.value * props.maxRows + 'px') : undefined,\n      height: height.value + 'px',\n      resize: isResizable.value ? undefined : 'none',\n    }) as CSSProperties)\n\n    const computedProps = computed(() => ({\n      ...pick(props, ['disabled', 'readonly', 'placeholder']),\n    }))\n\n    const focus = () => {\n      textarea.value?.focus()\n    }\n\n    const blur = () => {\n      textarea.value?.blur()\n    }\n\n    return {\n      textarea,\n      computedStyle,\n      listeners: createListeners(emit),\n      computedProps,\n\n      // will used after fix 'useConfigTransport'\n      // focus,\n      // blur,\n    }\n  },\n\n  // we use this while we have problem with 'useConfigTransport'\n  methods: {\n    focus () { this.textarea?.focus() },\n    blur () { this.textarea?.blur() },\n  },\n})\n</script>\n\n<style lang=\"scss\">\n.textarea {\n  padding: 0;\n  border: 0;\n  font-family: var(--va-font-family);\n}\n</style>\n","<template>\n  <VaInputWrapper\n    v-bind=\"fieldListeners\"\n    :class=\"$attrs.class\"\n    :style=\"$attrs.style\"\n    :color=\"color\"\n    :readonly=\"readonly\"\n    :disabled=\"disabled\"\n    :success=\"success\"\n    :messages=\"messages\"\n    :error=\"computedError\"\n    :error-messages=\"computedErrorMessages\"\n    :error-count=\"errorCount\"\n    :label=\"label\"\n    :bordered=\"bordered\"\n    :outline=\"outline\"\n    :focused=\"isFocused\"\n    :requiredMark=\"requiredMark\"\n    @click=\"input && input.focus()\"\n  >\n    <!-- Simply proxy slots to VaInputWrapper -->\n    <template\n      v-for=\"name in filterSlots\"\n      :key=\"name\"\n      v-slot:[name]=\"slotScope\"\n    >\n      <slot :name=\"name\" v-bind=\"slotScope\" />\n    </template>\n\n    <template #icon=\"slotScope\">\n      <va-icon\n        v-if=\"success\"\n        color=\"success\"\n        name=\"check_circle\"\n        size=\"small\"\n      />\n      <va-icon\n        v-if=\"computedError\"\n        color=\"danger\"\n        name=\"warning\"\n        size=\"small\"\n      />\n      <va-icon\n        v-if=\"canBeCleared\"\n        v-bind=\"clearIconProps\"\n        @click.stop=\"reset()\"\n      />\n      <va-icon\n        v-if=\"loading\"\n        :color=\"color\"\n        size=\"small\"\n        name=\"loop\"\n        spin=\"counter-clockwise\"\n      />\n      <slot name=\"icon\" v-bind=\"slotScope\" />\n    </template>\n\n    <VaTextarea\n      v-if=\"type === 'textarea' && !$slots.content\"\n      ref=\"input\"\n      v-bind=\"{ ...computedChildAttributes, ...textareaProps, ...inputEvents }\"\n      class=\"va-input__content__input\"\n    />\n\n    <input\n      v-else-if=\"!$slots.content\"\n      ref=\"input\"\n      class=\"va-input__content__input\"\n      v-bind=\"{ ...computedInputAttributes, ...inputEvents }\"\n      :value=\"computedValue\"\n    >\n  </VaInputWrapper>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, InputHTMLAttributes, PropType, ref, toRefs } from 'vue'\nimport { useFormProps } from '../../composables/useForm'\nimport { useValidation, useValidationProps, useValidationEmits } from '../../composables/useValidation'\nimport { useCleave, useCleaveProps } from './hooks/useCleave'\nimport { useFocus } from '../../composables/useFocus'\nimport { useEmitProxy } from '../../composables/useEmitProxy'\nimport VaInputWrapper from './components/VaInputWrapper.vue'\nimport { useClearableProps, useClearable, useClearableEmits } from '../../composables/useClearable'\nimport VaTextarea from './components/VaTextarea/VaTextarea.vue'\nimport VaIcon from '../va-icon/VaIcon.vue'\nimport { extractComponentProps, filterComponentProps } from '../../utils/child-props'\nimport omit from 'lodash/omit.js'\nimport pick from 'lodash/pick.js'\n\nconst VaTextareaProps = extractComponentProps(VaTextarea)\n\nconst { createEmits: createInputEmits, createListeners: createInputListeners } = useEmitProxy(\n  ['change', 'keyup', 'keypress', 'keydown', 'focus', 'blur'],\n)\n\nconst { createEmits: createFieldEmits, createListeners: createFieldListeners } = useEmitProxy([\n  'click',\n  'click-prepend',\n  'click-append',\n  'click-prepend-inner',\n  'click-append-inner',\n  'click-icon',\n])\n\nexport default defineComponent({\n  name: 'VaInput',\n\n  components: { VaInputWrapper, VaTextarea, VaIcon },\n\n  props: {\n    ...useFormProps,\n    ...useValidationProps,\n    ...useClearableProps,\n    ...useCleaveProps,\n    ...VaTextareaProps,\n\n    // input\n    placeholder: { type: String, default: '' },\n    tabindex: { type: Number, default: 0 },\n    modelValue: { type: [String, Number], default: '' },\n    label: { type: String, default: '' },\n    type: { type: String as PropType<'text' | 'textarea'>, default: 'text' },\n    loading: { type: Boolean, default: false },\n    inputClass: { type: String, default: '' },\n    pattern: { type: String },\n    inputmode: { type: String, default: 'text' },\n\n    // style\n    color: { type: String, default: 'primary' },\n    outline: { type: Boolean, default: false },\n    bordered: { type: Boolean, default: false },\n    requiredMark: { type: Boolean, default: false },\n  },\n\n  emits: [\n    'update:modelValue',\n    ...useValidationEmits,\n    ...useClearableEmits,\n    ...createInputEmits(),\n    ...createFieldEmits(),\n  ],\n\n  inheritAttrs: false,\n\n  setup (props, { emit, attrs, slots }) {\n    const input = ref<HTMLInputElement | typeof VaTextarea | undefined>()\n\n    const { isFocused, onFocus: onFocusListener, onBlur: onBlurListener } = useFocus()\n\n    const reset = () => {\n      emit('update:modelValue', props.clearValue)\n      emit('clear')\n    }\n\n    const focus = () => {\n      input.value?.focus()\n    }\n\n    const blur = () => {\n      input.value?.blur()\n    }\n\n    const filterSlots = computed(() => {\n      const iconSlot = ['icon']\n      return Object.keys(slots).filter(slot => !iconSlot.includes(slot))\n    })\n\n    const {\n      computedError,\n      computedErrorMessages,\n      listeners: validationListeners,\n    } = useValidation(props, emit, reset, focus)\n\n    const { modelValue } = toRefs(props)\n    const {\n      canBeCleared,\n      clearIconProps,\n    } = useClearable(props, modelValue, emit, input, computedError)\n\n    /** Use cleave only if this component is input, because it will break. */\n    const computedCleaveTarget = computed(() => {\n      return props.type === 'textarea'\n        ? undefined\n        : input.value as HTMLInputElement | undefined\n    })\n    const { computedValue, onInput } = useCleave(computedCleaveTarget, props, emit)\n\n    const inputListeners = createInputListeners(emit)\n\n    /** Combine EmitProxy events with validation events to avoid events overriding */\n    const onFocus = (e: Event) => {\n      inputListeners.onFocus(e)\n      validationListeners.onFocus()\n      onFocusListener()\n    }\n\n    const onBlur = (e: Event) => {\n      inputListeners.onBlur(e)\n      validationListeners.onBlur()\n      onBlurListener()\n    }\n\n    const inputEvents = {\n      ...inputListeners,\n      onFocus,\n      onBlur,\n      onInput,\n    }\n\n    const computedChildAttributes = computed(() => ({\n      ariaLabel: props.label,\n      class: props.inputClass,\n      ...omit(attrs, ['class', 'style']),\n    }) as InputHTMLAttributes)\n\n    const computedInputAttributes = computed(() => ({\n      ...computedChildAttributes.value,\n      ...pick(props, ['type', 'tabindex', 'disabled', 'readonly', 'placeholder', 'pattern', 'inputmode']),\n    }) as InputHTMLAttributes)\n\n    return {\n      input,\n      inputEvents,\n\n      computedChildAttributes,\n      computedInputAttributes,\n      textareaProps: filterComponentProps(props, VaTextareaProps),\n      computedValue,\n\n      // Validations\n      computedError,\n      computedErrorMessages,\n      isFocused,\n\n      // Icon\n      canBeCleared,\n      clearIconProps,\n\n      fieldListeners: createFieldListeners(emit),\n      reset,\n      filterSlots,\n\n      // while we have problem with 'withConfigTransport'\n      // focus,\n      // blur,\n    }\n  },\n\n  // we will use this while we have problem with 'withConfigTransport'\n  methods: {\n    focus () { this.input?.focus() },\n    blur () { this.input?.blur() },\n  },\n})\n</script>\n","<template>\n  <VaInputWrapper\n    v-bind=\"fieldListeners\"\n    :class=\"$attrs.class\"\n    :style=\"$attrs.style\"\n    :color=\"color\"\n    :readonly=\"readonly\"\n    :disabled=\"disabled\"\n    :success=\"success\"\n    :messages=\"messages\"\n    :error=\"computedError\"\n    :error-messages=\"computedErrorMessages\"\n    :error-count=\"errorCount\"\n    :label=\"label\"\n    :bordered=\"bordered\"\n    :outline=\"outline\"\n    :focused=\"isFocused\"\n    :requiredMark=\"requiredMark\"\n    @click=\"input && input.focus()\"\n  >\n    <!-- Simply proxy slots to VaInputWrapper -->\n    <template\n      v-for=\"name in filterSlots\"\n      :key=\"name\"\n      v-slot:[name]=\"slotScope\"\n    >\n      <slot :name=\"name\" v-bind=\"slotScope\" />\n    </template>\n\n    <template #icon=\"slotScope\">\n      <va-icon\n        v-if=\"success\"\n        color=\"success\"\n        name=\"check_circle\"\n        size=\"small\"\n      />\n      <va-icon\n        v-if=\"computedError\"\n        color=\"danger\"\n        name=\"warning\"\n        size=\"small\"\n      />\n      <va-icon\n        v-if=\"canBeCleared\"\n        v-bind=\"clearIconProps\"\n        @click.stop=\"reset()\"\n      />\n      <va-icon\n        v-if=\"loading\"\n        :color=\"color\"\n        size=\"small\"\n        name=\"loop\"\n        spin=\"counter-clockwise\"\n      />\n      <slot name=\"icon\" v-bind=\"slotScope\" />\n    </template>\n\n    <VaTextarea\n      v-if=\"type === 'textarea' && !$slots.content\"\n      ref=\"input\"\n      v-bind=\"{ ...computedChildAttributes, ...textareaProps, ...inputEvents }\"\n      class=\"va-input__content__input\"\n    />\n\n    <input\n      v-else-if=\"!$slots.content\"\n      ref=\"input\"\n      class=\"va-input__content__input\"\n      v-bind=\"{ ...computedInputAttributes, ...inputEvents }\"\n      :value=\"computedValue\"\n    >\n  </VaInputWrapper>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, InputHTMLAttributes, PropType, ref, toRefs } from 'vue'\nimport { useFormProps } from '../../composables/useForm'\nimport { useValidation, useValidationProps, useValidationEmits } from '../../composables/useValidation'\nimport { useCleave, useCleaveProps } from './hooks/useCleave'\nimport { useFocus } from '../../composables/useFocus'\nimport { useEmitProxy } from '../../composables/useEmitProxy'\nimport VaInputWrapper from './components/VaInputWrapper.vue'\nimport { useClearableProps, useClearable, useClearableEmits } from '../../composables/useClearable'\nimport VaTextarea from './components/VaTextarea/VaTextarea.vue'\nimport VaIcon from '../va-icon/VaIcon.vue'\nimport { extractComponentProps, filterComponentProps } from '../../utils/child-props'\nimport omit from 'lodash/omit.js'\nimport pick from 'lodash/pick.js'\n\nconst VaTextareaProps = extractComponentProps(VaTextarea)\n\nconst { createEmits: createInputEmits, createListeners: createInputListeners } = useEmitProxy(\n  ['change', 'keyup', 'keypress', 'keydown', 'focus', 'blur'],\n)\n\nconst { createEmits: createFieldEmits, createListeners: createFieldListeners } = useEmitProxy([\n  'click',\n  'click-prepend',\n  'click-append',\n  'click-prepend-inner',\n  'click-append-inner',\n  'click-icon',\n])\n\nexport default defineComponent({\n  name: 'VaInput',\n\n  components: { VaInputWrapper, VaTextarea, VaIcon },\n\n  props: {\n    ...useFormProps,\n    ...useValidationProps,\n    ...useClearableProps,\n    ...useCleaveProps,\n    ...VaTextareaProps,\n\n    // input\n    placeholder: { type: String, default: '' },\n    tabindex: { type: Number, default: 0 },\n    modelValue: { type: [String, Number], default: '' },\n    label: { type: String, default: '' },\n    type: { type: String as PropType<'text' | 'textarea'>, default: 'text' },\n    loading: { type: Boolean, default: false },\n    inputClass: { type: String, default: '' },\n    pattern: { type: String },\n    inputmode: { type: String, default: 'text' },\n\n    // style\n    color: { type: String, default: 'primary' },\n    outline: { type: Boolean, default: false },\n    bordered: { type: Boolean, default: false },\n    requiredMark: { type: Boolean, default: false },\n  },\n\n  emits: [\n    'update:modelValue',\n    ...useValidationEmits,\n    ...useClearableEmits,\n    ...createInputEmits(),\n    ...createFieldEmits(),\n  ],\n\n  inheritAttrs: false,\n\n  setup (props, { emit, attrs, slots }) {\n    const input = ref<HTMLInputElement | typeof VaTextarea | undefined>()\n\n    const { isFocused, onFocus: onFocusListener, onBlur: onBlurListener } = useFocus()\n\n    const reset = () => {\n      emit('update:modelValue', props.clearValue)\n      emit('clear')\n    }\n\n    const focus = () => {\n      input.value?.focus()\n    }\n\n    const blur = () => {\n      input.value?.blur()\n    }\n\n    const filterSlots = computed(() => {\n      const iconSlot = ['icon']\n      return Object.keys(slots).filter(slot => !iconSlot.includes(slot))\n    })\n\n    const {\n      computedError,\n      computedErrorMessages,\n      listeners: validationListeners,\n    } = useValidation(props, emit, reset, focus)\n\n    const { modelValue } = toRefs(props)\n    const {\n      canBeCleared,\n      clearIconProps,\n    } = useClearable(props, modelValue, emit, input, computedError)\n\n    /** Use cleave only if this component is input, because it will break. */\n    const computedCleaveTarget = computed(() => {\n      return props.type === 'textarea'\n        ? undefined\n        : input.value as HTMLInputElement | undefined\n    })\n    const { computedValue, onInput } = useCleave(computedCleaveTarget, props, emit)\n\n    const inputListeners = createInputListeners(emit)\n\n    /** Combine EmitProxy events with validation events to avoid events overriding */\n    const onFocus = (e: Event) => {\n      inputListeners.onFocus(e)\n      validationListeners.onFocus()\n      onFocusListener()\n    }\n\n    const onBlur = (e: Event) => {\n      inputListeners.onBlur(e)\n      validationListeners.onBlur()\n      onBlurListener()\n    }\n\n    const inputEvents = {\n      ...inputListeners,\n      onFocus,\n      onBlur,\n      onInput,\n    }\n\n    const computedChildAttributes = computed(() => ({\n      ariaLabel: props.label,\n      class: props.inputClass,\n      ...omit(attrs, ['class', 'style']),\n    }) as InputHTMLAttributes)\n\n    const computedInputAttributes = computed(() => ({\n      ...computedChildAttributes.value,\n      ...pick(props, ['type', 'tabindex', 'disabled', 'readonly', 'placeholder', 'pattern', 'inputmode']),\n    }) as InputHTMLAttributes)\n\n    return {\n      input,\n      inputEvents,\n\n      computedChildAttributes,\n      computedInputAttributes,\n      textareaProps: filterComponentProps(props, VaTextareaProps),\n      computedValue,\n\n      // Validations\n      computedError,\n      computedErrorMessages,\n      isFocused,\n\n      // Icon\n      canBeCleared,\n      clearIconProps,\n\n      fieldListeners: createFieldListeners(emit),\n      reset,\n      filterSlots,\n\n      // while we have problem with 'withConfigTransport'\n      // focus,\n      // blur,\n    }\n  },\n\n  // we will use this while we have problem with 'withConfigTransport'\n  methods: {\n    focus () { this.input?.focus() },\n    blur () { this.input?.blur() },\n  },\n})\n</script>\n"],"names":["DEFAULT_MASK_TOKENS","creditCard","date","datePattern","time","timePattern","timeFormat","numeral","numeralThousandsGroupStyle","useCleaveProps","mask","type","String","Object","default","returnRaw","Boolean","modelValue","useCleave","element","props","emit","cleave","ref","destroyCleave","value","destroy","initCleave","Cleave","onMounted","onBeforeUnmount","watch","computedValue","computed","getRawValue","getFormattedValue","onInput","event","target","keys","length","setRawValue","useClearableProps","clearable","clearableIcon","clearValue","useClearableEmits","useClearable","inputValue","el","hasError","isFocused","onFocus","onBlur","useFocus","clearedValues","undefined","canBeCleared","disabled","readonly","includes","clearIconColor","color","success","clearIconProps","name","size","SIZING_STYLE","getNodeHeightStyles","node","style","window","getComputedStyle","boxSizing","getPropertyValue","padding","parseFloat","border","styles","map","join","lineHeight","parseInt","textarea","createHiddenTextarea","original","document","createElement","setAttribute","placeholder","wrap","getAttribute","removeAttribute","positiveNumberValidator","val","Error","createEmits","createListeners","useEmitProxy","defineComponent","useFormProps","Number","autosize","minRows","validator","maxRows","emits","setup","rowHeight","height","calculateRowHeight","calculateHeight","hiddenTextarea","body","appendChild","scrollHeight","removeChild","useTextareaRowHeight","isResizable","updateHeight","nextTick","computedStyle","minHeight","maxHeight","resize","computedProps","pick","listeners","methods","focus","this","blur","_createElementBlock","_mergeProps","class","_ctx","VaTextareaProps","extractComponentProps","VaTextarea","createInputEmits","createInputListeners","createFieldEmits","createFieldListeners","components","VaInputWrapper","VaIcon","useValidationProps","tabindex","label","loading","inputClass","pattern","inputmode","outline","bordered","requiredMark","useValidationEmits","inheritAttrs","attrs","slots","input","onFocusListener","onBlurListener","reset","filterSlots","iconSlot","filter","slot","computedError","computedErrorMessages","validationListeners","useValidation","toRefs","computedCleaveTarget","inputListeners","inputEvents","e","computedChildAttributes","ariaLabel","omit","computedInputAttributes","textareaProps","filterComponentProps","fieldListeners","_createBlock","messages","error","focused","onClick","icon","spin","_renderSlot","slotScope","content"],"mappings":"msBAIA,MAAMA,EAA+D,CACnEC,WAAY,CACVA,YAAY,GAEdC,KAAM,CACJA,MAAM,EACNC,YAAa,CAAC,IAAK,IAAK,MAE1BC,KAAM,CACJA,MAAM,EACNC,YAAa,CAAC,IAAK,KACnBC,WAAY,MAEdC,QAAS,CACPA,SAAS,EACTC,2BAA4B,aAInBC,EAAiB,CAC5BC,KAAM,CAAEC,KAAM,CAACC,OAAQC,QAASC,QAAS,IACzCC,UAAW,CAAEJ,KAAMK,QAASF,SAAS,GACrCG,WAAY,CAAEN,KAAMC,SASTM,UAAY,CACvBC,EACAC,EACAC,KAEA,MAAMC,EAASC,IASTC,cAAgB,KAChBF,EAAOG,OAASH,EAAOG,MAAMC,WAG7BC,WAAa,KAXH,IAACjB,GAYfc,gBAEKL,EAAQM,SAEbH,EAAOG,MAAQ,IAAIG,EAAOT,EAAQM,MAfd,iBADLf,EAgBkCU,EAAMV,MAd9CV,EAAoBU,GAAQ,IAAKV,EAAoBU,IAAU,GAEjE,IAAKA,MAedmB,GAAU,KAAQF,gBAClBG,GAAgB,KAAQN,mBAExBO,GAAM,IAAM,CAACZ,EAAQM,MAAOL,EAAMV,QAAO,KAAQiB,gBAEjD,MAAMK,EAAgBC,GAA0B,IAC1CX,EAAOG,OACLL,EAAML,WAAaK,EAAMH,aAAeK,EAAOG,MAAMS,cAChDZ,EAAOG,MAAMU,oBAIjBf,EAAMH,aAsBf,MAAO,CACLK,OAAAA,EACAU,cAAAA,EACAI,QAtBeC,IACf,MAAMZ,EAASY,EAAMC,OAA4Bb,OAE9B,WAAfL,EAAMV,MAAsBG,OAAO0B,KAAKnB,EAAMV,MAAM8B,SAKpDlB,EAAOG,QACTH,EAAOG,MAAMgB,YAAYhB,GACrBL,EAAML,WACRM,EAAK,oBAAqBC,EAAOG,MAAMS,eAPzCb,EAAK,oBAAqBI,MCnEnBiB,EAAoB,CAC/BC,UAAW,CAAEhC,KAAMK,QAASF,SAAS,GACrC8B,cAAe,CAAEjC,KAAMC,OAAQE,QAAS,iBACxC+B,WAAY,CAAElC,KAAMC,OAAQE,QAAS,KAG1BgC,EAAoB,CAAC,SAErBC,aAAe,CAC1B3B,EACA4B,EACA3B,EACA4B,EACAC,KAEA,MAAMC,UAAEA,EAASC,QAAEA,EAAOC,OAAEA,GAAWC,EAASL,EAAI5B,GAE9CkC,EAAgB,CAAC,UAAMC,EAAWpC,EAAMyB,YAExCY,EAAexB,GAAS,IAC5Bb,EAAMuB,YACLvB,EAAMsC,WACNtC,EAAMuC,WACNJ,EAAcK,SAASZ,EAAWvB,SAG/BoC,EAAiB5B,GAAS,KAC1BkB,MAAAA,SAAAA,EAAW1B,OAAgBL,EAAM0C,OAAS,WAC1CZ,MAAAA,SAAAA,EAAUzB,OAAgB,SAC1BL,EAAM2C,QAAkB,UAErB,SAGHC,EAAiB/B,GAAS,MAC9BgC,KAAM7C,EAAMwB,cACZkB,MAAOD,EAAepC,MACtByC,KAAM,YAGR,MAAO,CACLT,aAAAA,EACAI,eAAAA,EACAG,eAAAA,EACAZ,QAAAA,EACAC,OAAAA,IC5CEc,EAAe,CACnB,iBACA,cACA,cACA,iBACA,cACA,cACA,YACA,iBACA,iBACA,QACA,cACA,eACA,gBACA,eACA,cAGIC,oBAAuBC,IAC3B,MAAMC,EAAQC,OAAOC,iBAAiBH,GAEtC,MAAO,CACLI,UACEH,EAAMI,iBAAiB,eACvBJ,EAAMI,iBAAiB,oBACvBJ,EAAMI,iBAAiB,sBACzBC,QACEC,WAAWN,EAAMI,iBAAiB,mBAClCE,WAAWN,EAAMI,iBAAiB,gBACpCG,OACED,WAAWN,EAAMI,iBAAiB,wBAClCE,WAAWN,EAAMI,iBAAiB,qBACpCI,OACEX,EAAaY,KAAId,GAAQ,GAAGA,KAAQK,EAAMI,iBAAiBT,OAASe,KAAK,KAAO,IAClFC,WACEC,SAASZ,EAAMI,iBAAiB,kBAItC,IAAIS,EAAuC,KAE3C,MAAMC,qBAAuB,CAACC,EAA+BP,KACtDK,IACHA,EAAWG,SAASC,cAAc,aAGpCJ,EAASK,aAAa,QAASV,EA1DH,oQA2D5BK,EAAS1D,MAAQ4D,EAAS5D,OAAS4D,EAASI,aAAe,GAC3D,MAAMC,EAAOL,EAASM,aAAa,QAQnC,OANa,OAATD,EACFP,EAASK,aAAa,OAAQE,GAE9BP,EAASS,gBAAgB,QAGpBT,GCrDHU,wBAA2BC,IAC/B,GAAIA,EAAM,IAAY,EAANA,KAAaA,EAC3B,OAAO,EAET,MAAM,IAAIC,MAAM,sEAAsED,mBAGlFE,YAAEA,EAAWC,gBAAEA,GAAoBC,EAAa,CACpD,QAAS,SAAU,QAAS,sBAG9B,MAAeC,EAAgB,CAC7BlC,KAAM,aAEN7C,MAAO,IACFgF,EACHnF,WAAY,CAAEN,KAAM,CAACC,OAAQyF,QAASvF,QAAS,IAC/C2E,YAAa,CAAE9E,KAAMC,QACrB0F,SAAU,CAAE3F,KAAMK,QAASF,SAAS,GACpCyF,QAAS,CACP5F,KAAM0F,OACNvF,QAAS,EACT0F,UAAWX,yBAGbY,QAAS,CACP9F,KAAM0F,OACNG,UAAWX,0BAIfa,MAAOV,IAEPW,MAAOvF,GAAOC,KAAEA,IACd,MAAM8D,EAAW5D,IACXqF,EAAYrF,GAAK,GACjBsF,EAAStF,GAAK,IACduF,mBAAEA,EAAkBC,gBAAEA,GDmBI,CAAC5B,IA0B5B,CACL2B,mBA1ByB,IACpB3B,EAAS1D,MAEP2C,oBAAoBe,EAAS1D,OAAOwD,WAFb,EA0B9B8B,gBArBsB,KACtB,IAAK5B,EAAS1D,MAAS,OAAO,EAE9B,MAAMgD,UAAEA,EAASE,QAAEA,EAAOE,OAAEA,EAAMC,OAAEA,GAAWV,oBAAoBe,EAAS1D,OACtEuF,EAAiB5B,qBAAqBD,EAAS1D,MAAOqD,GAC5DQ,SAAS2B,KAAKC,YAAYF,GAC1B,IAAIH,EAASG,EAAeG,aAU5B,MARkB,eAAd1C,EACFoC,GAAUhC,EACa,gBAAdJ,IACToC,GAAUlC,GAGZW,SAAS2B,KAAKG,YAAYJ,GAEnBH,KC1CyCQ,CAAqBlC,GAE/DmC,EAAcrF,GAAS,IACpBjB,SAASI,EAAMkF,UAAYlF,EAAMqF,SAA6B,IAAlBrF,EAAMmF,UAAkBpB,EAAS1D,SAShF8F,aAAe,KACfD,EAAY7F,QACdoF,EAAOpF,MAAQsF,MAInBlF,GAAU,KAXJyF,EAAY7F,QACdmF,EAAUnF,MAAQqF,KAYpBS,kBAGFxF,GAAM,IAAMX,EAAMH,aAAY,KAC5BuG,EAASD,iBAGX,MAAME,EAAgBxF,GAAS,MAC7ByF,UAAWd,EAAUnF,MAAQL,EAAMmF,QAAU,KAC7CoB,UAAWvG,EAAMqF,QAAWG,EAAUnF,MAAQL,EAAMqF,QAAU,UAAQjD,EACtEqD,OAAQA,EAAOpF,MAAQ,KACvBmG,OAAQN,EAAY7F,WAAQ+B,EAAY,WAGpCqE,EAAgB5F,GAAS,SAC1B6F,EAAK1G,EAAO,CAAC,WAAY,WAAY,oBAW1C,MAAO,CACL+D,SAAAA,EACAsC,cAAAA,EACAM,UAAW9B,EAAgB5E,GAC3BwG,cAAAA,IASJG,QAAS,CACPC,wBAAWC,KAAK/C,yBAAU8C,SAC1BE,uBAAUD,KAAK/C,yBAAUgD,gFClH3BC,aAAAC,GACE9G,IAAI,WACJ+G,MAAM,gBACOC,mBAAkBA,cAC9B9G,MAAO8G,aACPjE,MAAOiE,sGCmFZ,MAAMC,EAAkBC,EAAsBC,IAEtC1C,YAAa2C,EAAkB1C,gBAAiB2C,GAAyB1C,EAC/E,CAAC,SAAU,QAAS,WAAY,UAAW,QAAS,UAG9CF,YAAa6C,EAAkB5C,gBAAiB6C,GAAyB5C,EAAa,CAC5F,QACA,gBACA,eACA,sBACA,qBACA,eAGF,MAAeC,EAAgB,CAC7BlC,KAAM,UAEN8E,WAAY,gBAAEC,aAAgBN,SAAYO,GAE1C7H,MAAO,IACFgF,KACA8C,KACAxG,KACAjC,KACA+H,EAGH/C,YAAa,CAAE9E,KAAMC,OAAQE,QAAS,IACtCqI,SAAU,CAAExI,KAAM0F,OAAQvF,QAAS,GACnCG,WAAY,CAAEN,KAAM,CAACC,OAAQyF,QAASvF,QAAS,IAC/CsI,MAAO,CAAEzI,KAAMC,OAAQE,QAAS,IAChCH,KAAM,CAAEA,KAAMC,OAAyCE,QAAS,QAChEuI,QAAS,CAAE1I,KAAMK,QAASF,SAAS,GACnCwI,WAAY,CAAE3I,KAAMC,OAAQE,QAAS,IACrCyI,QAAS,CAAE5I,KAAMC,QACjB4I,UAAW,CAAE7I,KAAMC,OAAQE,QAAS,QAGpCgD,MAAO,CAAEnD,KAAMC,OAAQE,QAAS,WAChC2I,QAAS,CAAE9I,KAAMK,QAASF,SAAS,GACnC4I,SAAU,CAAE/I,KAAMK,QAASF,SAAS,GACpC6I,aAAc,CAAEhJ,KAAMK,QAASF,SAAS,IAG1C4F,MAAO,CACL,uBACGkD,KACA9G,KACA6F,OACAE,KAGLgB,cAAc,EAEdlD,MAAOvF,GAAOC,KAAEA,EAAIyI,MAAEA,EAAKC,MAAEA,IAC3B,MAAMC,EAAQzI,KAER4B,UAAEA,EAAWC,QAAS6G,EAAiB5G,OAAQ6G,GAAmB5G,IAElE6G,MAAQ,KACZ9I,EAAK,oBAAqBD,EAAMyB,YAChCxB,EAAK,UAWD+I,EAAcnI,GAAS,KAC3B,MAAMoI,EAAW,CAAC,QAClB,OAAOxJ,OAAO0B,KAAKwH,GAAOO,QAAOC,IAASF,EAASzG,SAAS2G,SAGxDC,cACJA,EAAaC,sBACbA,EACA1C,UAAW2C,GACTC,EAAcvJ,EAAOC,EAAM8I,OAjBjB,qBACZH,EAAMvI,sBAAOwG,YAkBThH,WAAEA,GAAe2J,EAAOxJ,IACxBqC,aACJA,EAAYO,eACZA,GACEjB,aAAa3B,EAAOH,EAAYI,EAAM2I,EAAOQ,GAG3CK,EAAuB5I,GAAS,IACd,aAAfb,EAAMT,UACT6C,EACAwG,EAAMvI,SAENO,cAAEA,EAAaI,QAAEA,GAAYlB,UAAU2J,EAAsBzJ,EAAOC,GAEpEyJ,EAAiBlC,EAAqBvH,GAetC0J,EAAc,IACfD,EACH1H,QAde4H,IACfF,EAAe1H,QAAQ4H,GACvBN,EAAoBtH,UACpB6G,KAYA5G,OATc2H,IACdF,EAAezH,OAAO2H,GACtBN,EAAoBrH,SACpB6G,KAOA9H,QAAAA,GAGI6I,EAA0BhJ,GAAS,MACvCiJ,UAAW9J,EAAMgI,MACjBd,MAAOlH,EAAMkI,cACV6B,EAAKrB,EAAO,CAAC,QAAS,cAGrBsB,EAA0BnJ,GAAS,SACpCgJ,EAAwBxJ,SACxBqG,EAAK1G,EAAO,CAAC,OAAQ,WAAY,WAAY,WAAY,cAAe,UAAW,kBAGxF,MAAO,CACL4I,MAAAA,EACAe,YAAAA,EAEAE,wBAAAA,EACAG,wBAAAA,EACAC,cAAeC,EAAqBlK,EAAOoH,GAC3CxG,cAAAA,EAGAwI,cAAAA,EACAC,sBAAAA,EACAtH,UAAAA,EAGAM,aAAAA,EACAO,eAAAA,EAEAuH,eAAgBzC,EAAqBzH,GACrC8I,MAAAA,MACAC,YAAAA,IASJpC,QAAS,CACPC,wBAAWC,KAAK8B,sBAAO/B,SACvBE,uBAAUD,KAAK8B,sBAAO7B,2IC1PxBqD,IAAAnD,oBAEGC,MAAOC,SAAOD,MACdhE,MAAOiE,SAAOjE,MACdR,MAAOyE,QACP5E,SAAU4E,WACV7E,SAAU6E,WACVxE,QAASwE,UACTkD,SAAUlD,WACVmD,MAAOnD,gBACP,iBAAgBA,wBAChB,cAAaA,aACba,MAAOb,QACPmB,SAAUnB,WACVkB,QAASlB,UACToD,QAASpD,YACToB,aAAcpB,eACdqD,uBAAOrD,SAASA,QAAMN,cAWZ4D,YAEDtD,EAAO,aADfiD,WAEE1H,MAAM,UACNG,KAAK,eACLC,KAAK,wBAGCqE,EAAa,mBADrBiD,WAEE1H,MAAM,SACNG,KAAK,UACLC,KAAK,wBAGCqE,EAAY,kBADpBiD,IAAAnD,UAEUE,kBACPqD,0BAAYrD,+CAGPA,EAAO,aADfiD,WAEG1H,MAAOyE,QACRrE,KAAK,QACLD,KAAK,OACL6H,KAAK,qDAEPC,sBAA0BC,mBAG5B,kBACQzD,QAAwBA,SAAO0D,QAOzB1D,SAAO0D,0BADrB7D,UAAAC,SAEE9G,IAAI,QACJ+G,MAAM,gCACOC,6BAA4BA,gBACxC9G,MAAO8G,mCAZViD,IAAAnD,SAEE9G,IAAI,aACSgH,6BAA4BA,mBAAkBA,gBAC3DD,MAAM,kDAvCSC,eAARtE,UAEAA,QAAQ+H,IAEfD,WAAa9H,MAAc+H"}