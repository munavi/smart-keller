{"version":3,"file":"VaConfig.mjs","sources":["../../src/components/va-config/VaConfig.ts"],"sourcesContent":["import { inject, provide, computed, toRefs, defineComponent, ComputedRef } from 'vue'\n\nimport { ComponentConfig } from '../../services/component-config/component-config'\n\n/**\n * We need another key to provide injected value.\n */\nexport const LocalConfigKey = Symbol('LocalConfigKey')\n\nexport const CONFIGS_DEFAULT = computed(() => [])\n\nexport function useLocalConfig (): ComputedRef<ComponentConfig[]> {\n  return inject(LocalConfigKey, CONFIGS_DEFAULT)\n}\n\nexport default defineComponent({\n  name: 'VaConfig',\n  props: {\n    components: { type: Object, default: () => ({}) },\n  },\n  setup (props) {\n    const { components } = toRefs(props)\n    const prevChain = useLocalConfig()\n    // We want it to be an array and not a merged object for optimization purposes\n    const nextChain = computed(() => [...prevChain.value, components.value])\n\n    provide(LocalConfigKey, nextChain)\n\n    return {}\n  },\n  render () {\n    return this.$slots.default ? this.$slots.default() : null\n  },\n})\n"],"names":["LocalConfigKey","Symbol","CONFIGS_DEFAULT","computed","useLocalConfig","inject","defineComponent","name","props","components","type","Object","default","setup","toRefs","prevChain","nextChain","value","provide","render","this","$slots"],"mappings":"yFAOO,MAAMA,EAAiBC,OAAO,kBAExBC,EAAkBC,GAAS,IAAM,cAE9BC,iBACd,OAAOC,EAAOL,EAAgBE,GAGhC,MAAeI,EAAgB,CAC7BC,KAAM,WACNC,MAAO,CACLC,WAAY,CAAEC,KAAMC,OAAQC,QAAS,WAEvCC,MAAOL,GACL,MAAMC,WAAEA,GAAeK,EAAON,GACxBO,EAAYX,iBAEZY,EAAYb,GAAS,IAAM,IAAIY,EAAUE,MAAOR,EAAWQ,SAIjE,OAFAC,EAAQlB,EAAgBgB,GAEjB,IAETG,SACE,OAAOC,KAAKC,OAAOT,QAAUQ,KAAKC,OAAOT,UAAY"}