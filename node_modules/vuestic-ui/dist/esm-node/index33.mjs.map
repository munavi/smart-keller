{"version":3,"file":"index33.mjs","sources":["../../src/components/va-modal/VaModal.vue","../../src/components/va-modal/VaModal.vue?vue&type=template&id=fb3de2a4&lang.js","../../src/components/va-modal/index.ts"],"sourcesContent":["<template>\n  <div\n    ref=\"rootElement\"\n    class=\"va-modal-entry\"\n    :class=\"$props.anchorClass\"\n  >\n    <div v-if=\"$slots.anchor\" class=\"va-modal__anchor\">\n      <slot name=\"anchor\" v-bind=\"{ show, hide, toggle }\" />\n    </div>\n\n    <teleport :to=\"attachElement\" :disabled=\"$props.disableAttachment\">\n      <modal-element\n        name=\"va-modal\"\n        :isTransition=\"!$props.withoutTransitions\"\n        appear\n        :duration=\"300\"\n        v-bind=\"$attrs\"\n      >\n        <div class=\"va-modal\" v-if=\"valueComputed\">\n          <div\n            v-if=\"$props.overlay\"\n            class=\"va-modal__overlay\"\n            :style=\"computedOverlayStyles\"\n            @click=\"onOutsideClick\"\n          />\n          <div\n            class=\"va-modal__container\"\n            :style=\"computedModalContainerStyle\"\n            @beforeEnter=\"onBeforeEnterTransition\"\n            @afterEnter=\"onAfterEnterTransition\"\n            @beforeLeave=\"onBeforeLeaveTransition\"\n            @afterLeave=\"onAfterLeaveTransition\"\n          >\n            <div\n              class=\"va-modal__dialog\"\n              :class=\"computedClass\"\n              :style=\"computedDialogStyle\"\n            >\n              <va-icon\n                v-if=\"$props.fullscreen\"\n                @click=\"cancel\"\n                name=\"close\"\n                class=\"va-modal__close\"\n              />\n\n              <div\n                class=\"va-modal__inner\"\n                :style=\"{ maxWidth: $props.maxWidth, maxHeight: $props.maxHeight }\"\n              >\n                <div\n                  v-if=\"title\"\n                  class=\"va-modal__title\"\n                  :style=\"{ color: getColor('primary') }\"\n                >\n                  {{ $props.title }}\n                </div>\n                <div\n                  v-if=\"$slots.header\"\n                  class=\"va-modal__header\"\n                >\n                  <slot name=\"header\" />\n                </div>\n                <div\n                  v-if=\"$props.message\"\n                  class=\"va-modal__message\"\n                >\n                  {{ $props.message }}\n                </div>\n                <div\n                  v-if=\"$slots.default\"\n                  class=\"va-modal__message\"\n                >\n                  <slot />\n                </div>\n                <div\n                  v-if=\"($props.cancelText || $props.okText) && !$props.hideDefaultActions\"\n                  class=\"va-modal__footer\"\n                >\n                  <va-button\n                    v-if=\"$props.cancelText\"\n                    color=\"gray\"\n                    class=\"mr-2\"\n                    flat\n                    @click=\"cancel\"\n                  >\n                    {{ $props.cancelText }}\n                  </va-button>\n                  <va-button @click=\"ok\">\n                    {{ $props.okText }}\n                  </va-button>\n                </div>\n                <div\n                  v-if=\"$slots.footer\"\n                  class=\"va-modal__footer\"\n                >\n                  <slot name=\"footer\" />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </modal-element>\n    </teleport>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { watch, h, Transition, defineComponent, PropType, computed, StyleValue, ref } from 'vue'\n\nimport { useStateful, useStatefulProps, useStatefulEmits } from '../../composables/useStateful'\nimport { useColors } from '../../composables/useColor'\nimport { useTextColor } from '../../composables/useTextColor'\nimport VaButton from '../va-button'\nimport VaIcon from '../va-icon'\n\nconst ModalElement = defineComponent({\n  name: 'ModalElement',\n  inheritAttrs: false,\n  props: {\n    isTransition: { type: Boolean as PropType<boolean>, default: true },\n  },\n  setup: (props, { slots, attrs }) => () => props.isTransition\n    ? h(Transition, { ...attrs }, slots)\n    : slots.default?.(attrs),\n})\n\nexport default defineComponent({\n  name: 'VaModal',\n  inheritAttrs: false,\n  components: { VaButton, VaIcon, ModalElement },\n  emits: [\n    ...useStatefulEmits,\n    'cancel', 'ok', 'before-open', 'open', 'before-close', 'close', 'click-outside',\n  ],\n  props: {\n    ...useStatefulProps,\n    modelValue: { type: Boolean as PropType<boolean>, default: false },\n    attachElement: { type: String as PropType<string>, default: 'body' },\n    disableAttachment: { type: Boolean as PropType<boolean>, default: false },\n    title: { type: String as PropType<string>, default: '' },\n    message: { type: String as PropType<string>, default: '' },\n    okText: { type: String as PropType<string>, default: 'OK' },\n    cancelText: { type: String as PropType<string>, default: 'Cancel' },\n    hideDefaultActions: { type: Boolean as PropType<boolean>, default: false },\n    fullscreen: { type: Boolean as PropType<boolean>, default: false },\n    mobileFullscreen: { type: Boolean as PropType<boolean>, default: true },\n    noDismiss: { type: Boolean as PropType<boolean>, default: false },\n    noOutsideDismiss: { type: Boolean as PropType<boolean>, default: false },\n    noEscDismiss: { type: Boolean as PropType<boolean>, default: false },\n    maxWidth: { type: String as PropType<string>, default: '' },\n    maxHeight: { type: String as PropType<string>, default: '' },\n    anchorClass: { type: String as PropType<string> },\n    size: {\n      type: String as PropType<'medium' | 'small' | 'large'>,\n      default: 'medium',\n      validator: (size: string) => ['medium', 'small', 'large'].includes(size),\n    },\n    fixedLayout: { type: Boolean as PropType<boolean>, default: false },\n    withoutTransitions: { type: Boolean as PropType<boolean>, default: false },\n    overlay: { type: Boolean as PropType<boolean>, default: true },\n    overlayOpacity: { type: [Number, String] as PropType<number | string>, default: 0.6 },\n    blur: { type: Boolean as PropType<boolean>, default: false },\n    zIndex: { type: [Number, String] as PropType<number | string | undefined>, default: undefined },\n    backgroundColor: { type: String, default: 'white' },\n  },\n  setup (props, { emit }) {\n    const { getColor } = useColors()\n    const { textColorComputed } = useTextColor(props.backgroundColor)\n    const rootElement = ref<HTMLElement>()\n    const modal = ref<{ $el: HTMLElement }>()\n    const { valueComputed } = useStateful(props, emit)\n\n    const computedClass = computed(() => ({\n      'va-modal--fullscreen': props.fullscreen,\n      'va-modal--mobile-fullscreen': props.mobileFullscreen,\n      'va-modal--fixed-layout': props.fixedLayout,\n      [`va-modal--size-${props.size}`]: props.size !== 'medium',\n    }))\n    const computedModalContainerStyle = computed(() => ({ 'z-index': props.zIndex } as StyleValue))\n    const computedDialogStyle = computed(() => ({\n      maxWidth: props.maxWidth,\n      maxHeight: props.maxHeight,\n      color: textColorComputed.value,\n      background: getColor(props.backgroundColor),\n    }))\n    const computedOverlayStyles = computed(() => {\n      // NOTE Not sure exactly what that does.\n      // Supposedly solves some case when background wasn't shown.\n      // As a side effect removes background from nested modals.\n\n      const moreThanOneModalIsOpen = !!document.querySelectorAll('.va-modal__overlay').length\n\n      if (!props.overlay || moreThanOneModalIsOpen) { return }\n\n      return {\n        'background-color': `rgba(0, 0, 0, ${props.overlayOpacity})`,\n        'z-index': props.zIndex && Number(props.zIndex) - 1,\n      } as StyleValue\n    })\n\n    const show = () => { valueComputed.value = true }\n    const hide = () => { valueComputed.value = false }\n    const toggle = () => { valueComputed.value = !valueComputed.value }\n    const cancel = () => { hide(); emit('cancel') }\n    const ok = () => { hide(); emit('ok') }\n\n    const onOutsideClick = () => {\n      if (props.noOutsideDismiss || props.noDismiss) { return }\n\n      emit('click-outside')\n      cancel()\n    }\n\n    const onBeforeEnterTransition = (el: HTMLElement) => emit('before-open', el)\n    const onAfterEnterTransition = (el: HTMLElement) => emit('open', el)\n    const onBeforeLeaveTransition = (el: HTMLElement) => emit('before-close', el)\n    const onAfterLeaveTransition = (el: HTMLElement) => emit('close', el)\n\n    const listenKeyUp = (e: KeyboardEvent & { modalsCounter?: number }) => {\n      e.modalsCounter = e.modalsCounter ? e.modalsCounter + 1 : 1\n      const modalNumber = e.modalsCounter\n      const isOnTop = () => e.modalsCounter === modalNumber\n\n      const hideModal = () => {\n        if (e.code === 'Escape' && !props.noEscDismiss && !props.noDismiss && isOnTop()) {\n          cancel()\n        }\n      }\n\n      setTimeout(hideModal)\n    }\n\n    watch(valueComputed, (value: boolean) => {\n      if (value) {\n        window.addEventListener('keyup', listenKeyUp)\n      } else {\n        window.removeEventListener('keyup', listenKeyUp)\n      }\n\n      if (props.blur) {\n        if (value) {\n          document.body.classList.add('va-modal-overlay-background--blurred')\n        } else {\n          document.body.classList.remove('va-modal-overlay-background--blurred')\n        }\n      }\n    })\n\n    const publicMethods = {\n      show,\n      hide,\n      toggle,\n      cancel,\n      ok,\n      onOutsideClick,\n      onBeforeEnterTransition,\n      onAfterEnterTransition,\n      onBeforeLeaveTransition,\n      onAfterLeaveTransition,\n      listenKeyUp,\n    }\n\n    return {\n      getColor,\n      rootElement,\n      modal,\n      valueComputed,\n      computedClass,\n      computedDialogStyle,\n      computedModalContainerStyle,\n      computedOverlayStyles,\n      ...publicMethods,\n    }\n  },\n\n  // we will use this while we have problem with 'withConfigTransport'\n  methods: {\n    show () { (this as any).rootElement?.show() },\n    hide () { (this as any).rootElement?.hide() },\n    toggle () { (this as any).rootElement?.toggle() },\n    cancel () { (this as any).rootElement?.cancel() },\n    ok () { (this as any).rootElement?.ok() },\n    onOutsideClick () { (this as any).rootElement?.onOutsideClick() },\n    onBeforeEnterTransition () { (this as any).rootElement?.onBeforeEnterTransition() },\n    onAfterEnterTransition () { (this as any).rootElement?.onAfterEnterTransition() },\n    onBeforeLeaveTransition () { (this as any).rootElement?.onBeforeLeaveTransition() },\n    onAfterLeaveTransition () { (this as any).rootElement?.onAfterLeaveTransition() },\n    listenKeyUp () { (this as any).rootElement?.listenKeyUp() },\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"../../styles/resources\";\n@import \"variables\";\n\n.va-modal-overlay-background--blurred > :not(div[class*=\"va-\"]) {\n  filter: blur(var(--va-modal-overlay-background-blur-radius));\n  position: absolute;\n  height: 100%;\n  width: 100%;\n}\n\n.va-modal {\n  position: var(--va-modal-position);\n  display: var(--va-modal-display);\n  align-items: var(--va-modal-align-items);\n  justify-content: var(--va-modal-justify-content);\n  width: var(--va-modal-width);\n  height: var(--va-modal-height);\n  top: var(--va-modal-top);\n  left: var(--va-modal-left);\n  overflow: var(--va-modal-overflow);\n  outline: var(--va-modal-outline);\n  z-index: var(--va-modal-z-index);\n  font-family: var(--va-font-family);\n\n  &__title {\n    margin-bottom: 1.5rem;\n\n    @include va-title();\n  }\n\n  &__container {\n    z-index: var(--va-modal-container-z-index);\n  }\n\n  &-enter-from &__container,\n  &-leave-to &__container {\n    opacity: 0;\n    transform: translateY(-30%);\n  }\n\n  &-enter-active &__container,\n  &-leave-active &__container {\n    transition: var(--va-modal-opacity-transition), var(--va-modal-transform-transition);\n  }\n\n  &__dialog {\n    min-height: var(--va-modal-dialog-min-height);\n    height: var(--va-modal-dialog-height);\n    border-radius: var(--va-modal-dialog-border-radius, var(--va-block-border-radius));\n    margin: var(--va-modal-dialog-margin);\n    box-shadow: var(--va-modal-dialog-box-shadow, var(--va-block-box-shadow));\n    max-width: var(--va-modal-dialog-max-width);\n    max-height: var(--va-modal-dialog-max-height);\n    position: var(--va-modal-dialog-position);\n    overflow: auto;\n  }\n\n  &__overlay {\n    position: var(--va-modal-overlay-position);\n    top: var(--va-modal-overlay-top);\n    left: var(--va-modal-overlay-left);\n    z-index: var(--va-modal-overlay-z-index);\n    width: var(--va-modal-overlay-width);\n    height: var(--va-modal-overlay-height);\n  }\n\n  &-enter-from &__overlay,\n  &-leave-to &__overlay {\n    opacity: 0;\n  }\n\n  &-enter-active &__overlay,\n  &-leave-active &_overlay {\n    transition: var(--va-modal-overlay-opacity-transition);\n  }\n\n  &--fullscreen {\n    min-width: 100vw !important;\n    min-height: 100vh !important;\n    border-radius: 0;\n    margin: 0;\n  }\n\n  &--mobile-fullscreen {\n    @media all and (max-width: map-get($grid-breakpoints, sm)) {\n      margin: 0 !important;\n      min-width: 100vw !important;\n      min-height: 100vh !important;\n      border-radius: 0;\n    }\n  }\n\n  &--size {\n    &-small {\n      max-width: map_get($grid-breakpoints, sm);\n\n      @media all and (max-width: map-get($grid-breakpoints, sm)) {\n        max-width: 100vw !important;\n      }\n\n      .va-modal__inner {\n        max-width: map_get($grid-breakpoints, sm);\n\n        @media all and (max-width: map-get($grid-breakpoints, sm)) {\n          max-width: 100vw !important;\n        }\n      }\n    }\n\n    &-large {\n      max-width: map-get($grid-breakpoints, lg);\n\n      .va-modal__inner {\n        max-width: map-get($grid-breakpoints, lg);\n      }\n    }\n  }\n\n  &--fixed-layout {\n    .va-modal__inner {\n      overflow: hidden;\n      padding: $modal-padding-top 0 $modal-padding-bottom;\n      max-height: calc(100vh - 2rem);\n\n      .va-modal__header,\n      .va-modal__footer,\n      .va-modal__title {\n        padding: 0 $modal-padding-right 0 $modal-padding-left;\n      }\n\n      .va-modal__message {\n        padding: 0 $modal-padding-right 0 $modal-padding-left;\n        overflow: auto;\n      }\n    }\n\n    .va-modal__dialog {\n      overflow: hidden;\n    }\n  }\n\n  &__message {\n    margin-bottom: 1.5rem;\n  }\n\n  &__inner {\n    overflow: visible;\n    display: flex;\n    position: relative;\n    flex-flow: column;\n    padding: $modal-padding-top $modal-padding-right $modal-padding-bottom $modal-padding-left;\n    max-width: map_get($grid-breakpoints, md);\n    margin: auto;\n\n    > div:last-of-type {\n      margin-bottom: 0 !important;\n    }\n  }\n\n  &__close {\n    position: absolute;\n    top: 1rem;\n    right: 1rem;\n    cursor: pointer;\n    font-size: 1.5rem !important;\n    font-style: normal !important;\n    color: $brand-secondary;\n    z-index: 1;\n  }\n\n  &__footer {\n    margin-top: auto;\n    min-height: fit-content;\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: center;\n\n    &:last-of-type {\n      margin-bottom: 0 !important;\n    }\n  }\n}\n</style>\n","<template>\n  <div\n    ref=\"rootElement\"\n    class=\"va-modal-entry\"\n    :class=\"$props.anchorClass\"\n  >\n    <div v-if=\"$slots.anchor\" class=\"va-modal__anchor\">\n      <slot name=\"anchor\" v-bind=\"{ show, hide, toggle }\" />\n    </div>\n\n    <teleport :to=\"attachElement\" :disabled=\"$props.disableAttachment\">\n      <modal-element\n        name=\"va-modal\"\n        :isTransition=\"!$props.withoutTransitions\"\n        appear\n        :duration=\"300\"\n        v-bind=\"$attrs\"\n      >\n        <div class=\"va-modal\" v-if=\"valueComputed\">\n          <div\n            v-if=\"$props.overlay\"\n            class=\"va-modal__overlay\"\n            :style=\"computedOverlayStyles\"\n            @click=\"onOutsideClick\"\n          />\n          <div\n            class=\"va-modal__container\"\n            :style=\"computedModalContainerStyle\"\n            @beforeEnter=\"onBeforeEnterTransition\"\n            @afterEnter=\"onAfterEnterTransition\"\n            @beforeLeave=\"onBeforeLeaveTransition\"\n            @afterLeave=\"onAfterLeaveTransition\"\n          >\n            <div\n              class=\"va-modal__dialog\"\n              :class=\"computedClass\"\n              :style=\"computedDialogStyle\"\n            >\n              <va-icon\n                v-if=\"$props.fullscreen\"\n                @click=\"cancel\"\n                name=\"close\"\n                class=\"va-modal__close\"\n              />\n\n              <div\n                class=\"va-modal__inner\"\n                :style=\"{ maxWidth: $props.maxWidth, maxHeight: $props.maxHeight }\"\n              >\n                <div\n                  v-if=\"title\"\n                  class=\"va-modal__title\"\n                  :style=\"{ color: getColor('primary') }\"\n                >\n                  {{ $props.title }}\n                </div>\n                <div\n                  v-if=\"$slots.header\"\n                  class=\"va-modal__header\"\n                >\n                  <slot name=\"header\" />\n                </div>\n                <div\n                  v-if=\"$props.message\"\n                  class=\"va-modal__message\"\n                >\n                  {{ $props.message }}\n                </div>\n                <div\n                  v-if=\"$slots.default\"\n                  class=\"va-modal__message\"\n                >\n                  <slot />\n                </div>\n                <div\n                  v-if=\"($props.cancelText || $props.okText) && !$props.hideDefaultActions\"\n                  class=\"va-modal__footer\"\n                >\n                  <va-button\n                    v-if=\"$props.cancelText\"\n                    color=\"gray\"\n                    class=\"mr-2\"\n                    flat\n                    @click=\"cancel\"\n                  >\n                    {{ $props.cancelText }}\n                  </va-button>\n                  <va-button @click=\"ok\">\n                    {{ $props.okText }}\n                  </va-button>\n                </div>\n                <div\n                  v-if=\"$slots.footer\"\n                  class=\"va-modal__footer\"\n                >\n                  <slot name=\"footer\" />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </modal-element>\n    </teleport>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { watch, h, Transition, defineComponent, PropType, computed, StyleValue, ref } from 'vue'\n\nimport { useStateful, useStatefulProps, useStatefulEmits } from '../../composables/useStateful'\nimport { useColors } from '../../composables/useColor'\nimport { useTextColor } from '../../composables/useTextColor'\nimport VaButton from '../va-button'\nimport VaIcon from '../va-icon'\n\nconst ModalElement = defineComponent({\n  name: 'ModalElement',\n  inheritAttrs: false,\n  props: {\n    isTransition: { type: Boolean as PropType<boolean>, default: true },\n  },\n  setup: (props, { slots, attrs }) => () => props.isTransition\n    ? h(Transition, { ...attrs }, slots)\n    : slots.default?.(attrs),\n})\n\nexport default defineComponent({\n  name: 'VaModal',\n  inheritAttrs: false,\n  components: { VaButton, VaIcon, ModalElement },\n  emits: [\n    ...useStatefulEmits,\n    'cancel', 'ok', 'before-open', 'open', 'before-close', 'close', 'click-outside',\n  ],\n  props: {\n    ...useStatefulProps,\n    modelValue: { type: Boolean as PropType<boolean>, default: false },\n    attachElement: { type: String as PropType<string>, default: 'body' },\n    disableAttachment: { type: Boolean as PropType<boolean>, default: false },\n    title: { type: String as PropType<string>, default: '' },\n    message: { type: String as PropType<string>, default: '' },\n    okText: { type: String as PropType<string>, default: 'OK' },\n    cancelText: { type: String as PropType<string>, default: 'Cancel' },\n    hideDefaultActions: { type: Boolean as PropType<boolean>, default: false },\n    fullscreen: { type: Boolean as PropType<boolean>, default: false },\n    mobileFullscreen: { type: Boolean as PropType<boolean>, default: true },\n    noDismiss: { type: Boolean as PropType<boolean>, default: false },\n    noOutsideDismiss: { type: Boolean as PropType<boolean>, default: false },\n    noEscDismiss: { type: Boolean as PropType<boolean>, default: false },\n    maxWidth: { type: String as PropType<string>, default: '' },\n    maxHeight: { type: String as PropType<string>, default: '' },\n    anchorClass: { type: String as PropType<string> },\n    size: {\n      type: String as PropType<'medium' | 'small' | 'large'>,\n      default: 'medium',\n      validator: (size: string) => ['medium', 'small', 'large'].includes(size),\n    },\n    fixedLayout: { type: Boolean as PropType<boolean>, default: false },\n    withoutTransitions: { type: Boolean as PropType<boolean>, default: false },\n    overlay: { type: Boolean as PropType<boolean>, default: true },\n    overlayOpacity: { type: [Number, String] as PropType<number | string>, default: 0.6 },\n    blur: { type: Boolean as PropType<boolean>, default: false },\n    zIndex: { type: [Number, String] as PropType<number | string | undefined>, default: undefined },\n    backgroundColor: { type: String, default: 'white' },\n  },\n  setup (props, { emit }) {\n    const { getColor } = useColors()\n    const { textColorComputed } = useTextColor(props.backgroundColor)\n    const rootElement = ref<HTMLElement>()\n    const modal = ref<{ $el: HTMLElement }>()\n    const { valueComputed } = useStateful(props, emit)\n\n    const computedClass = computed(() => ({\n      'va-modal--fullscreen': props.fullscreen,\n      'va-modal--mobile-fullscreen': props.mobileFullscreen,\n      'va-modal--fixed-layout': props.fixedLayout,\n      [`va-modal--size-${props.size}`]: props.size !== 'medium',\n    }))\n    const computedModalContainerStyle = computed(() => ({ 'z-index': props.zIndex } as StyleValue))\n    const computedDialogStyle = computed(() => ({\n      maxWidth: props.maxWidth,\n      maxHeight: props.maxHeight,\n      color: textColorComputed.value,\n      background: getColor(props.backgroundColor),\n    }))\n    const computedOverlayStyles = computed(() => {\n      // NOTE Not sure exactly what that does.\n      // Supposedly solves some case when background wasn't shown.\n      // As a side effect removes background from nested modals.\n\n      const moreThanOneModalIsOpen = !!document.querySelectorAll('.va-modal__overlay').length\n\n      if (!props.overlay || moreThanOneModalIsOpen) { return }\n\n      return {\n        'background-color': `rgba(0, 0, 0, ${props.overlayOpacity})`,\n        'z-index': props.zIndex && Number(props.zIndex) - 1,\n      } as StyleValue\n    })\n\n    const show = () => { valueComputed.value = true }\n    const hide = () => { valueComputed.value = false }\n    const toggle = () => { valueComputed.value = !valueComputed.value }\n    const cancel = () => { hide(); emit('cancel') }\n    const ok = () => { hide(); emit('ok') }\n\n    const onOutsideClick = () => {\n      if (props.noOutsideDismiss || props.noDismiss) { return }\n\n      emit('click-outside')\n      cancel()\n    }\n\n    const onBeforeEnterTransition = (el: HTMLElement) => emit('before-open', el)\n    const onAfterEnterTransition = (el: HTMLElement) => emit('open', el)\n    const onBeforeLeaveTransition = (el: HTMLElement) => emit('before-close', el)\n    const onAfterLeaveTransition = (el: HTMLElement) => emit('close', el)\n\n    const listenKeyUp = (e: KeyboardEvent & { modalsCounter?: number }) => {\n      e.modalsCounter = e.modalsCounter ? e.modalsCounter + 1 : 1\n      const modalNumber = e.modalsCounter\n      const isOnTop = () => e.modalsCounter === modalNumber\n\n      const hideModal = () => {\n        if (e.code === 'Escape' && !props.noEscDismiss && !props.noDismiss && isOnTop()) {\n          cancel()\n        }\n      }\n\n      setTimeout(hideModal)\n    }\n\n    watch(valueComputed, (value: boolean) => {\n      if (value) {\n        window.addEventListener('keyup', listenKeyUp)\n      } else {\n        window.removeEventListener('keyup', listenKeyUp)\n      }\n\n      if (props.blur) {\n        if (value) {\n          document.body.classList.add('va-modal-overlay-background--blurred')\n        } else {\n          document.body.classList.remove('va-modal-overlay-background--blurred')\n        }\n      }\n    })\n\n    const publicMethods = {\n      show,\n      hide,\n      toggle,\n      cancel,\n      ok,\n      onOutsideClick,\n      onBeforeEnterTransition,\n      onAfterEnterTransition,\n      onBeforeLeaveTransition,\n      onAfterLeaveTransition,\n      listenKeyUp,\n    }\n\n    return {\n      getColor,\n      rootElement,\n      modal,\n      valueComputed,\n      computedClass,\n      computedDialogStyle,\n      computedModalContainerStyle,\n      computedOverlayStyles,\n      ...publicMethods,\n    }\n  },\n\n  // we will use this while we have problem with 'withConfigTransport'\n  methods: {\n    show () { (this as any).rootElement?.show() },\n    hide () { (this as any).rootElement?.hide() },\n    toggle () { (this as any).rootElement?.toggle() },\n    cancel () { (this as any).rootElement?.cancel() },\n    ok () { (this as any).rootElement?.ok() },\n    onOutsideClick () { (this as any).rootElement?.onOutsideClick() },\n    onBeforeEnterTransition () { (this as any).rootElement?.onBeforeEnterTransition() },\n    onAfterEnterTransition () { (this as any).rootElement?.onAfterEnterTransition() },\n    onBeforeLeaveTransition () { (this as any).rootElement?.onBeforeLeaveTransition() },\n    onAfterLeaveTransition () { (this as any).rootElement?.onAfterLeaveTransition() },\n    listenKeyUp () { (this as any).rootElement?.listenKeyUp() },\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"../../styles/resources\";\n@import \"variables\";\n\n.va-modal-overlay-background--blurred > :not(div[class*=\"va-\"]) {\n  filter: blur(var(--va-modal-overlay-background-blur-radius));\n  position: absolute;\n  height: 100%;\n  width: 100%;\n}\n\n.va-modal {\n  position: var(--va-modal-position);\n  display: var(--va-modal-display);\n  align-items: var(--va-modal-align-items);\n  justify-content: var(--va-modal-justify-content);\n  width: var(--va-modal-width);\n  height: var(--va-modal-height);\n  top: var(--va-modal-top);\n  left: var(--va-modal-left);\n  overflow: var(--va-modal-overflow);\n  outline: var(--va-modal-outline);\n  z-index: var(--va-modal-z-index);\n  font-family: var(--va-font-family);\n\n  &__title {\n    margin-bottom: 1.5rem;\n\n    @include va-title();\n  }\n\n  &__container {\n    z-index: var(--va-modal-container-z-index);\n  }\n\n  &-enter-from &__container,\n  &-leave-to &__container {\n    opacity: 0;\n    transform: translateY(-30%);\n  }\n\n  &-enter-active &__container,\n  &-leave-active &__container {\n    transition: var(--va-modal-opacity-transition), var(--va-modal-transform-transition);\n  }\n\n  &__dialog {\n    min-height: var(--va-modal-dialog-min-height);\n    height: var(--va-modal-dialog-height);\n    border-radius: var(--va-modal-dialog-border-radius, var(--va-block-border-radius));\n    margin: var(--va-modal-dialog-margin);\n    box-shadow: var(--va-modal-dialog-box-shadow, var(--va-block-box-shadow));\n    max-width: var(--va-modal-dialog-max-width);\n    max-height: var(--va-modal-dialog-max-height);\n    position: var(--va-modal-dialog-position);\n    overflow: auto;\n  }\n\n  &__overlay {\n    position: var(--va-modal-overlay-position);\n    top: var(--va-modal-overlay-top);\n    left: var(--va-modal-overlay-left);\n    z-index: var(--va-modal-overlay-z-index);\n    width: var(--va-modal-overlay-width);\n    height: var(--va-modal-overlay-height);\n  }\n\n  &-enter-from &__overlay,\n  &-leave-to &__overlay {\n    opacity: 0;\n  }\n\n  &-enter-active &__overlay,\n  &-leave-active &_overlay {\n    transition: var(--va-modal-overlay-opacity-transition);\n  }\n\n  &--fullscreen {\n    min-width: 100vw !important;\n    min-height: 100vh !important;\n    border-radius: 0;\n    margin: 0;\n  }\n\n  &--mobile-fullscreen {\n    @media all and (max-width: map-get($grid-breakpoints, sm)) {\n      margin: 0 !important;\n      min-width: 100vw !important;\n      min-height: 100vh !important;\n      border-radius: 0;\n    }\n  }\n\n  &--size {\n    &-small {\n      max-width: map_get($grid-breakpoints, sm);\n\n      @media all and (max-width: map-get($grid-breakpoints, sm)) {\n        max-width: 100vw !important;\n      }\n\n      .va-modal__inner {\n        max-width: map_get($grid-breakpoints, sm);\n\n        @media all and (max-width: map-get($grid-breakpoints, sm)) {\n          max-width: 100vw !important;\n        }\n      }\n    }\n\n    &-large {\n      max-width: map-get($grid-breakpoints, lg);\n\n      .va-modal__inner {\n        max-width: map-get($grid-breakpoints, lg);\n      }\n    }\n  }\n\n  &--fixed-layout {\n    .va-modal__inner {\n      overflow: hidden;\n      padding: $modal-padding-top 0 $modal-padding-bottom;\n      max-height: calc(100vh - 2rem);\n\n      .va-modal__header,\n      .va-modal__footer,\n      .va-modal__title {\n        padding: 0 $modal-padding-right 0 $modal-padding-left;\n      }\n\n      .va-modal__message {\n        padding: 0 $modal-padding-right 0 $modal-padding-left;\n        overflow: auto;\n      }\n    }\n\n    .va-modal__dialog {\n      overflow: hidden;\n    }\n  }\n\n  &__message {\n    margin-bottom: 1.5rem;\n  }\n\n  &__inner {\n    overflow: visible;\n    display: flex;\n    position: relative;\n    flex-flow: column;\n    padding: $modal-padding-top $modal-padding-right $modal-padding-bottom $modal-padding-left;\n    max-width: map_get($grid-breakpoints, md);\n    margin: auto;\n\n    > div:last-of-type {\n      margin-bottom: 0 !important;\n    }\n  }\n\n  &__close {\n    position: absolute;\n    top: 1rem;\n    right: 1rem;\n    cursor: pointer;\n    font-size: 1.5rem !important;\n    font-style: normal !important;\n    color: $brand-secondary;\n    z-index: 1;\n  }\n\n  &__footer {\n    margin-top: auto;\n    min-height: fit-content;\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: center;\n\n    &:last-of-type {\n      margin-bottom: 0 !important;\n    }\n  }\n}\n</style>\n","import withConfigTransport from '../../services/config-transport/withConfigTransport'\nimport VaModal from './VaModal.vue'\n\nexport default withConfigTransport(VaModal)\n"],"names":["ModalElement","defineComponent","name","inheritAttrs","props","isTransition","type","Boolean","default","setup","slots","attrs","h","Transition","components","VaButton","VaIcon","emits","useStatefulEmits","useStatefulProps","modelValue","attachElement","String","disableAttachment","title","message","okText","cancelText","hideDefaultActions","fullscreen","mobileFullscreen","noDismiss","noOutsideDismiss","noEscDismiss","maxWidth","maxHeight","anchorClass","size","validator","includes","fixedLayout","withoutTransitions","overlay","overlayOpacity","Number","blur","zIndex","undefined","backgroundColor","emit","getColor","useColors","textColorComputed","useTextColor","rootElement","ref","modal","valueComputed","useStateful","computedClass","computed","computedModalContainerStyle","computedDialogStyle","color","value","background","computedOverlayStyles","moreThanOneModalIsOpen","document","querySelectorAll","length","hide","cancel","listenKeyUp","e","modalsCounter","modalNumber","setTimeout","code","watch","window","addEventListener","removeEventListener","body","classList","add","remove","publicMethods","show","toggle","ok","onOutsideClick","onBeforeEnterTransition","el","onAfterEnterTransition","onBeforeLeaveTransition","onAfterLeaveTransition","methods","this","class","_createElementBlock","_ctx","_hoisted_1","_renderSlot","_createBlock","to","disabled","_createVNode","_mergeProps","appear","duration","_hoisted_2","style","onClick","_createElementVNode","onBeforeEnter","onAfterEnter","onBeforeLeave","onAfterLeave","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","flat","_hoisted_7","withConfigTransport","VaModal"],"mappings":"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"}