{"version":3,"file":"index15.mjs","sources":["../../src/components/va-checkbox/VaCheckbox.vue","../../src/components/va-checkbox/VaCheckbox.vue?vue&type=template&id=828af530&lang.js","../../src/components/va-checkbox/index.ts"],"sourcesContent":["<template>\n  <VaMessageListWrapper\n    class=\"va-checkbox\"\n    :class=\"computedClass\"\n    :disabled=\"disabled\"\n    :success=\"success\"\n    :messages=\"messages\"\n    :error=\"computedError\"\n    :error-messages=\"computedErrorMessages\"\n    :error-count=\"errorCount\"\n  >\n    <div\n      class=\"va-checkbox__input-container\"\n      @click=\"toggleSelection\"\n      tabindex=\"-1\"\n      @blur=\"onBlur\"\n      ref=\"container\"\n    >\n      <div\n        class=\"va-checkbox__square\"\n        :style=\"inputStyle\"\n        @selectstart.prevent\n      >\n        <input\n          ref=\"input\"\n          type=\"checkbox\"\n          role=\"checkbox\"\n          readonly\n          :id=\"id\"\n          :name=\"name\"\n          v-on=\"keyboardFocusListeners\"\n          @focus=\"onFocus\"\n          @blur=\"onBlur\"\n          class=\"va-checkbox__input\"\n          @click.stop.prevent\n          @keypress.prevent=\"toggleSelection\"\n          :disabled=\"disabled\"\n          :indeterminate=\"indeterminate\"\n        >\n        <va-icon\n          class=\"va-checkbox__icon\"\n          :name=\"computedIconName\"\n          size=\"20px\"\n          :color=\"textColorComputed\"\n          v-show=\"isActive\"\n        />\n      </div>\n      <div\n        class=\"va-checkbox__label\"\n        :style=\"labelStyle\"\n        ref=\"label\"\n        tabindex=\"-1\"\n        @blur=\"onBlur\"\n      >\n        <slot name=\"label\">{{ label }}</slot>\n      </div>\n    </div>\n  </VaMessageListWrapper>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, computed, PropType, ref } from 'vue'\n\nimport { VaMessageListWrapper } from '../va-input'\nimport VaIcon from '../va-icon/'\n\nimport { useColors } from '../../composables/useColor'\nimport useKeyboardOnlyFocus from '../../composables/useKeyboardOnlyFocus'\nimport { useSelectable, useSelectableProps, useSelectableEmits } from '../../composables/useSelectable'\nimport { useTextColor } from '../../composables/useTextColor'\n\nconst vaCheckboxValueType = [Boolean, Array, String, Object] as PropType<boolean | null | string | number | Record<any, unknown> | unknown[]>\n\nexport default defineComponent({\n  name: 'VaCheckbox',\n  components: { VaMessageListWrapper, VaIcon },\n  emits: useSelectableEmits,\n  props: {\n    ...useSelectableProps,\n    modelValue: { type: vaCheckboxValueType, default: false },\n    color: { type: String as PropType<string>, default: 'primary' },\n    checkedIcon: { type: String as PropType<string>, default: 'check' },\n    indeterminate: { type: Boolean, default: false },\n    indeterminateValue: { type: vaCheckboxValueType, default: null },\n    indeterminateIcon: { type: String as PropType<string>, default: 'remove' },\n    id: { type: String as PropType<string>, default: '' },\n    name: { type: String as PropType<string>, default: '' },\n  },\n  setup (props, { emit }) {\n    const elements = {\n      container: ref(null),\n      input: ref(null),\n      label: ref(null),\n    }\n\n    const {\n      isChecked,\n      computedError,\n      isIndeterminate,\n      computedErrorMessages,\n      toggleSelection,\n      onBlur,\n      onFocus,\n    } = useSelectable(props, emit, elements)\n    const { getColor, getTextColor } = useColors()\n    const { hasKeyboardFocus, keyboardFocusListeners } = useKeyboardOnlyFocus()\n\n    const { textColorComputed } = useTextColor(props.color)\n\n    const isActive = computed(() => isChecked.value || isIndeterminate.value)\n\n    const computedClass = computed(() => ({\n      'va-checkbox--selected': isChecked.value,\n      'va-checkbox--readonly': props.readonly,\n      'va-checkbox--disabled': props.disabled,\n      'va-checkbox--indeterminate': props.indeterminate,\n      'va-checkbox--error': computedError.value,\n      'va-checkbox--left-label': props.leftLabel,\n      'va-checkbox--on-keyboard-focus': hasKeyboardFocus.value,\n    }))\n\n    const labelStyle = computed(() => {\n      return {\n        color: computedError.value ? getColor('danger') : '',\n        padding: !props.label\n          ? ''\n          : props.leftLabel\n            ? '0 0.5rem 0 0'\n            : '0 0 0 0.5rem',\n      }\n    })\n\n    const inputStyle = computed(() => {\n      const style = {\n        background: isActive.value ? getColor(props.color) : '',\n        borderColor: isActive.value ? getColor(props.color) : '',\n      }\n\n      if (computedError.value) {\n        style.borderColor = getColor('danger')\n      }\n\n      return style\n    })\n\n    const computedIconName = computed(() => props.indeterminate && isIndeterminate.value\n      ? props.indeterminateIcon\n      : props.checkedIcon,\n    )\n\n    return {\n      isActive,\n      computedClass,\n      labelStyle,\n      inputStyle,\n      computedIconName,\n      textColorComputed,\n      computedError,\n      computedErrorMessages,\n      keyboardFocusListeners,\n      toggleSelection,\n      onBlur,\n      onFocus,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"../../styles/resources\";\n@import \"variables\";\n\n.va-checkbox {\n  display: var(--va-checkbox-display);\n  max-width: var(--va-checkbox-max-width);\n  font-family: var(--va-font-family);\n\n  &__input-container {\n    align-items: var(--va-checkbox-input-align-items);\n    display: var(--va-checkbox-input-display);\n    padding: var(--va-checkbox-input-padding);\n    cursor: var(--va-checkbox-input-cursor);\n\n    @at-root {\n      .va-checkbox--disabled & {\n        @include va-disabled();\n\n        cursor: var(--va-checkbox-disabled-cursor);\n      }\n\n      .va-checkbox--readonly & {\n        cursor: var(--va-checkbox-readonly-cursor);\n      }\n\n      .va-checkbox--left-label & {\n        flex-direction: row-reverse;\n      }\n    }\n  }\n\n  #{&}__square {\n    @include flex-center();\n\n    width: var(--va-checkbox-square-width);\n    min-width: var(--va-checkbox-square-min-width);\n    height: var(--va-checkbox-square-height);\n    position: var(--va-checkbox-square-position);\n    background-color: var(--va-checkbox-square-background-color, var(--va-background-color));\n    border: var(--va-checkbox-square-border, var(--va-control-border));\n    border-radius: var(--va-checkbox-square-border-radius, var(--va-square-border-radius));\n\n    @at-root {\n      .va-checkbox--on-keyboard-focus#{&} {\n        transition: all, 0.6s, ease-in;\n        box-shadow: 0 0 0.5rem 0 rgba(0, 0, 0, 0.3);\n      }\n    }\n  }\n\n  &__input {\n    opacity: 0;\n    width: 0;\n    height: 0 !important;\n  }\n\n  &__label {\n    display: var(--va-checkbox-label-display);\n    position: var(--va-checkbox-label-position);\n  }\n\n  &__icon {\n    pointer-events: var(--va-checkbox-icon-pointer-events);\n    position: var(--va-checkbox-icon-position);\n  }\n\n  &--selected {\n    .va-checkbox {\n      &__icon {\n        color: var(--va-checkbox-selected-icon-color);\n      }\n    }\n  }\n\n  &--indeterminate {\n    .va-checkbox {\n      &__icon {\n        color: var(--va-checkbox-indeterminate-icon-color);\n      }\n    }\n  }\n}\n</style>\n","<template>\n  <VaMessageListWrapper\n    class=\"va-checkbox\"\n    :class=\"computedClass\"\n    :disabled=\"disabled\"\n    :success=\"success\"\n    :messages=\"messages\"\n    :error=\"computedError\"\n    :error-messages=\"computedErrorMessages\"\n    :error-count=\"errorCount\"\n  >\n    <div\n      class=\"va-checkbox__input-container\"\n      @click=\"toggleSelection\"\n      tabindex=\"-1\"\n      @blur=\"onBlur\"\n      ref=\"container\"\n    >\n      <div\n        class=\"va-checkbox__square\"\n        :style=\"inputStyle\"\n        @selectstart.prevent\n      >\n        <input\n          ref=\"input\"\n          type=\"checkbox\"\n          role=\"checkbox\"\n          readonly\n          :id=\"id\"\n          :name=\"name\"\n          v-on=\"keyboardFocusListeners\"\n          @focus=\"onFocus\"\n          @blur=\"onBlur\"\n          class=\"va-checkbox__input\"\n          @click.stop.prevent\n          @keypress.prevent=\"toggleSelection\"\n          :disabled=\"disabled\"\n          :indeterminate=\"indeterminate\"\n        >\n        <va-icon\n          class=\"va-checkbox__icon\"\n          :name=\"computedIconName\"\n          size=\"20px\"\n          :color=\"textColorComputed\"\n          v-show=\"isActive\"\n        />\n      </div>\n      <div\n        class=\"va-checkbox__label\"\n        :style=\"labelStyle\"\n        ref=\"label\"\n        tabindex=\"-1\"\n        @blur=\"onBlur\"\n      >\n        <slot name=\"label\">{{ label }}</slot>\n      </div>\n    </div>\n  </VaMessageListWrapper>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, computed, PropType, ref } from 'vue'\n\nimport { VaMessageListWrapper } from '../va-input'\nimport VaIcon from '../va-icon/'\n\nimport { useColors } from '../../composables/useColor'\nimport useKeyboardOnlyFocus from '../../composables/useKeyboardOnlyFocus'\nimport { useSelectable, useSelectableProps, useSelectableEmits } from '../../composables/useSelectable'\nimport { useTextColor } from '../../composables/useTextColor'\n\nconst vaCheckboxValueType = [Boolean, Array, String, Object] as PropType<boolean | null | string | number | Record<any, unknown> | unknown[]>\n\nexport default defineComponent({\n  name: 'VaCheckbox',\n  components: { VaMessageListWrapper, VaIcon },\n  emits: useSelectableEmits,\n  props: {\n    ...useSelectableProps,\n    modelValue: { type: vaCheckboxValueType, default: false },\n    color: { type: String as PropType<string>, default: 'primary' },\n    checkedIcon: { type: String as PropType<string>, default: 'check' },\n    indeterminate: { type: Boolean, default: false },\n    indeterminateValue: { type: vaCheckboxValueType, default: null },\n    indeterminateIcon: { type: String as PropType<string>, default: 'remove' },\n    id: { type: String as PropType<string>, default: '' },\n    name: { type: String as PropType<string>, default: '' },\n  },\n  setup (props, { emit }) {\n    const elements = {\n      container: ref(null),\n      input: ref(null),\n      label: ref(null),\n    }\n\n    const {\n      isChecked,\n      computedError,\n      isIndeterminate,\n      computedErrorMessages,\n      toggleSelection,\n      onBlur,\n      onFocus,\n    } = useSelectable(props, emit, elements)\n    const { getColor, getTextColor } = useColors()\n    const { hasKeyboardFocus, keyboardFocusListeners } = useKeyboardOnlyFocus()\n\n    const { textColorComputed } = useTextColor(props.color)\n\n    const isActive = computed(() => isChecked.value || isIndeterminate.value)\n\n    const computedClass = computed(() => ({\n      'va-checkbox--selected': isChecked.value,\n      'va-checkbox--readonly': props.readonly,\n      'va-checkbox--disabled': props.disabled,\n      'va-checkbox--indeterminate': props.indeterminate,\n      'va-checkbox--error': computedError.value,\n      'va-checkbox--left-label': props.leftLabel,\n      'va-checkbox--on-keyboard-focus': hasKeyboardFocus.value,\n    }))\n\n    const labelStyle = computed(() => {\n      return {\n        color: computedError.value ? getColor('danger') : '',\n        padding: !props.label\n          ? ''\n          : props.leftLabel\n            ? '0 0.5rem 0 0'\n            : '0 0 0 0.5rem',\n      }\n    })\n\n    const inputStyle = computed(() => {\n      const style = {\n        background: isActive.value ? getColor(props.color) : '',\n        borderColor: isActive.value ? getColor(props.color) : '',\n      }\n\n      if (computedError.value) {\n        style.borderColor = getColor('danger')\n      }\n\n      return style\n    })\n\n    const computedIconName = computed(() => props.indeterminate && isIndeterminate.value\n      ? props.indeterminateIcon\n      : props.checkedIcon,\n    )\n\n    return {\n      isActive,\n      computedClass,\n      labelStyle,\n      inputStyle,\n      computedIconName,\n      textColorComputed,\n      computedError,\n      computedErrorMessages,\n      keyboardFocusListeners,\n      toggleSelection,\n      onBlur,\n      onFocus,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"../../styles/resources\";\n@import \"variables\";\n\n.va-checkbox {\n  display: var(--va-checkbox-display);\n  max-width: var(--va-checkbox-max-width);\n  font-family: var(--va-font-family);\n\n  &__input-container {\n    align-items: var(--va-checkbox-input-align-items);\n    display: var(--va-checkbox-input-display);\n    padding: var(--va-checkbox-input-padding);\n    cursor: var(--va-checkbox-input-cursor);\n\n    @at-root {\n      .va-checkbox--disabled & {\n        @include va-disabled();\n\n        cursor: var(--va-checkbox-disabled-cursor);\n      }\n\n      .va-checkbox--readonly & {\n        cursor: var(--va-checkbox-readonly-cursor);\n      }\n\n      .va-checkbox--left-label & {\n        flex-direction: row-reverse;\n      }\n    }\n  }\n\n  #{&}__square {\n    @include flex-center();\n\n    width: var(--va-checkbox-square-width);\n    min-width: var(--va-checkbox-square-min-width);\n    height: var(--va-checkbox-square-height);\n    position: var(--va-checkbox-square-position);\n    background-color: var(--va-checkbox-square-background-color, var(--va-background-color));\n    border: var(--va-checkbox-square-border, var(--va-control-border));\n    border-radius: var(--va-checkbox-square-border-radius, var(--va-square-border-radius));\n\n    @at-root {\n      .va-checkbox--on-keyboard-focus#{&} {\n        transition: all, 0.6s, ease-in;\n        box-shadow: 0 0 0.5rem 0 rgba(0, 0, 0, 0.3);\n      }\n    }\n  }\n\n  &__input {\n    opacity: 0;\n    width: 0;\n    height: 0 !important;\n  }\n\n  &__label {\n    display: var(--va-checkbox-label-display);\n    position: var(--va-checkbox-label-position);\n  }\n\n  &__icon {\n    pointer-events: var(--va-checkbox-icon-pointer-events);\n    position: var(--va-checkbox-icon-position);\n  }\n\n  &--selected {\n    .va-checkbox {\n      &__icon {\n        color: var(--va-checkbox-selected-icon-color);\n      }\n    }\n  }\n\n  &--indeterminate {\n    .va-checkbox {\n      &__icon {\n        color: var(--va-checkbox-indeterminate-icon-color);\n      }\n    }\n  }\n}\n</style>\n","import withConfigTransport from '../../services/config-transport/withConfigTransport'\nimport VaCheckbox from './VaCheckbox.vue'\n\nexport default withConfigTransport(VaCheckbox)\n"],"names":["vaCheckboxValueType","Boolean","Array","String","Object","defineComponent","name","components","VaMessageListWrapper","VaIcon","emits","useSelectableEmits","props","useSelectableProps","modelValue","type","default","color","checkedIcon","indeterminate","indeterminateValue","indeterminateIcon","id","setup","emit","elements","container","ref","input","label","isChecked","computedError","isIndeterminate","computedErrorMessages","toggleSelection","onBlur","onFocus","useSelectable","getColor","getTextColor","useColors","hasKeyboardFocus","keyboardFocusListeners","useKeyboardOnlyFocus","textColorComputed","useTextColor","isActive","computed","value","computedClass","readonly","disabled","leftLabel","labelStyle","padding","inputStyle","style","background","borderColor","computedIconName","_createBlock","class","_ctx","success","messages","error","_createElementVNode","onClick","tabindex","onSelectstart","_mergeProps","role","_toHandlers","onKeypress","_createVNode","size","_renderSlot","withConfigTransport","VaCheckbox"],"mappings":"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"}